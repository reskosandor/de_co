[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
0 0
0 1
0 2
0 3
0 4
1 0
1 1
1 2
1 3
1 4
2 0
2 1
2 2
2 3
2 4
3 0
3 1
3 2
3 3
3 4
4 0
4 1
4 2
4 3
4 4
5 0
5 1
5 2
5 3
5 4
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
{(0, 0): 'grey', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
[(0, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0), (2, 0)]
[(0, 0), (1, 0), (2, 0), (3, 0)]
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
P is :
[[(0, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0), (2, 0)], [(0, 0), (1, 0), (2, 0), (3, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]]
{0: (0, 0), 1: (0, 0), 2: (0, 0), 3: (0, 0), 4: (0, 0), 5: (0, 0)}
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
6
0
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0)]
2
(0, 0)
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0), (2, 0)]
3
(0, 0)
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0)]
4
(0, 0)
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
5
(0, 0)
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(0, 0)
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
j is:
(5, 0)
len(j) is:
2
[[(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)]]
5
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
p is:
[5, 5, 5, 5, 5]
{0: (0, 0), 1: (0, 0), 2: (0, 0), 3: (0, 0), 4: (0, 0), 5: (0, 0)}
[0, 1, 2, 3, 4, 5]
(0, 0)
[0, 2, 3, 4, 5]
(0, 0)
[0, 3, 4, 5]
(0, 0)
[0, 4, 5]
(0, 0)
[0, 5]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0], (1, 0): [1, 2, 3, 4, 5]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
(i.index(j) is
1
i[i.index(j)] is
(1, 0)
i indices
[(0, 0), (1, 0), (2, 0)]
3
(1, 0)
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
(i.index(j) is
1
i[i.index(j)] is
(1, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0)]
4
(1, 0)
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
(i.index(j) is
1
i[i.index(j)] is
(1, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
5
(1, 0)
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
(i.index(j) is
1
i[i.index(j)] is
(1, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(1, 0)
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
j is:
(5, 0)
len(j) is:
2
[[(1, 0), (2, 0)], [(1, 0), (2, 0)], [(1, 0), (2, 0)], [(1, 0), (2, 0)]]
4
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
p is:
[4, 4, 4, 4]
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[1, 2, 3, 4, 5]
(1, 0)
[2, 3, 4, 5]
(1, 0)
[3, 4, 5]
(1, 0)
[4, 5]
(1, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0, 0], (1, 0): [1, 2, 3, 4, 5, 5], (2, 0): [1, 2, 3, 4]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
(i.index(j) is
2
i[i.index(j)] is
(2, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0)]
4
(2, 0)
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
(i.index(j) is
2
i[i.index(j)] is
(2, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
5
(2, 0)
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
(i.index(j) is
2
i[i.index(j)] is
(2, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(2, 0)
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
j is:
(5, 0)
len(j) is:
2
[[(2, 0), (3, 0)], [(2, 0), (3, 0)], [(2, 0), (3, 0)]]
3
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
p is:
[3, 3, 3]
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
[1, 2, 3, 4]
(2, 0)
[2, 3, 4]
(2, 0)
[3, 4]
(2, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (3, 0), 2: (3, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[4]
(2, 0)
[4]
(2, 0)
[4]
(2, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (3, 0), 2: (3, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[4]
(2, 0)
[4]
(2, 0)
[4]
(2, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (3, 0), 2: (3, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0, 0, 0], (1, 0): [1, 2, 3, 4, 5, 5, 5], (2, 0): [1, 2, 3, 4, 4], (3, 0): [1, 2, 3]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
(i.index(j) is
3
i[i.index(j)] is
(3, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
5
(3, 0)
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
(i.index(j) is
3
i[i.index(j)] is
(3, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(3, 0)
j is:
(4, 0)
len(j) is:
2
j is:
(5, 0)
len(j) is:
2
[[(3, 0), (4, 0)], [(3, 0), (4, 0)]]
2
[(3, 0), (4, 0)]
[(3, 0), (4, 0)]
[(3, 0), (4, 0)]
[(3, 0), (4, 0)]
p is:
[2, 2]
{0: (0, 0), 1: (3, 0), 2: (3, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[1, 2, 3]
(3, 0)
[2, 3]
(3, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (4, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[3]
(3, 0)
[3]
(3, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (4, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0, 0, 0, 0], (1, 0): [1, 2, 3, 4, 5, 5, 5, 5], (2, 0): [1, 2, 3, 4, 4, 4], (3, 0): [1, 2, 3, 3], (4, 0): [1, 2]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
(i.index(j) is
4
i[i.index(j)] is
(4, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(4, 0)
j is:
(5, 0)
len(j) is:
2
[[(4, 0), (5, 0)]]
1
[(4, 0), (5, 0)]
p is:
[1]
{0: (0, 0), 1: (4, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[1, 2]
(4, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'black', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (5, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0], (1, 0): [1, 2, 3, 4, 5, 5, 5, 5, 5], (2, 0): [1, 2, 3, 4, 4, 4, 4], (3, 0): [1, 2, 3, 3, 3], (4, 0): [1, 2, 2], (5, 0): [1]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
(i.index(j) is
4
i[i.index(j)] is
(4, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(4, 0)
j is:
(5, 0)
len(j) is:
2
[[(4, 0), (5, 0)]]
1
[(4, 0), (5, 0)]
p is:
[1]
{0: (0, 0), 1: (5, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[2]
(4, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'black', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (5, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
{0: (0, 0), 1: (5, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
{0: (0, 1), 1: (5, 1), 2: (4, 1), 3: (3, 1), 4: (2, 1), 5: (1, 1)}
{(0, 0): 'white', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'white', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'white', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'white', (3, 1): 'black', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'white', (4, 1): 'black', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'white', (5, 1): 'black', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 2), 1: (5, 2), 2: (4, 2), 3: (3, 2), 4: (2, 2), 5: (1, 2)}
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'black', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'white', (1, 1): 'white', (1, 2): 'black', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'white', (2, 1): 'white', (2, 2): 'black', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'white', (3, 1): 'white', (3, 2): 'black', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'white', (4, 1): 'white', (4, 2): 'black', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'white', (5, 1): 'white', (5, 2): 'black', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 3), 1: (5, 3), 2: (4, 3), 3: (3, 3), 4: (2, 3), 5: (1, 3)}
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'black', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'black', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'black', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'black', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'black', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'white', (5, 1): 'white', (5, 2): 'white', (5, 3): 'black', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 4), 1: (5, 4), 2: (4, 4), 3: (3, 4), 4: (2, 4), 5: (1, 4)}
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'black', (0, 5): 'grey', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'black', (1, 5): 'grey', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'black', (2, 5): 'grey', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'black', (3, 5): 'grey', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'black', (4, 5): 'grey', (5, 0): 'white', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'black', (5, 5): 'grey'}
{0: (0, 5), 1: (5, 5), 2: (4, 5), 3: (3, 5), 4: (2, 5), 5: (1, 5)}
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'black', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'black', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'black', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'black', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'black', (5, 0): 'white', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'black'}
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'black', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'black', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'black', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'black', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'black', (5, 0): 'white', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'black'}
6
no grey nodes remain
after_init is 15
move_counter is 45
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
[(0, 0)]
{(0, 0): 'grey', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
[(0, 0)]
P is :
[[(0, 0)]]
{0: (0, 0)}
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
1
0
flipped_agents
{(0, 0): [0]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
[]
0
p is:
[]
{0: (0, 0)}
iteration is over
0
canonical_path
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 5), (1, 4), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 5), (3, 4), (3, 3), (3, 2), (3, 1), (3, 0), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 5), (5, 4), (5, 3), (5, 2), (5, 1), (5, 0)]
36
(0, 1)
{(0, 0): 'white', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(0, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'black', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(0, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'black', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(0, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'black', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(0, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'black', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'black', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'black', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'black', (1, 4): 'white', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'black', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'black', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'black', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'black', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'black', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'black', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'black', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'black', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'black', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'black', (3, 4): 'white', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'black', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'black', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'black', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'black', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'black', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'black', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'black', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'black', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(5, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'black'}
(5, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'black', (5, 5): 'white'}
(5, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'black', (5, 4): 'white', (5, 5): 'white'}
(5, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'black', (5, 3): 'white', (5, 4): 'white', (5, 5): 'white'}
(5, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'black', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'white'}
(5, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'black', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'white'}
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'black', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'white'}
1
no grey nodes remain
after_init is 0
move_counter is 35
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)]
(x,y,z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y,z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y,z) is:
(0, 2, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0)]
(x,y,z) is:
(0, 3, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0)]
(x,y,z) is:
(0, 4, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)]
(x,y,z) is:
(0, 5, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0)]
(x,y,z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y,z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
(x,y,z) is:
(1, 2, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0)]
(x,y,z) is:
(1, 3, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0)]
(x,y,z) is:
(1, 4, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0)]
(x,y,z) is:
(1, 5, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0)]
(x,y,z) is:
(2, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0)]
(x,y,z) is:
(2, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)]
(x,y,z) is:
(2, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0)]
(x,y,z) is:
(2, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0)]
(x,y,z) is:
(2, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0)]
(x,y,z) is:
(2, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0)]
(x,y,z) is:
(3, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]
(x,y,z) is:
(3, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)]
(x,y,z) is:
(3, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0)]
(x,y,z) is:
(3, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)]
(x,y,z) is:
(3, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0)]
(x,y,z) is:
(3, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0)]
(x,y,z) is:
(4, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)]
(x,y,z) is:
(4, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)]
(x,y,z) is:
(4, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0)]
(x,y,z) is:
(4, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0)]
(x,y,z) is:
(4, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)]
(x,y,z) is:
(4, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0)]
(x,y,z) is:
(5, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
(x,y,z) is:
(5, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)]
(x,y,z) is:
(5, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0)]
(x,y,z) is:
(5, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0)]
(x,y,z) is:
(5, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0)]
(x,y,z) is:
(5, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)]]
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
36
edges_of_v_in_P
[[(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[5, 30]
i is:
0
list of agents on v
[0, 1, 2, 3, 4]
v is
(0, 0, 0)
i is:
1
list of agents on v
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
v is
(0, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (1, 0, 0), 8: (1, 0, 0), 9: (1, 0, 0), 10: (1, 0, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (1, 0, 0), 24: (1, 0, 0), 25: (1, 0, 0), 26: (1, 0, 0), 27: (1, 0, 0), 28: (1, 0, 0), 29: (1, 0, 0), 30: (1, 0, 0), 31: (1, 0, 0), 32: (1, 0, 0), 33: (1, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 1, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (1, 0, 0), 8: (1, 0, 0), 9: (1, 0, 0), 10: (1, 0, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (1, 0, 0), 24: (1, 0, 0), 25: (1, 0, 0), 26: (1, 0, 0), 27: (1, 0, 0), 28: (1, 0, 0), 29: (1, 0, 0), 30: (1, 0, 0), 31: (1, 0, 0), 32: (1, 0, 0), 33: (1, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 0, 0): [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], (0, 0, 0): [35]}
v is:
(1, 0, 0)
truest
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
30
edges_of_v_in_P
[[(1, 0, 0), (1, 1, 0)], [(1, 0, 0), (2, 0, 0)]]
p is:
[5, 24]
i is:
0
list of agents on v
[5, 6, 7, 8, 9]
v is
(1, 0, 0)
i is:
1
list of agents on v
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
v is
(1, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 0, 0), 11: (2, 0, 0), 12: (2, 0, 0), 13: (2, 0, 0), 14: (2, 0, 0), 15: (2, 0, 0), 16: (2, 0, 0), 17: (2, 0, 0), 18: (2, 0, 0), 19: (2, 0, 0), 20: (2, 0, 0), 21: (2, 0, 0), 22: (2, 0, 0), 23: (2, 0, 0), 24: (2, 0, 0), 25: (2, 0, 0), 26: (2, 0, 0), 27: (2, 0, 0), 28: (2, 0, 0), 29: (2, 0, 0), 30: (2, 0, 0), 31: (2, 0, 0), 32: (2, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 0, 0), 11: (2, 0, 0), 12: (2, 0, 0), 13: (2, 0, 0), 14: (2, 0, 0), 15: (2, 0, 0), 16: (2, 0, 0), 17: (2, 0, 0), 18: (2, 0, 0), 19: (2, 0, 0), 20: (2, 0, 0), 21: (2, 0, 0), 22: (2, 0, 0), 23: (2, 0, 0), 24: (2, 0, 0), 25: (2, 0, 0), 26: (2, 0, 0), 27: (2, 0, 0), 28: (2, 0, 0), 29: (2, 0, 0), 30: (2, 0, 0), 31: (2, 0, 0), 32: (2, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 0, 0): [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 0, 0)
truest
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
24
edges_of_v_in_P
[[(2, 0, 0), (2, 1, 0)], [(2, 0, 0), (3, 0, 0)]]
p is:
[5, 18]
i is:
0
list of agents on v
[10, 11, 12, 13, 14]
v is
(2, 0, 0)
i is:
1
list of agents on v
[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
v is
(2, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 0, 0), 16: (3, 0, 0), 17: (3, 0, 0), 18: (3, 0, 0), 19: (3, 0, 0), 20: (3, 0, 0), 21: (3, 0, 0), 22: (3, 0, 0), 23: (3, 0, 0), 24: (3, 0, 0), 25: (3, 0, 0), 26: (3, 0, 0), 27: (3, 0, 0), 28: (3, 0, 0), 29: (3, 0, 0), 30: (3, 0, 0), 31: (3, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 0, 0), 16: (3, 0, 0), 17: (3, 0, 0), 18: (3, 0, 0), 19: (3, 0, 0), 20: (3, 0, 0), 21: (3, 0, 0), 22: (3, 0, 0), 23: (3, 0, 0), 24: (3, 0, 0), 25: (3, 0, 0), 26: (3, 0, 0), 27: (3, 0, 0), 28: (3, 0, 0), 29: (3, 0, 0), 30: (3, 0, 0), 31: (3, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 0, 0): [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 0, 0)
truest
[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
18
edges_of_v_in_P
[[(3, 0, 0), (3, 1, 0)], [(3, 0, 0), (4, 0, 0)]]
p is:
[5, 12]
i is:
0
list of agents on v
[15, 16, 17, 18, 19]
v is
(3, 0, 0)
i is:
1
list of agents on v
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
v is
(3, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 0, 0), 21: (4, 0, 0), 22: (4, 0, 0), 23: (4, 0, 0), 24: (4, 0, 0), 25: (4, 0, 0), 26: (4, 0, 0), 27: (4, 0, 0), 28: (4, 0, 0), 29: (4, 0, 0), 30: (4, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 0, 0), 21: (4, 0, 0), 22: (4, 0, 0), 23: (4, 0, 0), 24: (4, 0, 0), 25: (4, 0, 0), 26: (4, 0, 0), 27: (4, 0, 0), 28: (4, 0, 0), 29: (4, 0, 0), 30: (4, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 0, 0): [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 0, 0)
truest
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
12
edges_of_v_in_P
[[(4, 0, 0), (4, 1, 0)], [(4, 0, 0), (5, 0, 0)]]
p is:
[5, 6]
i is:
0
list of agents on v
[20, 21, 22, 23, 24]
v is
(4, 0, 0)
i is:
1
list of agents on v
[25, 26, 27, 28, 29, 30]
v is
(4, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 0, 0), 26: (5, 0, 0), 27: (5, 0, 0), 28: (5, 0, 0), 29: (5, 0, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 0, 0), 26: (5, 0, 0), 27: (5, 0, 0), 28: (5, 0, 0), 29: (5, 0, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 0, 0): [25, 26, 27, 28, 29, 30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 0, 0)
truest
[25, 26, 27, 28, 29, 30]
6
edges_of_v_in_P
[[(5, 0, 0), (5, 1, 0)]]
p is:
[5]
i is:
0
list of agents on v
[25, 26, 27, 28, 29]
v is
(5, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
6
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(0, 1, 0)
truest
[0, 1, 2, 3, 4]
5
edges_of_v_in_P
[[(0, 1, 0), (0, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[0, 1, 2, 3]
v is
(0, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
7
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(1, 1, 0)
truest
[5, 6, 7, 8, 9]
5
edges_of_v_in_P
[[(1, 1, 0), (1, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[5, 6, 7, 8]
v is
(1, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
8
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 1, 0)
truest
[10, 11, 12, 13, 14]
5
edges_of_v_in_P
[[(2, 1, 0), (2, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[10, 11, 12, 13]
v is
(2, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
9
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (2, 2, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 1, 0)
truest
[15, 16, 17, 18, 19]
5
edges_of_v_in_P
[[(3, 1, 0), (3, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[15, 16, 17, 18]
v is
(3, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
10
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (2, 2, 0), (3, 2, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 1, 0)
truest
[20, 21, 22, 23, 24]
5
edges_of_v_in_P
[[(4, 1, 0), (4, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[20, 21, 22, 23]
v is
(4, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
11
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (4, 2, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (2, 2, 0), (3, 2, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 1, 0)
truest
[25, 26, 27, 28, 29]
5
edges_of_v_in_P
[[(5, 1, 0), (5, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[25, 26, 27, 28]
v is
(5, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
12
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (4, 2, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (5, 2, 0), (2, 2, 0), (3, 2, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(0, 2, 0)
truest
[0, 1, 2, 3]
4
edges_of_v_in_P
[[(0, 2, 0), (0, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[0, 1, 2]
v is
(0, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
13
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(1, 2, 0)
truest
[5, 6, 7, 8]
4
edges_of_v_in_P
[[(1, 2, 0), (1, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[5, 6, 7]
v is
(1, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
14
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 2, 0)
truest
[10, 11, 12, 13]
4
edges_of_v_in_P
[[(2, 2, 0), (2, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[10, 11, 12]
v is
(2, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
15
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 2, 0)
truest
[15, 16, 17, 18]
4
edges_of_v_in_P
[[(3, 2, 0), (3, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[15, 16, 17]
v is
(3, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
16
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 2, 0)
truest
[20, 21, 22, 23]
4
edges_of_v_in_P
[[(4, 2, 0), (4, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[20, 21, 22]
v is
(4, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
17
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 2, 0)
truest
[25, 26, 27, 28]
4
edges_of_v_in_P
[[(5, 2, 0), (5, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[25, 26, 27]
v is
(5, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
18
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(0, 3, 0)
truest
[0, 1, 2]
3
edges_of_v_in_P
[[(0, 3, 0), (0, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[0, 1]
v is
(0, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
19
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(1, 3, 0)
truest
[5, 6, 7]
3
edges_of_v_in_P
[[(1, 3, 0), (1, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[5, 6]
v is
(1, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
20
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 3, 0)
truest
[10, 11, 12]
3
edges_of_v_in_P
[[(2, 3, 0), (2, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[10, 11]
v is
(2, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
21
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 3, 0)
truest
[15, 16, 17]
3
edges_of_v_in_P
[[(3, 3, 0), (3, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[15, 16]
v is
(3, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
22
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 3, 0)
truest
[20, 21, 22]
3
edges_of_v_in_P
[[(4, 3, 0), (4, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[20, 21]
v is
(4, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
23
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 3, 0)
truest
[25, 26, 27]
3
edges_of_v_in_P
[[(5, 3, 0), (5, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[25, 26]
v is
(5, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
24
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(0, 4, 0)
truest
[0, 1]
2
edges_of_v_in_P
[[(0, 4, 0), (0, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[0]
v is
(0, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
25
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(1, 4, 0)
truest
[5, 6]
2
edges_of_v_in_P
[[(1, 4, 0), (1, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[5]
v is
(1, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
26
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 5, 0): [5], (1, 4, 0): [6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 4, 0)
truest
[10, 11]
2
edges_of_v_in_P
[[(2, 4, 0), (2, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[10]
v is
(2, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
27
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (2, 5, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 5, 0): [5], (1, 4, 0): [6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 5, 0): [10], (2, 4, 0): [11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 4, 0)
truest
[15, 16]
2
edges_of_v_in_P
[[(3, 4, 0), (3, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[15]
v is
(3, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
28
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (2, 5, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 5, 0): [5], (1, 4, 0): [6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 5, 0): [10], (2, 4, 0): [11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 5, 0): [15], (3, 4, 0): [16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 4, 0)
truest
[20, 21]
2
edges_of_v_in_P
[[(4, 4, 0), (4, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[20]
v is
(4, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 5, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
29
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (0, 3, 0), (4, 5, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (2, 5, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 5, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 5, 0): [5], (1, 4, 0): [6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 5, 0): [10], (2, 4, 0): [11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 5, 0): [15], (3, 4, 0): [16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 5, 0): [20], (4, 4, 0): [21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 4, 0)
truest
[25, 26]
2
edges_of_v_in_P
[[(5, 4, 0), (5, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[25]
v is
(5, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 5, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 5, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
30
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (0, 3, 0), (4, 5, 0), (5, 5, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (2, 5, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 5, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 5, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
36
no grey nodes remain
after_init is 180
move_counter is 360
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
(x,y,z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y,z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y,z) is:
(2, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0)]
(x,y,z) is:
(3, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]
(x,y,z) is:
(4, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)]
(x,y,z) is:
(5, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]]
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5]
6
edges_of_v_in_P
[[(0, 0, 0), (1, 0, 0)]]
p is:
[5]
i is:
0
list of agents on v
[0, 1, 2, 3, 4]
v is
(0, 0, 0)
{0: (1, 0, 0), 1: (1, 0, 0), 2: (1, 0, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0)}
{0: (1, 0, 0), 1: (1, 0, 0), 2: (1, 0, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
flipped_agents
{(1, 0, 0): [0, 1, 2, 3, 4], (0, 0, 0): [5]}
v is:
(1, 0, 0)
truest
[0, 1, 2, 3, 4]
5
edges_of_v_in_P
[[(1, 0, 0), (2, 0, 0)]]
p is:
[4]
i is:
0
list of agents on v
[0, 1, 2, 3]
v is
(1, 0, 0)
{0: (2, 0, 0), 1: (2, 0, 0), 2: (2, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (2, 0, 0)}
{0: (2, 0, 0), 1: (2, 0, 0), 2: (2, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
flipped_agents
{(2, 0, 0): [0, 1, 2, 3], (1, 0, 0): [4], (0, 0, 0): [5]}
v is:
(2, 0, 0)
truest
[0, 1, 2, 3]
4
edges_of_v_in_P
[[(2, 0, 0), (3, 0, 0)]]
p is:
[3]
i is:
0
list of agents on v
[0, 1, 2]
v is
(2, 0, 0)
{0: (3, 0, 0), 1: (3, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(3, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (3, 0, 0), 1: (3, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
flipped_agents
{(3, 0, 0): [0, 1, 2], (2, 0, 0): [3], (1, 0, 0): [4], (0, 0, 0): [5]}
v is:
(3, 0, 0)
truest
[0, 1, 2]
3
edges_of_v_in_P
[[(3, 0, 0), (4, 0, 0)]]
p is:
[2]
i is:
0
list of agents on v
[0, 1]
v is
(3, 0, 0)
{0: (4, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(4, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(3, 0, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (4, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
flipped_agents
{(4, 0, 0): [0, 1], (3, 0, 0): [2], (2, 0, 0): [3], (1, 0, 0): [4], (0, 0, 0): [5]}
v is:
(4, 0, 0)
truest
[0, 1]
2
edges_of_v_in_P
[[(4, 0, 0), (5, 0, 0)]]
p is:
[1]
i is:
0
list of agents on v
[0]
v is
(4, 0, 0)
{0: (5, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(3, 0, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (5, 0, 0), (2, 0, 0)}
{0: (5, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{0: (5, 1, 0), 1: (4, 1, 0), 2: (3, 1, 0), 3: (2, 1, 0), 4: (1, 1, 0), 5: (0, 1, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 0), 1: (4, 2, 0), 2: (3, 2, 0), 3: (2, 2, 0), 4: (1, 2, 0), 5: (0, 2, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 0), 1: (4, 3, 0), 2: (3, 3, 0), 3: (2, 3, 0), 4: (1, 3, 0), 5: (0, 3, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 0), 1: (4, 4, 0), 2: (3, 4, 0), 3: (2, 4, 0), 4: (1, 4, 0), 5: (0, 4, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 0), 1: (4, 5, 0), 2: (3, 5, 0), 3: (2, 5, 0), 4: (1, 5, 0), 5: (0, 5, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 1), 1: (4, 5, 1), 2: (3, 5, 1), 3: (2, 5, 1), 4: (1, 5, 1), 5: (0, 5, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'black', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'black', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'black', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 1), 1: (4, 4, 1), 2: (3, 4, 1), 3: (2, 4, 1), 4: (1, 4, 1), 5: (0, 4, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 1), 1: (4, 3, 1), 2: (3, 3, 1), 3: (2, 3, 1), 4: (1, 3, 1), 5: (0, 3, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 1), 1: (4, 2, 1), 2: (3, 2, 1), 3: (2, 2, 1), 4: (1, 2, 1), 5: (0, 2, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 1, 1), 1: (4, 1, 1), 2: (3, 1, 1), 3: (2, 1, 1), 4: (1, 1, 1), 5: (0, 1, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 1), 1: (4, 0, 1), 2: (3, 0, 1), 3: (2, 0, 1), 4: (1, 0, 1), 5: (0, 0, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 2), 1: (4, 0, 2), 2: (3, 0, 2), 3: (2, 0, 2), 4: (1, 0, 2), 5: (0, 0, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'black', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'black', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'black', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'black', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'black', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'black', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 1, 2), 1: (4, 1, 2), 2: (3, 1, 2), 3: (2, 1, 2), 4: (1, 1, 2), 5: (0, 1, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'black', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'black', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'black', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'black', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'black', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'black', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 2), 1: (4, 2, 2), 2: (3, 2, 2), 3: (2, 2, 2), 4: (1, 2, 2), 5: (0, 2, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'black', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'black', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'black', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'black', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'black', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'black', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 2), 1: (4, 3, 2), 2: (3, 3, 2), 3: (2, 3, 2), 4: (1, 3, 2), 5: (0, 3, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'black', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'black', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'black', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'black', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'black', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'black', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 2), 1: (4, 4, 2), 2: (3, 4, 2), 3: (2, 4, 2), 4: (1, 4, 2), 5: (0, 4, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'black', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'black', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'black', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'black', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'black', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'black', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 2), 1: (4, 5, 2), 2: (3, 5, 2), 3: (2, 5, 2), 4: (1, 5, 2), 5: (0, 5, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'black', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'black', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'black', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'black', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'black', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'black', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 3), 1: (4, 5, 3), 2: (3, 5, 3), 3: (2, 5, 3), 4: (1, 5, 3), 5: (0, 5, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'black', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'black', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'black', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'black', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'black', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'black', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 3), 1: (4, 4, 3), 2: (3, 4, 3), 3: (2, 4, 3), 4: (1, 4, 3), 5: (0, 4, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'black', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'black', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'black', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'black', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'black', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'black', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 3), 1: (4, 3, 3), 2: (3, 3, 3), 3: (2, 3, 3), 4: (1, 3, 3), 5: (0, 3, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'black', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'black', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'black', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'black', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'black', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'black', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 3), 1: (4, 2, 3), 2: (3, 2, 3), 3: (2, 2, 3), 4: (1, 2, 3), 5: (0, 2, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'black', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'black', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'black', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'black', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'black', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'black', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 1, 3), 1: (4, 1, 3), 2: (3, 1, 3), 3: (2, 1, 3), 4: (1, 1, 3), 5: (0, 1, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'black', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'black', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'black', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'black', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'black', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'black', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 3), 1: (4, 0, 3), 2: (3, 0, 3), 3: (2, 0, 3), 4: (1, 0, 3), 5: (0, 0, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'black', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'black', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'black', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'black', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'black', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'black', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 4), 1: (4, 0, 4), 2: (3, 0, 4), 3: (2, 0, 4), 4: (1, 0, 4), 5: (0, 0, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'black', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'black', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'black', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'black', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'black', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'black', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 1, 4), 1: (4, 1, 4), 2: (3, 1, 4), 3: (2, 1, 4), 4: (1, 1, 4), 5: (0, 1, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'black', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'black', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'black', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'black', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'black', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'black', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 4), 1: (4, 2, 4), 2: (3, 2, 4), 3: (2, 2, 4), 4: (1, 2, 4), 5: (0, 2, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'black', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'black', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'black', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'black', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'black', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'black', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 4), 1: (4, 3, 4), 2: (3, 3, 4), 3: (2, 3, 4), 4: (1, 3, 4), 5: (0, 3, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'black', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'black', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'black', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'black', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'black', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'black', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 4), 1: (4, 4, 4), 2: (3, 4, 4), 3: (2, 4, 4), 4: (1, 4, 4), 5: (0, 4, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'black', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'black', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'black', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'black', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'black', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'black', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 4), 1: (4, 5, 4), 2: (3, 5, 4), 3: (2, 5, 4), 4: (1, 5, 4), 5: (0, 5, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'black', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'black', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'black', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'black', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'black', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'black', (5, 5, 5): 'grey'}
{0: (5, 5, 5), 1: (4, 5, 5), 2: (3, 5, 5), 3: (2, 5, 5), 4: (1, 5, 5), 5: (0, 5, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'black', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'black', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'black', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'black', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'black', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'black'}
{0: (5, 4, 5), 1: (4, 4, 5), 2: (3, 4, 5), 3: (2, 4, 5), 4: (1, 4, 5), 5: (0, 4, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'black', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'black', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'black', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'black', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'black', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'black', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
{0: (5, 3, 5), 1: (4, 3, 5), 2: (3, 3, 5), 3: (2, 3, 5), 4: (1, 3, 5), 5: (0, 3, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'black', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'white', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'black', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'white', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'black', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'white', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'black', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'white', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'black', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'white', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'black', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'white', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
{0: (5, 2, 5), 1: (4, 2, 5), 2: (3, 2, 5), 3: (2, 2, 5), 4: (1, 2, 5), 5: (0, 2, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'black', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'white', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'white', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'black', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'white', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'white', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'black', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'white', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'white', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'black', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'white', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'white', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'black', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'white', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'white', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'black', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'white', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'white', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
{0: (5, 1, 5), 1: (4, 1, 5), 2: (3, 1, 5), 3: (2, 1, 5), 4: (1, 1, 5), 5: (0, 1, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'black', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'white', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'white', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'white', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'black', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'white', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'white', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'white', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'black', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'white', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'white', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'white', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'black', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'white', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'white', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'white', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'black', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'white', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'white', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'white', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'black', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'white', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'white', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'white', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
{0: (5, 0, 5), 1: (4, 0, 5), 2: (3, 0, 5), 3: (2, 0, 5), 4: (1, 0, 5), 5: (0, 0, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'black', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'white', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'white', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'white', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'white', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'black', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'white', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'white', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'white', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'white', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'black', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'white', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'white', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'white', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'white', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'black', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'white', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'white', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'white', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'white', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'black', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'white', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'white', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'white', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'white', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'black', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'white', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'white', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'white', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'white', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
6
no grey nodes remain
after_init is 15
move_counter is 225
[(0, 0, 0)]
(x,y,z) is:
(0, 0, 0)
[(0, 0, 0)]
P is :
[[(0, 0, 0)]]
1
no grey nodes remain
after_init is 0
move_counter is 215
[6, 6]
Graph with 36 nodes and 72 edges
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
list of C nodes
[(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1), (4, 0), (4, 1), (5, 0), (5, 1)]
{(0, 0): 'grey', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(x,y) is:
(0, 0)
[(0, 0)]
(x,y) is:
(0, 1)
[(0, 0), (0, 1)]
(x,y) is:
(1, 0)
[(0, 0), (1, 0)]
(x,y) is:
(1, 1)
[(0, 0), (1, 0), (1, 1)]
(x,y) is:
(2, 0)
[(0, 0), (1, 0), (2, 0)]
(x,y) is:
(2, 1)
[(0, 0), (1, 0), (2, 0), (2, 1)]
(x,y) is:
(3, 0)
[(0, 0), (1, 0), (2, 0), (3, 0)]
(x,y) is:
(3, 1)
[(0, 0), (1, 0), (2, 0), (3, 0), (3, 1)]
(x,y) is:
(4, 0)
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
(x,y) is:
(4, 1)
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1)]
(x,y) is:
(5, 0)
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
(x,y) is:
(5, 1)
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (5, 1)]
P is :
[[(0, 0)], [(0, 0), (0, 1)], [(0, 0), (1, 0)], [(0, 0), (1, 0), (1, 1)], [(0, 0), (1, 0), (2, 0)], [(0, 0), (1, 0), (2, 0), (2, 1)], [(0, 0), (1, 0), (2, 0), (3, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (5, 1)]]
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}
v is:
(0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
12
edges_of_v_in_P
[[(0, 0), (0, 1)], [(0, 0), (1, 0)]]
p is:
[1, 10]
i is:
0
list of agents on v
[0]
v is
(0, 0)
i is:
1
list of agents on v
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
v is
(0, 0)
{0: (0, 1), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0), 6: (1, 0), 7: (1, 0), 8: (1, 0), 9: (1, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 1), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (1, 0), (0, 0)}
{0: (0, 1), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0), 6: (1, 0), 7: (1, 0), 8: (1, 0), 9: (1, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (0, 0): [11]}
v is:
(1, 0)
truest
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
10
edges_of_v_in_P
[[(1, 0), (1, 1)], [(1, 0), (2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[1]
v is
(1, 0)
i is:
1
list of agents on v
[2, 3, 4, 5, 6, 7, 8, 9]
v is
(1, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (2, 0), 6: (2, 0), 7: (2, 0), 8: (2, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 1), (1, 1), (2, 0), (2, 0), (2, 0), (2, 0), (2, 0), (2, 0), (2, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (0, 0), (1, 1), (2, 0), (1, 0)}
{0: (0, 1), 1: (1, 1), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (2, 0), 6: (2, 0), 7: (2, 0), 8: (2, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 1): [1], (2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (1, 0): [10], (0, 0): [11]}
v is:
(2, 0)
truest
[2, 3, 4, 5, 6, 7, 8, 9]
8
edges_of_v_in_P
[[(2, 0), (2, 1)], [(2, 0), (3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[2]
v is
(2, 0)
i is:
1
list of agents on v
[3, 4, 5, 6, 7, 8]
v is
(2, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 0), 4: (3, 0), 5: (3, 0), 6: (3, 0), 7: (3, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 1), (1, 1), (2, 1), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (2, 1), (0, 0), (1, 1), (2, 0), (3, 0), (1, 0)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 0), 4: (3, 0), 5: (3, 0), 6: (3, 0), 7: (3, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 1): [1], (2, 1): [2], (3, 0): [3, 4, 5, 6, 7, 8], (2, 0): [9], (1, 0): [10], (0, 0): [11]}
v is:
(3, 0)
truest
[3, 4, 5, 6, 7, 8]
6
edges_of_v_in_P
[[(3, 0), (3, 1)], [(3, 0), (4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[3]
v is
(3, 0)
i is:
1
list of agents on v
[4, 5, 6, 7]
v is
(3, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 0), 5: (4, 0), 6: (4, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'black', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 1), (1, 1), (2, 1), (3, 1), (4, 0), (4, 0), (4, 0), (4, 0), (3, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (4, 0), (2, 1), (0, 0), (3, 1), (1, 1), (2, 0), (3, 0), (1, 0)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 0), 5: (4, 0), 6: (4, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 1): [1], (2, 1): [2], (3, 1): [3], (4, 0): [4, 5, 6, 7], (3, 0): [8], (2, 0): [9], (1, 0): [10], (0, 0): [11]}
v is:
(4, 0)
truest
[4, 5, 6, 7]
4
edges_of_v_in_P
[[(4, 0), (4, 1)], [(4, 0), (5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[4]
v is
(4, 0)
i is:
1
list of agents on v
[5, 6]
v is
(4, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 0), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'black', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'black', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'black', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 0), (5, 0), (4, 0), (3, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (4, 0), (2, 1), (0, 0), (3, 1), (1, 1), (2, 0), (3, 0), (5, 0), (1, 0), (4, 1)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 0), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 1): [1], (2, 1): [2], (3, 1): [3], (4, 1): [4], (5, 0): [5, 6], (4, 0): [7], (3, 0): [8], (2, 0): [9], (1, 0): [10], (0, 0): [11]}
v is:
(5, 0)
truest
[5, 6]
2
edges_of_v_in_P
[[(5, 0), (5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[5]
v is
(5, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 1), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'black', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'black', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'black', (5, 1): 'black', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
6
values
[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (5, 0), (4, 0), (3, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (4, 0), (2, 1), (0, 0), (3, 1), (1, 1), (2, 0), (5, 1), (3, 0), (5, 0), (1, 0), (4, 1)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 1), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 1), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
i in range is
6
moved
{0: (0, 2), 1: (1, 2), 2: (2, 2), 3: (3, 2), 4: (4, 2), 5: (5, 2), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
moved
{0: (0, 3), 1: (1, 3), 2: (2, 3), 3: (3, 3), 4: (4, 3), 5: (5, 3), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
moved
{0: (0, 4), 1: (1, 4), 2: (2, 4), 3: (3, 4), 4: (4, 4), 5: (5, 4), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
moved
{0: (0, 5), 1: (1, 5), 2: (2, 5), 3: (3, 5), 4: (4, 5), 5: (5, 5), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
12
no grey nodes remain
after_init is 36
move_counter is 60
[6, 6]
Graph with 36 nodes and 72 edges
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
list of C nodes
[(0, 0), (0, 1), (1, 0), (1, 1)]
{(0, 0): 'grey', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(x,y) is:
(0, 0)
[(0, 0)]
(x,y) is:
(0, 1)
[(0, 0), (0, 1)]
(x,y) is:
(1, 0)
[(0, 0), (1, 0)]
(x,y) is:
(1, 1)
[(0, 0), (1, 0), (1, 1)]
P is :
[[(0, 0)], [(0, 0), (0, 1)], [(0, 0), (1, 0)], [(0, 0), (1, 0), (1, 1)]]
flipped_agents
{(0, 0): [0, 1, 2, 3]}
v is:
(0, 0)
truest
[0, 1, 2, 3]
4
edges_of_v_in_P
[[(0, 0), (0, 1)], [(0, 0), (1, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[0]
v is
(0, 0)
i is:
1
list of agents on v
[1, 2]
v is
(0, 0)
{0: (0, 1), 1: (1, 0), 2: (1, 0), 3: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 1), (1, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (1, 0), (0, 0)}
{0: (0, 1), 1: (1, 0), 2: (1, 0), 3: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 0): [1, 2], (0, 0): [3]}
v is:
(1, 0)
truest
[1, 2]
2
edges_of_v_in_P
[[(1, 0), (1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[1]
v is
(1, 0)
{0: (0, 1), 1: (1, 1), 2: (1, 0), 3: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 1), (1, 1), (1, 0), (0, 0)]
set(values)
{(0, 1), (1, 0), (1, 1), (0, 0)}
{0: (0, 1), 1: (1, 1), 2: (1, 0), 3: (0, 0)}
{0: (0, 1), 1: (1, 1), 2: (1, 0), 3: (0, 0)}
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
shift became
1
{0: (0, 1), 1: (2, 1), 2: (2, 0), 3: (0, 0)}
we just moved the agents on the vertices, where 1st coord is 2, its first coord is changed by 1
shift became
2
{0: (0, 1), 1: (3, 1), 2: (3, 0), 3: (0, 0)}
we just moved the agents on the vertices, where 1st coord is 3, its first coord is changed by 1
shift became
3
{0: (0, 1), 1: (4, 1), 2: (4, 0), 3: (0, 0)}
we just moved the agents on the vertices, where 1st coord is 4, its first coord is changed by 1
shift became
4
{0: (0, 1), 1: (5, 1), 2: (5, 0), 3: (0, 0)}
if happened
{0: (0, 2), 1: (5, 2), 2: (5, 5), 3: (0, 5)}
we just moved the agents on the vertices, where 1st coord is 5, its first coord is changed by -1
shift became
3
{0: (0, 2), 1: (4, 2), 2: (4, 5), 3: (0, 5)}
we just moved the agents on the vertices, where 1st coord is 4, its first coord is changed by -1
shift became
2
{0: (0, 2), 1: (3, 2), 2: (3, 5), 3: (0, 5)}
we just moved the agents on the vertices, where 1st coord is 3, its first coord is changed by -1
shift became
1
{0: (0, 2), 1: (2, 2), 2: (2, 5), 3: (0, 5)}
we just moved the agents on the vertices, where 1st coord is 2, its first coord is changed by -1
shift became
0
{0: (0, 2), 1: (1, 2), 2: (1, 5), 3: (0, 5)}
if happened
{0: (0, 3), 1: (1, 3), 2: (1, 4), 3: (0, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
shift became
1
{0: (0, 3), 1: (2, 3), 2: (2, 4), 3: (0, 4)}
we just moved the agents on the vertices, where 1st coord is 2, its first coord is changed by 1
shift became
2
{0: (0, 3), 1: (3, 3), 2: (3, 4), 3: (0, 4)}
we just moved the agents on the vertices, where 1st coord is 3, its first coord is changed by 1
shift became
3
{0: (0, 3), 1: (4, 3), 2: (4, 4), 3: (0, 4)}
we just moved the agents on the vertices, where 1st coord is 4, its first coord is changed by 1
shift became
4
{0: (0, 3), 1: (5, 3), 2: (5, 4), 3: (0, 4)}
4
no grey nodes remain
after_init is 4
move_counter is 36
move counter at starting position is 0
dimensions are the following: [6, 6, 6]
Graph with 216 nodes and 648 edges
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (0, 3, 4), (0, 3, 5), (0, 4, 0), (0, 4, 1), (0, 4, 2), (0, 4, 3), (0, 4, 4), (0, 4, 5), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 3), (0, 5, 4), (0, 5, 5), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 0), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 4, 5), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 3), (1, 5, 4), (1, 5, 5), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 0), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (2, 4, 5), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 3), (2, 5, 4), (2, 5, 5), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 0, 4), (3, 0, 5), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 1, 5), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 2, 5), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 0), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (3, 4, 5), (3, 5, 0), (3, 5, 1), (3, 5, 2), (3, 5, 3), (3, 5, 4), (3, 5, 5), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 2, 0), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 2, 5), (4, 3, 0), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 3, 5), (4, 4, 0), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4), (4, 4, 5), (4, 5, 0), (4, 5, 1), (4, 5, 2), (4, 5, 3), (4, 5, 4), (4, 5, 5), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 0), (5, 3, 1), (5, 3, 2), (5, 3, 3), (5, 3, 4), (5, 3, 5), (5, 4, 0), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 3), (5, 5, 4), (5, 5, 5)]
list of C nodes
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (0, 2, 0), (0, 2, 1), (0, 3, 0), (0, 3, 1), (0, 4, 0), (0, 4, 1), (0, 5, 0), (0, 5, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1), (1, 2, 0), (1, 2, 1), (1, 3, 0), (1, 3, 1), (1, 4, 0), (1, 4, 1), (1, 5, 0), (1, 5, 1), (2, 0, 0), (2, 0, 1), (2, 1, 0), (2, 1, 1), (2, 2, 0), (2, 2, 1), (2, 3, 0), (2, 3, 1), (2, 4, 0), (2, 4, 1), (2, 5, 0), (2, 5, 1), (3, 0, 0), (3, 0, 1), (3, 1, 0), (3, 1, 1), (3, 2, 0), (3, 2, 1), (3, 3, 0), (3, 3, 1), (3, 4, 0), (3, 4, 1), (3, 5, 0), (3, 5, 1), (4, 0, 0), (4, 0, 1), (4, 1, 0), (4, 1, 1), (4, 2, 0), (4, 2, 1), (4, 3, 0), (4, 3, 1), (4, 4, 0), (4, 4, 1), (4, 5, 0), (4, 5, 1), (5, 0, 0), (5, 0, 1), (5, 1, 0), (5, 1, 1), (5, 2, 0), (5, 2, 1), (5, 3, 0), (5, 3, 1), (5, 4, 0), (5, 4, 1), (5, 5, 0), (5, 5, 1)]
{(0, 0, 0): 'grey', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'grey', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
(x,y, z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y, z) is:
(0, 0, 1)
[(0, 0, 0), (0, 0, 1)]
(x,y, z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y, z) is:
(0, 1, 1)
[(0, 0, 0), (0, 1, 0), (0, 1, 1)]
(x,y, z) is:
(0, 2, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0)]
(x,y, z) is:
(0, 2, 1)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 2, 1)]
(x,y, z) is:
(0, 3, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0)]
(x,y, z) is:
(0, 3, 1)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 3, 1)]
(x,y, z) is:
(0, 4, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)]
(x,y, z) is:
(0, 4, 1)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 4, 1)]
(x,y, z) is:
(0, 5, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0)]
(x,y, z) is:
(0, 5, 1)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0), (0, 5, 1)]
(x,y, z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y, z) is:
(1, 0, 1)
[(0, 0, 0), (1, 0, 0), (1, 0, 1)]
(x,y, z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
(x,y, z) is:
(1, 1, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]
(x,y, z) is:
(1, 2, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0)]
(x,y, z) is:
(1, 2, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 2, 1)]
(x,y, z) is:
(1, 3, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0)]
(x,y, z) is:
(1, 3, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 3, 1)]
(x,y, z) is:
(1, 4, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0)]
(x,y, z) is:
(1, 4, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 4, 1)]
(x,y, z) is:
(1, 5, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0)]
(x,y, z) is:
(1, 5, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0), (1, 5, 1)]
(x,y, z) is:
(2, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0)]
(x,y, z) is:
(2, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 1)]
(x,y, z) is:
(2, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)]
(x,y, z) is:
(2, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 1, 1)]
(x,y, z) is:
(2, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0)]
(x,y, z) is:
(2, 2, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 2, 1)]
(x,y, z) is:
(2, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0)]
(x,y, z) is:
(2, 3, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 3, 1)]
(x,y, z) is:
(2, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0)]
(x,y, z) is:
(2, 4, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 4, 1)]
(x,y, z) is:
(2, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0)]
(x,y, z) is:
(2, 5, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0), (2, 5, 1)]
(x,y, z) is:
(3, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]
(x,y, z) is:
(3, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 1)]
(x,y, z) is:
(3, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)]
(x,y, z) is:
(3, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 1, 1)]
(x,y, z) is:
(3, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0)]
(x,y, z) is:
(3, 2, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 2, 1)]
(x,y, z) is:
(3, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)]
(x,y, z) is:
(3, 3, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 3, 1)]
(x,y, z) is:
(3, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0)]
(x,y, z) is:
(3, 4, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 4, 1)]
(x,y, z) is:
(3, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0)]
(x,y, z) is:
(3, 5, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0), (3, 5, 1)]
(x,y, z) is:
(4, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)]
(x,y, z) is:
(4, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1)]
(x,y, z) is:
(4, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)]
(x,y, z) is:
(4, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 1, 1)]
(x,y, z) is:
(4, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0)]
(x,y, z) is:
(4, 2, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 2, 1)]
(x,y, z) is:
(4, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0)]
(x,y, z) is:
(4, 3, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 3, 1)]
(x,y, z) is:
(4, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)]
(x,y, z) is:
(4, 4, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 4, 1)]
(x,y, z) is:
(4, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0)]
(x,y, z) is:
(4, 5, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0), (4, 5, 1)]
(x,y, z) is:
(5, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
(x,y, z) is:
(5, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 0, 1)]
(x,y, z) is:
(5, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)]
(x,y, z) is:
(5, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 1, 1)]
(x,y, z) is:
(5, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0)]
(x,y, z) is:
(5, 2, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 2, 1)]
(x,y, z) is:
(5, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0)]
(x,y, z) is:
(5, 3, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 3, 1)]
(x,y, z) is:
(5, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0)]
(x,y, z) is:
(5, 4, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 4, 1)]
(x,y, z) is:
(5, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)]
(x,y, z) is:
(5, 5, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0), (5, 5, 1)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (0, 1, 0), (0, 1, 1)], [(0, 0, 0), (0, 1, 0), (0, 2, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 2, 1)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 3, 1)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 4, 1)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0), (0, 5, 1)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 0, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 2, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 3, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 4, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0), (1, 5, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 2, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 3, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 4, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0), (2, 5, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 2, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 3, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 4, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0), (3, 5, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 2, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 3, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 4, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0), (4, 5, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 2, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 3, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 4, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0), (5, 5, 1)]]
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71]
72
edges_of_v_in_P
[[(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[1, 10, 60]
i is:
0
list of agents on v
[0]
v is
(0, 0, 0)
i is:
1
list of agents on v
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
v is
(0, 0, 0)
i is:
2
list of agents on v
[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70]
v is
(0, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (1, 0, 0), 24: (1, 0, 0), 25: (1, 0, 0), 26: (1, 0, 0), 27: (1, 0, 0), 28: (1, 0, 0), 29: (1, 0, 0), 30: (1, 0, 0), 31: (1, 0, 0), 32: (1, 0, 0), 33: (1, 0, 0), 34: (1, 0, 0), 35: (1, 0, 0), 36: (1, 0, 0), 37: (1, 0, 0), 38: (1, 0, 0), 39: (1, 0, 0), 40: (1, 0, 0), 41: (1, 0, 0), 42: (1, 0, 0), 43: (1, 0, 0), 44: (1, 0, 0), 45: (1, 0, 0), 46: (1, 0, 0), 47: (1, 0, 0), 48: (1, 0, 0), 49: (1, 0, 0), 50: (1, 0, 0), 51: (1, 0, 0), 52: (1, 0, 0), 53: (1, 0, 0), 54: (1, 0, 0), 55: (1, 0, 0), 56: (1, 0, 0), 57: (1, 0, 0), 58: (1, 0, 0), 59: (1, 0, 0), 60: (1, 0, 0), 61: (1, 0, 0), 62: (1, 0, 0), 63: (1, 0, 0), 64: (1, 0, 0), 65: (1, 0, 0), 66: (1, 0, 0), 67: (1, 0, 0), 68: (1, 0, 0), 69: (1, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (1, 0, 0), 24: (1, 0, 0), 25: (1, 0, 0), 26: (1, 0, 0), 27: (1, 0, 0), 28: (1, 0, 0), 29: (1, 0, 0), 30: (1, 0, 0), 31: (1, 0, 0), 32: (1, 0, 0), 33: (1, 0, 0), 34: (1, 0, 0), 35: (1, 0, 0), 36: (1, 0, 0), 37: (1, 0, 0), 38: (1, 0, 0), 39: (1, 0, 0), 40: (1, 0, 0), 41: (1, 0, 0), 42: (1, 0, 0), 43: (1, 0, 0), 44: (1, 0, 0), 45: (1, 0, 0), 46: (1, 0, 0), 47: (1, 0, 0), 48: (1, 0, 0), 49: (1, 0, 0), 50: (1, 0, 0), 51: (1, 0, 0), 52: (1, 0, 0), 53: (1, 0, 0), 54: (1, 0, 0), 55: (1, 0, 0), 56: (1, 0, 0), 57: (1, 0, 0), 58: (1, 0, 0), 59: (1, 0, 0), 60: (1, 0, 0), 61: (1, 0, 0), 62: (1, 0, 0), 63: (1, 0, 0), 64: (1, 0, 0), 65: (1, 0, 0), 66: (1, 0, 0), 67: (1, 0, 0), 68: (1, 0, 0), 69: (1, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 0): [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], (0, 0, 0): [71]}
v is:
(1, 0, 0)
truest
[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70]
60
edges_of_v_in_P
[[(1, 0, 0), (1, 0, 1)], [(1, 0, 0), (1, 1, 0)], [(1, 0, 0), (2, 0, 0)]]
p is:
[1, 10, 48]
i is:
0
list of agents on v
[11]
v is
(1, 0, 0)
i is:
1
list of agents on v
[12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
v is
(1, 0, 0)
i is:
2
list of agents on v
[22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69]
v is
(1, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 0), 23: (2, 0, 0), 24: (2, 0, 0), 25: (2, 0, 0), 26: (2, 0, 0), 27: (2, 0, 0), 28: (2, 0, 0), 29: (2, 0, 0), 30: (2, 0, 0), 31: (2, 0, 0), 32: (2, 0, 0), 33: (2, 0, 0), 34: (2, 0, 0), 35: (2, 0, 0), 36: (2, 0, 0), 37: (2, 0, 0), 38: (2, 0, 0), 39: (2, 0, 0), 40: (2, 0, 0), 41: (2, 0, 0), 42: (2, 0, 0), 43: (2, 0, 0), 44: (2, 0, 0), 45: (2, 0, 0), 46: (2, 0, 0), 47: (2, 0, 0), 48: (2, 0, 0), 49: (2, 0, 0), 50: (2, 0, 0), 51: (2, 0, 0), 52: (2, 0, 0), 53: (2, 0, 0), 54: (2, 0, 0), 55: (2, 0, 0), 56: (2, 0, 0), 57: (2, 0, 0), 58: (2, 0, 0), 59: (2, 0, 0), 60: (2, 0, 0), 61: (2, 0, 0), 62: (2, 0, 0), 63: (2, 0, 0), 64: (2, 0, 0), 65: (2, 0, 0), 66: (2, 0, 0), 67: (2, 0, 0), 68: (2, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 0), 23: (2, 0, 0), 24: (2, 0, 0), 25: (2, 0, 0), 26: (2, 0, 0), 27: (2, 0, 0), 28: (2, 0, 0), 29: (2, 0, 0), 30: (2, 0, 0), 31: (2, 0, 0), 32: (2, 0, 0), 33: (2, 0, 0), 34: (2, 0, 0), 35: (2, 0, 0), 36: (2, 0, 0), 37: (2, 0, 0), 38: (2, 0, 0), 39: (2, 0, 0), 40: (2, 0, 0), 41: (2, 0, 0), 42: (2, 0, 0), 43: (2, 0, 0), 44: (2, 0, 0), 45: (2, 0, 0), 46: (2, 0, 0), 47: (2, 0, 0), 48: (2, 0, 0), 49: (2, 0, 0), 50: (2, 0, 0), 51: (2, 0, 0), 52: (2, 0, 0), 53: (2, 0, 0), 54: (2, 0, 0), 55: (2, 0, 0), 56: (2, 0, 0), 57: (2, 0, 0), 58: (2, 0, 0), 59: (2, 0, 0), 60: (2, 0, 0), 61: (2, 0, 0), 62: (2, 0, 0), 63: (2, 0, 0), 64: (2, 0, 0), 65: (2, 0, 0), 66: (2, 0, 0), 67: (2, 0, 0), 68: (2, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 0): [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 0, 0)
truest
[22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69]
48
edges_of_v_in_P
[[(2, 0, 0), (2, 0, 1)], [(2, 0, 0), (2, 1, 0)], [(2, 0, 0), (3, 0, 0)]]
p is:
[1, 10, 36]
i is:
0
list of agents on v
[22]
v is
(2, 0, 0)
i is:
1
list of agents on v
[23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
v is
(2, 0, 0)
i is:
2
list of agents on v
[33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68]
v is
(2, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 0), 34: (3, 0, 0), 35: (3, 0, 0), 36: (3, 0, 0), 37: (3, 0, 0), 38: (3, 0, 0), 39: (3, 0, 0), 40: (3, 0, 0), 41: (3, 0, 0), 42: (3, 0, 0), 43: (3, 0, 0), 44: (3, 0, 0), 45: (3, 0, 0), 46: (3, 0, 0), 47: (3, 0, 0), 48: (3, 0, 0), 49: (3, 0, 0), 50: (3, 0, 0), 51: (3, 0, 0), 52: (3, 0, 0), 53: (3, 0, 0), 54: (3, 0, 0), 55: (3, 0, 0), 56: (3, 0, 0), 57: (3, 0, 0), 58: (3, 0, 0), 59: (3, 0, 0), 60: (3, 0, 0), 61: (3, 0, 0), 62: (3, 0, 0), 63: (3, 0, 0), 64: (3, 0, 0), 65: (3, 0, 0), 66: (3, 0, 0), 67: (3, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (2, 0, 1), (1, 0, 0), (2, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 0), 34: (3, 0, 0), 35: (3, 0, 0), 36: (3, 0, 0), 37: (3, 0, 0), 38: (3, 0, 0), 39: (3, 0, 0), 40: (3, 0, 0), 41: (3, 0, 0), 42: (3, 0, 0), 43: (3, 0, 0), 44: (3, 0, 0), 45: (3, 0, 0), 46: (3, 0, 0), 47: (3, 0, 0), 48: (3, 0, 0), 49: (3, 0, 0), 50: (3, 0, 0), 51: (3, 0, 0), 52: (3, 0, 0), 53: (3, 0, 0), 54: (3, 0, 0), 55: (3, 0, 0), 56: (3, 0, 0), 57: (3, 0, 0), 58: (3, 0, 0), 59: (3, 0, 0), 60: (3, 0, 0), 61: (3, 0, 0), 62: (3, 0, 0), 63: (3, 0, 0), 64: (3, 0, 0), 65: (3, 0, 0), 66: (3, 0, 0), 67: (3, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 0): [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 0, 0)
truest
[33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68]
36
edges_of_v_in_P
[[(3, 0, 0), (3, 0, 1)], [(3, 0, 0), (3, 1, 0)], [(3, 0, 0), (4, 0, 0)]]
p is:
[1, 10, 24]
i is:
0
list of agents on v
[33]
v is
(3, 0, 0)
i is:
1
list of agents on v
[34, 35, 36, 37, 38, 39, 40, 41, 42, 43]
v is
(3, 0, 0)
i is:
2
list of agents on v
[44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67]
v is
(3, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 0), 45: (4, 0, 0), 46: (4, 0, 0), 47: (4, 0, 0), 48: (4, 0, 0), 49: (4, 0, 0), 50: (4, 0, 0), 51: (4, 0, 0), 52: (4, 0, 0), 53: (4, 0, 0), 54: (4, 0, 0), 55: (4, 0, 0), 56: (4, 0, 0), 57: (4, 0, 0), 58: (4, 0, 0), 59: (4, 0, 0), 60: (4, 0, 0), 61: (4, 0, 0), 62: (4, 0, 0), 63: (4, 0, 0), 64: (4, 0, 0), 65: (4, 0, 0), 66: (4, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (2, 0, 1), (1, 0, 0), (2, 0, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 0), 45: (4, 0, 0), 46: (4, 0, 0), 47: (4, 0, 0), 48: (4, 0, 0), 49: (4, 0, 0), 50: (4, 0, 0), 51: (4, 0, 0), 52: (4, 0, 0), 53: (4, 0, 0), 54: (4, 0, 0), 55: (4, 0, 0), 56: (4, 0, 0), 57: (4, 0, 0), 58: (4, 0, 0), 59: (4, 0, 0), 60: (4, 0, 0), 61: (4, 0, 0), 62: (4, 0, 0), 63: (4, 0, 0), 64: (4, 0, 0), 65: (4, 0, 0), 66: (4, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 0): [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 0, 0)
truest
[44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67]
24
edges_of_v_in_P
[[(4, 0, 0), (4, 0, 1)], [(4, 0, 0), (4, 1, 0)], [(4, 0, 0), (5, 0, 0)]]
p is:
[1, 10, 12]
i is:
0
list of agents on v
[44]
v is
(4, 0, 0)
i is:
1
list of agents on v
[45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
v is
(4, 0, 0)
i is:
2
list of agents on v
[55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]
v is
(4, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 0), 56: (5, 0, 0), 57: (5, 0, 0), 58: (5, 0, 0), 59: (5, 0, 0), 60: (5, 0, 0), 61: (5, 0, 0), 62: (5, 0, 0), 63: (5, 0, 0), 64: (5, 0, 0), 65: (5, 0, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (4, 0, 1), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (2, 0, 1), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 0), 56: (5, 0, 0), 57: (5, 0, 0), 58: (5, 0, 0), 59: (5, 0, 0), 60: (5, 0, 0), 61: (5, 0, 0), 62: (5, 0, 0), 63: (5, 0, 0), 64: (5, 0, 0), 65: (5, 0, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 0): [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 0, 0)
truest
[55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]
12
edges_of_v_in_P
[[(5, 0, 0), (5, 0, 1)], [(5, 0, 0), (5, 1, 0)]]
p is:
[1, 10]
i is:
0
list of agents on v
[55]
v is
(5, 0, 0)
i is:
1
list of agents on v
[56, 57, 58, 59, 60, 61, 62, 63, 64, 65]
v is
(5, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
6
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (4, 0, 1), (3, 0, 0), (3, 1, 0), (0, 0, 0), (5, 0, 1), (4, 0, 0), (2, 0, 1), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 1, 0)
truest
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
10
edges_of_v_in_P
[[(0, 1, 0), (0, 1, 1)], [(0, 1, 0), (0, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[1]
v is
(0, 1, 0)
i is:
1
list of agents on v
[2, 3, 4, 5, 6, 7, 8, 9]
v is
(0, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
7
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 1, 0)
truest
[12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
10
edges_of_v_in_P
[[(1, 1, 0), (1, 1, 1)], [(1, 1, 0), (1, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[12]
v is
(1, 1, 0)
i is:
1
list of agents on v
[13, 14, 15, 16, 17, 18, 19, 20]
v is
(1, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
8
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 1, 0)
truest
[23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
10
edges_of_v_in_P
[[(2, 1, 0), (2, 1, 1)], [(2, 1, 0), (2, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[23]
v is
(2, 1, 0)
i is:
1
list of agents on v
[24, 25, 26, 27, 28, 29, 30, 31]
v is
(2, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
9
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 1, 0)
truest
[34, 35, 36, 37, 38, 39, 40, 41, 42, 43]
10
edges_of_v_in_P
[[(3, 1, 0), (3, 1, 1)], [(3, 1, 0), (3, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[34]
v is
(3, 1, 0)
i is:
1
list of agents on v
[35, 36, 37, 38, 39, 40, 41, 42]
v is
(3, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
10
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (3, 1, 1), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 1, 0)
truest
[45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
10
edges_of_v_in_P
[[(4, 1, 0), (4, 1, 1)], [(4, 1, 0), (4, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[45]
v is
(4, 1, 0)
i is:
1
list of agents on v
[46, 47, 48, 49, 50, 51, 52, 53]
v is
(4, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
11
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (5, 0, 0), (3, 1, 1), (3, 2, 0), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 1, 0)
truest
[56, 57, 58, 59, 60, 61, 62, 63, 64, 65]
10
edges_of_v_in_P
[[(5, 1, 0), (5, 1, 1)], [(5, 1, 0), (5, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[56]
v is
(5, 1, 0)
i is:
1
list of agents on v
[57, 58, 59, 60, 61, 62, 63, 64]
v is
(5, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
12
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 2, 0)
truest
[2, 3, 4, 5, 6, 7, 8, 9]
8
edges_of_v_in_P
[[(0, 2, 0), (0, 2, 1)], [(0, 2, 0), (0, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[2]
v is
(0, 2, 0)
i is:
1
list of agents on v
[3, 4, 5, 6, 7, 8]
v is
(0, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
13
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (5, 0, 1), (0, 0, 1), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 2, 0)
truest
[13, 14, 15, 16, 17, 18, 19, 20]
8
edges_of_v_in_P
[[(1, 2, 0), (1, 2, 1)], [(1, 2, 0), (1, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[13]
v is
(1, 2, 0)
i is:
1
list of agents on v
[14, 15, 16, 17, 18, 19]
v is
(1, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
14
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (5, 0, 1), (1, 3, 0), (0, 0, 1), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 2, 0)
truest
[24, 25, 26, 27, 28, 29, 30, 31]
8
edges_of_v_in_P
[[(2, 2, 0), (2, 2, 1)], [(2, 2, 0), (2, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[24]
v is
(2, 2, 0)
i is:
1
list of agents on v
[25, 26, 27, 28, 29, 30]
v is
(2, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
15
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (5, 0, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 2, 0)
truest
[35, 36, 37, 38, 39, 40, 41, 42]
8
edges_of_v_in_P
[[(3, 2, 0), (3, 2, 1)], [(3, 2, 0), (3, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[35]
v is
(3, 2, 0)
i is:
1
list of agents on v
[36, 37, 38, 39, 40, 41]
v is
(3, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
16
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (5, 0, 1), (3, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 2, 0)
truest
[46, 47, 48, 49, 50, 51, 52, 53]
8
edges_of_v_in_P
[[(4, 2, 0), (4, 2, 1)], [(4, 2, 0), (4, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[46]
v is
(4, 2, 0)
i is:
1
list of agents on v
[47, 48, 49, 50, 51, 52]
v is
(4, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
17
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 2, 0)
truest
[57, 58, 59, 60, 61, 62, 63, 64]
8
edges_of_v_in_P
[[(5, 2, 0), (5, 2, 1)], [(5, 2, 0), (5, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[57]
v is
(5, 2, 0)
i is:
1
list of agents on v
[58, 59, 60, 61, 62, 63]
v is
(5, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
18
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 3, 0)
truest
[3, 4, 5, 6, 7, 8]
6
edges_of_v_in_P
[[(0, 3, 0), (0, 3, 1)], [(0, 3, 0), (0, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[3]
v is
(0, 3, 0)
i is:
1
list of agents on v
[4, 5, 6, 7]
v is
(0, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
19
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 3, 0)
truest
[14, 15, 16, 17, 18, 19]
6
edges_of_v_in_P
[[(1, 3, 0), (1, 3, 1)], [(1, 3, 0), (1, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[14]
v is
(1, 3, 0)
i is:
1
list of agents on v
[15, 16, 17, 18]
v is
(1, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
20
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 3, 0)
truest
[25, 26, 27, 28, 29, 30]
6
edges_of_v_in_P
[[(2, 3, 0), (2, 3, 1)], [(2, 3, 0), (2, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[25]
v is
(2, 3, 0)
i is:
1
list of agents on v
[26, 27, 28, 29]
v is
(2, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
21
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 3, 0)
truest
[36, 37, 38, 39, 40, 41]
6
edges_of_v_in_P
[[(3, 3, 0), (3, 3, 1)], [(3, 3, 0), (3, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[36]
v is
(3, 3, 0)
i is:
1
list of agents on v
[37, 38, 39, 40]
v is
(3, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
22
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 3, 0)
truest
[47, 48, 49, 50, 51, 52]
6
edges_of_v_in_P
[[(4, 3, 0), (4, 3, 1)], [(4, 3, 0), (4, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[47]
v is
(4, 3, 0)
i is:
1
list of agents on v
[48, 49, 50, 51]
v is
(4, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
23
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 3, 0)
truest
[58, 59, 60, 61, 62, 63]
6
edges_of_v_in_P
[[(5, 3, 0), (5, 3, 1)], [(5, 3, 0), (5, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[58]
v is
(5, 3, 0)
i is:
1
list of agents on v
[59, 60, 61, 62]
v is
(5, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
24
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 4, 0)
truest
[4, 5, 6, 7]
4
edges_of_v_in_P
[[(0, 4, 0), (0, 4, 1)], [(0, 4, 0), (0, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[4]
v is
(0, 4, 0)
i is:
1
list of agents on v
[5, 6]
v is
(0, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
25
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 4, 0)
truest
[15, 16, 17, 18]
4
edges_of_v_in_P
[[(1, 4, 0), (1, 4, 1)], [(1, 4, 0), (1, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[15]
v is
(1, 4, 0)
i is:
1
list of agents on v
[16, 17]
v is
(1, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
26
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 4, 0)
truest
[26, 27, 28, 29]
4
edges_of_v_in_P
[[(2, 4, 0), (2, 4, 1)], [(2, 4, 0), (2, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[26]
v is
(2, 4, 0)
i is:
1
list of agents on v
[27, 28]
v is
(2, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
27
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 4, 0)
truest
[37, 38, 39, 40]
4
edges_of_v_in_P
[[(3, 4, 0), (3, 4, 1)], [(3, 4, 0), (3, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[37]
v is
(3, 4, 0)
i is:
1
list of agents on v
[38, 39]
v is
(3, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
28
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 4, 0)
truest
[48, 49, 50, 51]
4
edges_of_v_in_P
[[(4, 4, 0), (4, 4, 1)], [(4, 4, 0), (4, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[48]
v is
(4, 4, 0)
i is:
1
list of agents on v
[49, 50]
v is
(4, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
29
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (5, 0, 1), (3, 2, 1), (5, 2, 1), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 4, 0)
truest
[59, 60, 61, 62]
4
edges_of_v_in_P
[[(5, 4, 0), (5, 4, 1)], [(5, 4, 0), (5, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[59]
v is
(5, 4, 0)
i is:
1
list of agents on v
[60, 61]
v is
(5, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
30
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 5, 0)
truest
[5, 6]
2
edges_of_v_in_P
[[(0, 5, 0), (0, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[5]
v is
(0, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
31
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 5, 0)
truest
[16, 17]
2
edges_of_v_in_P
[[(1, 5, 0), (1, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[16]
v is
(1, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
32
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 1): [16], (1, 5, 0): [17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 5, 0)
truest
[27, 28]
2
edges_of_v_in_P
[[(2, 5, 0), (2, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[27]
v is
(2, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
33
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 1), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (2, 5, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 1): [16], (1, 5, 0): [17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 1): [27], (2, 5, 0): [28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 5, 0)
truest
[38, 39]
2
edges_of_v_in_P
[[(3, 5, 0), (3, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[38]
v is
(3, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'black', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
34
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 1), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 1), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (2, 5, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (3, 5, 1), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 1): [16], (1, 5, 0): [17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 1): [27], (2, 5, 0): [28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 1): [38], (3, 5, 0): [39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 5, 0)
truest
[49, 50]
2
edges_of_v_in_P
[[(4, 5, 0), (4, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[49]
v is
(4, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'black', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'black', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
35
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 1), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 1), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 1), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (2, 5, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (3, 5, 1), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (4, 5, 1), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 1): [16], (1, 5, 0): [17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 1): [27], (2, 5, 0): [28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 1): [38], (3, 5, 0): [39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 1): [49], (4, 5, 0): [50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 5, 0)
truest
[60, 61]
2
edges_of_v_in_P
[[(5, 5, 0), (5, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[60]
v is
(5, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 1), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'black', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'black', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'black', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
36
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 1), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 1), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 1), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 1), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (2, 5, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (3, 5, 1), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (4, 5, 1), (1, 3, 1), (3, 1, 0), (1, 4, 0), (5, 5, 1), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 1), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
agents at the end of INITIAL SET
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 1), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
are we getting at the start of the brick?
did we pass t == b+1?
i in range is
6
moved
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 2, 2), 3: (0, 3, 2), 4: (0, 4, 2), 5: (0, 5, 2), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 2), 12: (1, 1, 2), 13: (1, 2, 2), 14: (1, 3, 2), 15: (1, 4, 2), 16: (1, 5, 2), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 2), 23: (2, 1, 2), 24: (2, 2, 2), 25: (2, 3, 2), 26: (2, 4, 2), 27: (2, 5, 2), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 2), 34: (3, 1, 2), 35: (3, 2, 2), 36: (3, 3, 2), 37: (3, 4, 2), 38: (3, 5, 2), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 2), 45: (4, 1, 2), 46: (4, 2, 2), 47: (4, 3, 2), 48: (4, 4, 2), 49: (4, 5, 2), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 2), 56: (5, 1, 2), 57: (5, 2, 2), 58: (5, 3, 2), 59: (5, 4, 2), 60: (5, 5, 2), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
moved
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 2, 3), 3: (0, 3, 3), 4: (0, 4, 3), 5: (0, 5, 3), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 3), 12: (1, 1, 3), 13: (1, 2, 3), 14: (1, 3, 3), 15: (1, 4, 3), 16: (1, 5, 3), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 3), 23: (2, 1, 3), 24: (2, 2, 3), 25: (2, 3, 3), 26: (2, 4, 3), 27: (2, 5, 3), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 3), 34: (3, 1, 3), 35: (3, 2, 3), 36: (3, 3, 3), 37: (3, 4, 3), 38: (3, 5, 3), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 3), 45: (4, 1, 3), 46: (4, 2, 3), 47: (4, 3, 3), 48: (4, 4, 3), 49: (4, 5, 3), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 3), 56: (5, 1, 3), 57: (5, 2, 3), 58: (5, 3, 3), 59: (5, 4, 3), 60: (5, 5, 3), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
moved
{0: (0, 0, 4), 1: (0, 1, 4), 2: (0, 2, 4), 3: (0, 3, 4), 4: (0, 4, 4), 5: (0, 5, 4), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 4), 12: (1, 1, 4), 13: (1, 2, 4), 14: (1, 3, 4), 15: (1, 4, 4), 16: (1, 5, 4), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 4), 23: (2, 1, 4), 24: (2, 2, 4), 25: (2, 3, 4), 26: (2, 4, 4), 27: (2, 5, 4), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 4), 34: (3, 1, 4), 35: (3, 2, 4), 36: (3, 3, 4), 37: (3, 4, 4), 38: (3, 5, 4), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 4), 45: (4, 1, 4), 46: (4, 2, 4), 47: (4, 3, 4), 48: (4, 4, 4), 49: (4, 5, 4), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 4), 56: (5, 1, 4), 57: (5, 2, 4), 58: (5, 3, 4), 59: (5, 4, 4), 60: (5, 5, 4), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
moved
{0: (0, 0, 5), 1: (0, 1, 5), 2: (0, 2, 5), 3: (0, 3, 5), 4: (0, 4, 5), 5: (0, 5, 5), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 5), 12: (1, 1, 5), 13: (1, 2, 5), 14: (1, 3, 5), 15: (1, 4, 5), 16: (1, 5, 5), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 5), 23: (2, 1, 5), 24: (2, 2, 5), 25: (2, 3, 5), 26: (2, 4, 5), 27: (2, 5, 5), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 5), 34: (3, 1, 5), 35: (3, 2, 5), 36: (3, 3, 5), 37: (3, 4, 5), 38: (3, 5, 5), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 5), 45: (4, 1, 5), 46: (4, 2, 5), 47: (4, 3, 5), 48: (4, 4, 5), 49: (4, 5, 5), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 5), 56: (5, 1, 5), 57: (5, 2, 5), 58: (5, 3, 5), 59: (5, 4, 5), 60: (5, 5, 5), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
72
no grey nodes remain
after init is 396
move counted is 540
move counter at starting position is 0
dimensions are the following: [6, 6, 6]
Graph with 216 nodes and 648 edges
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (0, 3, 4), (0, 3, 5), (0, 4, 0), (0, 4, 1), (0, 4, 2), (0, 4, 3), (0, 4, 4), (0, 4, 5), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 3), (0, 5, 4), (0, 5, 5), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 0), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 4, 5), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 3), (1, 5, 4), (1, 5, 5), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 0), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (2, 4, 5), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 3), (2, 5, 4), (2, 5, 5), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 0, 4), (3, 0, 5), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 1, 5), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 2, 5), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 0), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (3, 4, 5), (3, 5, 0), (3, 5, 1), (3, 5, 2), (3, 5, 3), (3, 5, 4), (3, 5, 5), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 2, 0), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 2, 5), (4, 3, 0), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 3, 5), (4, 4, 0), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4), (4, 4, 5), (4, 5, 0), (4, 5, 1), (4, 5, 2), (4, 5, 3), (4, 5, 4), (4, 5, 5), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 0), (5, 3, 1), (5, 3, 2), (5, 3, 3), (5, 3, 4), (5, 3, 5), (5, 4, 0), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 3), (5, 5, 4), (5, 5, 5)]
list of C nodes
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1), (2, 0, 0), (2, 0, 1), (2, 1, 0), (2, 1, 1), (3, 0, 0), (3, 0, 1), (3, 1, 0), (3, 1, 1), (4, 0, 0), (4, 0, 1), (4, 1, 0), (4, 1, 1), (5, 0, 0), (5, 0, 1), (5, 1, 0), (5, 1, 1)]
{(0, 0, 0): 'grey', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'grey', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
(x,y, z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y, z) is:
(0, 0, 1)
[(0, 0, 0), (0, 0, 1)]
(x,y, z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y, z) is:
(0, 1, 1)
[(0, 0, 0), (0, 1, 0), (0, 1, 1)]
(x,y, z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y, z) is:
(1, 0, 1)
[(0, 0, 0), (1, 0, 0), (1, 0, 1)]
(x,y, z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
(x,y, z) is:
(1, 1, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]
(x,y, z) is:
(2, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0)]
(x,y, z) is:
(2, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 1)]
(x,y, z) is:
(2, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)]
(x,y, z) is:
(2, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 1, 1)]
(x,y, z) is:
(3, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]
(x,y, z) is:
(3, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 1)]
(x,y, z) is:
(3, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)]
(x,y, z) is:
(3, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 1, 1)]
(x,y, z) is:
(4, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)]
(x,y, z) is:
(4, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1)]
(x,y, z) is:
(4, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)]
(x,y, z) is:
(4, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 1, 1)]
(x,y, z) is:
(5, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
(x,y, z) is:
(5, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 0, 1)]
(x,y, z) is:
(5, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)]
(x,y, z) is:
(5, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 1, 1)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (0, 1, 0), (0, 1, 1)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 0, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 1, 1)]]
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
24
edges_of_v_in_P
[[(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[1, 2, 20]
i is:
0
list of agents on v
[0]
v is
(0, 0, 0)
i is:
1
list of agents on v
[1, 2]
v is
(0, 0, 0)
i is:
2
list of agents on v
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
v is
(0, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (1, 0, 0), 8: (1, 0, 0), 9: (1, 0, 0), 10: (1, 0, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (1, 0, 0), 8: (1, 0, 0), 9: (1, 0, 0), 10: (1, 0, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 0): [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], (0, 0, 0): [23]}
v is:
(1, 0, 0)
truest
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
20
edges_of_v_in_P
[[(1, 0, 0), (1, 0, 1)], [(1, 0, 0), (1, 1, 0)], [(1, 0, 0), (2, 0, 0)]]
p is:
[1, 2, 16]
i is:
0
list of agents on v
[3]
v is
(1, 0, 0)
i is:
1
list of agents on v
[4, 5]
v is
(1, 0, 0)
i is:
2
list of agents on v
[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
v is
(1, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 0), 7: (2, 0, 0), 8: (2, 0, 0), 9: (2, 0, 0), 10: (2, 0, 0), 11: (2, 0, 0), 12: (2, 0, 0), 13: (2, 0, 0), 14: (2, 0, 0), 15: (2, 0, 0), 16: (2, 0, 0), 17: (2, 0, 0), 18: (2, 0, 0), 19: (2, 0, 0), 20: (2, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 0), 7: (2, 0, 0), 8: (2, 0, 0), 9: (2, 0, 0), 10: (2, 0, 0), 11: (2, 0, 0), 12: (2, 0, 0), 13: (2, 0, 0), 14: (2, 0, 0), 15: (2, 0, 0), 16: (2, 0, 0), 17: (2, 0, 0), 18: (2, 0, 0), 19: (2, 0, 0), 20: (2, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 0): [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(2, 0, 0)
truest
[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
16
edges_of_v_in_P
[[(2, 0, 0), (2, 0, 1)], [(2, 0, 0), (2, 1, 0)], [(2, 0, 0), (3, 0, 0)]]
p is:
[1, 2, 12]
i is:
0
list of agents on v
[6]
v is
(2, 0, 0)
i is:
1
list of agents on v
[7, 8]
v is
(2, 0, 0)
i is:
2
list of agents on v
[9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
v is
(2, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 0), 10: (3, 0, 0), 11: (3, 0, 0), 12: (3, 0, 0), 13: (3, 0, 0), 14: (3, 0, 0), 15: (3, 0, 0), 16: (3, 0, 0), 17: (3, 0, 0), 18: (3, 0, 0), 19: (3, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (2, 0, 1), (1, 0, 0), (2, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 0), 10: (3, 0, 0), 11: (3, 0, 0), 12: (3, 0, 0), 13: (3, 0, 0), 14: (3, 0, 0), 15: (3, 0, 0), 16: (3, 0, 0), 17: (3, 0, 0), 18: (3, 0, 0), 19: (3, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 0): [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(3, 0, 0)
truest
[9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
12
edges_of_v_in_P
[[(3, 0, 0), (3, 0, 1)], [(3, 0, 0), (3, 1, 0)], [(3, 0, 0), (4, 0, 0)]]
p is:
[1, 2, 8]
i is:
0
list of agents on v
[9]
v is
(3, 0, 0)
i is:
1
list of agents on v
[10, 11]
v is
(3, 0, 0)
i is:
2
list of agents on v
[12, 13, 14, 15, 16, 17, 18, 19]
v is
(3, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 0), 13: (4, 0, 0), 14: (4, 0, 0), 15: (4, 0, 0), 16: (4, 0, 0), 17: (4, 0, 0), 18: (4, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (2, 0, 1), (1, 0, 0), (2, 0, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 0), 13: (4, 0, 0), 14: (4, 0, 0), 15: (4, 0, 0), 16: (4, 0, 0), 17: (4, 0, 0), 18: (4, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 0): [12, 13, 14, 15, 16, 17, 18, 19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(4, 0, 0)
truest
[12, 13, 14, 15, 16, 17, 18, 19]
8
edges_of_v_in_P
[[(4, 0, 0), (4, 0, 1)], [(4, 0, 0), (4, 1, 0)], [(4, 0, 0), (5, 0, 0)]]
p is:
[1, 2, 4]
i is:
0
list of agents on v
[12]
v is
(4, 0, 0)
i is:
1
list of agents on v
[13, 14]
v is
(4, 0, 0)
i is:
2
list of agents on v
[15, 16, 17, 18]
v is
(4, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 0), 16: (5, 0, 0), 17: (5, 0, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (4, 0, 1), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (2, 0, 1), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 0), 16: (5, 0, 0), 17: (5, 0, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 0): [15, 16, 17, 18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(5, 0, 0)
truest
[15, 16, 17, 18]
4
edges_of_v_in_P
[[(5, 0, 0), (5, 0, 1)], [(5, 0, 0), (5, 1, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[15]
v is
(5, 0, 0)
i is:
1
list of agents on v
[16, 17]
v is
(5, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
6
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (4, 0, 1), (3, 0, 0), (3, 1, 0), (0, 0, 0), (5, 0, 1), (4, 0, 0), (2, 0, 1), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(0, 1, 0)
truest
[1, 2]
2
edges_of_v_in_P
[[(0, 1, 0), (0, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[1]
v is
(0, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
7
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(1, 1, 0)
truest
[4, 5]
2
edges_of_v_in_P
[[(1, 1, 0), (1, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[4]
v is
(1, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
8
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 1): [4], (1, 1, 0): [5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(2, 1, 0)
truest
[7, 8]
2
edges_of_v_in_P
[[(2, 1, 0), (2, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[7]
v is
(2, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
9
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (2, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 1): [4], (1, 1, 0): [5], (2, 0, 1): [6], (2, 1, 1): [7], (2, 1, 0): [8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(3, 1, 0)
truest
[10, 11]
2
edges_of_v_in_P
[[(3, 1, 0), (3, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[10]
v is
(3, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
10
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (3, 1, 1), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (2, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 1): [4], (1, 1, 0): [5], (2, 0, 1): [6], (2, 1, 1): [7], (2, 1, 0): [8], (3, 0, 1): [9], (3, 1, 1): [10], (3, 1, 0): [11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(4, 1, 0)
truest
[13, 14]
2
edges_of_v_in_P
[[(4, 1, 0), (4, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[13]
v is
(4, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
11
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (3, 1, 1), (0, 0, 0), (4, 1, 1), (1, 0, 0), (2, 0, 0), (0, 1, 1), (2, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 1): [4], (1, 1, 0): [5], (2, 0, 1): [6], (2, 1, 1): [7], (2, 1, 0): [8], (3, 0, 1): [9], (3, 1, 1): [10], (3, 1, 0): [11], (4, 0, 1): [12], (4, 1, 1): [13], (4, 1, 0): [14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(5, 1, 0)
truest
[16, 17]
2
edges_of_v_in_P
[[(5, 1, 0), (5, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[16]
v is
(5, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 1), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
12
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (3, 1, 1), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (0, 1, 1), (2, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 1), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
agents at the end of INITIAL SET
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 1), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
are we getting at the start of the brick?
range of the o is 2
o currently is 0
are we getting at the start of the brick?
did we pass t == b+1?
i in range is
6
moved
{0: (0, 0, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 0, 1), 4: (1, 2, 1), 5: (1, 2, 0), 6: (2, 0, 1), 7: (2, 2, 1), 8: (2, 2, 0), 9: (3, 0, 1), 10: (3, 2, 1), 11: (3, 2, 0), 12: (4, 0, 1), 13: (4, 2, 1), 14: (4, 2, 0), 15: (5, 0, 1), 16: (5, 2, 1), 17: (5, 2, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
moved
{0: (0, 0, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (1, 0, 1), 4: (1, 3, 1), 5: (1, 3, 0), 6: (2, 0, 1), 7: (2, 3, 1), 8: (2, 3, 0), 9: (3, 0, 1), 10: (3, 3, 1), 11: (3, 3, 0), 12: (4, 0, 1), 13: (4, 3, 1), 14: (4, 3, 0), 15: (5, 0, 1), 16: (5, 3, 1), 17: (5, 3, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
moved
{0: (0, 0, 1), 1: (0, 4, 1), 2: (0, 4, 0), 3: (1, 0, 1), 4: (1, 4, 1), 5: (1, 4, 0), 6: (2, 0, 1), 7: (2, 4, 1), 8: (2, 4, 0), 9: (3, 0, 1), 10: (3, 4, 1), 11: (3, 4, 0), 12: (4, 0, 1), 13: (4, 4, 1), 14: (4, 4, 0), 15: (5, 0, 1), 16: (5, 4, 1), 17: (5, 4, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
moved
{0: (0, 0, 1), 1: (0, 5, 1), 2: (0, 5, 0), 3: (1, 0, 1), 4: (1, 5, 1), 5: (1, 5, 0), 6: (2, 0, 1), 7: (2, 5, 1), 8: (2, 5, 0), 9: (3, 0, 1), 10: (3, 5, 1), 11: (3, 5, 0), 12: (4, 0, 1), 13: (4, 5, 1), 14: (4, 5, 0), 15: (5, 0, 1), 16: (5, 5, 1), 17: (5, 5, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
range of the o is 2
o currently is 1
are we getting at the start of the brick?
did we pass t == b+1?
i in range is
6
moved
{0: (0, 0, 2), 1: (0, 4, 2), 2: (0, 4, 5), 3: (1, 0, 2), 4: (1, 4, 2), 5: (1, 4, 5), 6: (2, 0, 2), 7: (2, 4, 2), 8: (2, 4, 5), 9: (3, 0, 2), 10: (3, 4, 2), 11: (3, 4, 5), 12: (4, 0, 2), 13: (4, 4, 2), 14: (4, 4, 5), 15: (5, 0, 2), 16: (5, 4, 2), 17: (5, 4, 5), 18: (5, 0, 5), 19: (4, 0, 5), 20: (3, 0, 5), 21: (2, 0, 5), 22: (1, 0, 5), 23: (0, 0, 5)}
moved
{0: (0, 0, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 0, 2), 4: (1, 3, 2), 5: (1, 3, 5), 6: (2, 0, 2), 7: (2, 3, 2), 8: (2, 3, 5), 9: (3, 0, 2), 10: (3, 3, 2), 11: (3, 3, 5), 12: (4, 0, 2), 13: (4, 3, 2), 14: (4, 3, 5), 15: (5, 0, 2), 16: (5, 3, 2), 17: (5, 3, 5), 18: (5, 0, 5), 19: (4, 0, 5), 20: (3, 0, 5), 21: (2, 0, 5), 22: (1, 0, 5), 23: (0, 0, 5)}
moved
{0: (0, 0, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (1, 0, 2), 4: (1, 2, 2), 5: (1, 2, 5), 6: (2, 0, 2), 7: (2, 2, 2), 8: (2, 2, 5), 9: (3, 0, 2), 10: (3, 2, 2), 11: (3, 2, 5), 12: (4, 0, 2), 13: (4, 2, 2), 14: (4, 2, 5), 15: (5, 0, 2), 16: (5, 2, 2), 17: (5, 2, 5), 18: (5, 0, 5), 19: (4, 0, 5), 20: (3, 0, 5), 21: (2, 0, 5), 22: (1, 0, 5), 23: (0, 0, 5)}
moved
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 5), 6: (2, 0, 2), 7: (2, 1, 2), 8: (2, 1, 5), 9: (3, 0, 2), 10: (3, 1, 2), 11: (3, 1, 5), 12: (4, 0, 2), 13: (4, 1, 2), 14: (4, 1, 5), 15: (5, 0, 2), 16: (5, 1, 2), 17: (5, 1, 5), 18: (5, 0, 5), 19: (4, 0, 5), 20: (3, 0, 5), 21: (2, 0, 5), 22: (1, 0, 5), 23: (0, 0, 5)}
range of the o is 2
o currently is 2
are we getting at the start of the brick?
did we pass t == b+1?
i in range is
6
moved
{0: (0, 0, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 0, 3), 4: (1, 2, 3), 5: (1, 2, 4), 6: (2, 0, 3), 7: (2, 2, 3), 8: (2, 2, 4), 9: (3, 0, 3), 10: (3, 2, 3), 11: (3, 2, 4), 12: (4, 0, 3), 13: (4, 2, 3), 14: (4, 2, 4), 15: (5, 0, 3), 16: (5, 2, 3), 17: (5, 2, 4), 18: (5, 0, 4), 19: (4, 0, 4), 20: (3, 0, 4), 21: (2, 0, 4), 22: (1, 0, 4), 23: (0, 0, 4)}
moved
{0: (0, 0, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (1, 0, 3), 4: (1, 3, 3), 5: (1, 3, 4), 6: (2, 0, 3), 7: (2, 3, 3), 8: (2, 3, 4), 9: (3, 0, 3), 10: (3, 3, 3), 11: (3, 3, 4), 12: (4, 0, 3), 13: (4, 3, 3), 14: (4, 3, 4), 15: (5, 0, 3), 16: (5, 3, 3), 17: (5, 3, 4), 18: (5, 0, 4), 19: (4, 0, 4), 20: (3, 0, 4), 21: (2, 0, 4), 22: (1, 0, 4), 23: (0, 0, 4)}
moved
{0: (0, 0, 3), 1: (0, 4, 3), 2: (0, 4, 4), 3: (1, 0, 3), 4: (1, 4, 3), 5: (1, 4, 4), 6: (2, 0, 3), 7: (2, 4, 3), 8: (2, 4, 4), 9: (3, 0, 3), 10: (3, 4, 3), 11: (3, 4, 4), 12: (4, 0, 3), 13: (4, 4, 3), 14: (4, 4, 4), 15: (5, 0, 3), 16: (5, 4, 3), 17: (5, 4, 4), 18: (5, 0, 4), 19: (4, 0, 4), 20: (3, 0, 4), 21: (2, 0, 4), 22: (1, 0, 4), 23: (0, 0, 4)}
moved
{0: (0, 0, 3), 1: (0, 5, 3), 2: (0, 5, 4), 3: (1, 0, 3), 4: (1, 5, 3), 5: (1, 5, 4), 6: (2, 0, 3), 7: (2, 5, 3), 8: (2, 5, 4), 9: (3, 0, 3), 10: (3, 5, 3), 11: (3, 5, 4), 12: (4, 0, 3), 13: (4, 5, 3), 14: (4, 5, 4), 15: (5, 0, 3), 16: (5, 5, 3), 17: (5, 5, 4), 18: (5, 0, 4), 19: (4, 0, 4), 20: (3, 0, 4), 21: (2, 0, 4), 22: (1, 0, 4), 23: (0, 0, 4)}
24
no grey nodes remain
after init is 84
move counted is 276
move counter at starting position is 0
dimensions are the following: [6, 6, 6]
Graph with 216 nodes and 648 edges
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (0, 3, 4), (0, 3, 5), (0, 4, 0), (0, 4, 1), (0, 4, 2), (0, 4, 3), (0, 4, 4), (0, 4, 5), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 3), (0, 5, 4), (0, 5, 5), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 0), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 4, 5), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 3), (1, 5, 4), (1, 5, 5), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 0), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (2, 4, 5), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 3), (2, 5, 4), (2, 5, 5), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 0, 4), (3, 0, 5), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 1, 5), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 2, 5), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 0), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (3, 4, 5), (3, 5, 0), (3, 5, 1), (3, 5, 2), (3, 5, 3), (3, 5, 4), (3, 5, 5), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 2, 0), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 2, 5), (4, 3, 0), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 3, 5), (4, 4, 0), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4), (4, 4, 5), (4, 5, 0), (4, 5, 1), (4, 5, 2), (4, 5, 3), (4, 5, 4), (4, 5, 5), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 0), (5, 3, 1), (5, 3, 2), (5, 3, 3), (5, 3, 4), (5, 3, 5), (5, 4, 0), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 3), (5, 5, 4), (5, 5, 5)]
list of C nodes
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]
{(0, 0, 0): 'grey', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'grey', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
(x,y, z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y, z) is:
(0, 0, 1)
[(0, 0, 0), (0, 0, 1)]
(x,y, z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y, z) is:
(0, 1, 1)
[(0, 0, 0), (0, 1, 0), (0, 1, 1)]
(x,y, z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y, z) is:
(1, 0, 1)
[(0, 0, 0), (1, 0, 0), (1, 0, 1)]
(x,y, z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
(x,y, z) is:
(1, 1, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (0, 1, 0), (0, 1, 1)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 0, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]]
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5, 6, 7]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7]
8
edges_of_v_in_P
[[(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[1, 2, 4]
i is:
0
list of agents on v
[0]
v is
(0, 0, 0)
i is:
1
list of agents on v
[1, 2]
v is
(0, 0, 0)
i is:
2
list of agents on v
[3, 4, 5, 6]
v is
(0, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 0): [3, 4, 5, 6], (0, 0, 0): [7]}
v is:
(1, 0, 0)
truest
[3, 4, 5, 6]
4
edges_of_v_in_P
[[(1, 0, 0), (1, 0, 1)], [(1, 0, 0), (1, 1, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[3]
v is
(1, 0, 0)
i is:
1
list of agents on v
[4, 5]
v is
(1, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (1, 0, 0): [6], (0, 0, 0): [7]}
v is:
(0, 1, 0)
truest
[1, 2]
2
edges_of_v_in_P
[[(0, 1, 0), (0, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[1]
v is
(0, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (0, 0, 1), (0, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (1, 0, 0): [6], (0, 0, 0): [7]}
v is:
(1, 1, 0)
truest
[4, 5]
2
edges_of_v_in_P
[[(1, 1, 0), (1, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[4]
v is
(1, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (0, 0, 1), (1, 1, 1), (0, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
agents at the end of INITIAL SET
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
ITERCUBE s == 6-m commencing
calling CUBE recursively for t-1
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (2, 0, 1), 4: (2, 1, 1), 5: (2, 1, 0), 6: (2, 0, 0), 7: (0, 0, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (3, 0, 1), 4: (3, 1, 1), 5: (3, 1, 0), 6: (3, 0, 0), 7: (0, 0, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (4, 0, 1), 4: (4, 1, 1), 5: (4, 1, 0), 6: (4, 0, 0), 7: (0, 0, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (5, 0, 1), 4: (5, 1, 1), 5: (5, 1, 0), 6: (5, 0, 0), 7: (0, 0, 0)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (5, 5, 1), 4: (5, 2, 1), 5: (5, 2, 0), 6: (5, 5, 0), 7: (0, 5, 0)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (4, 5, 1), 4: (4, 2, 1), 5: (4, 2, 0), 6: (4, 5, 0), 7: (0, 5, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (3, 5, 1), 4: (3, 2, 1), 5: (3, 2, 0), 6: (3, 5, 0), 7: (0, 5, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (2, 5, 1), 4: (2, 2, 1), 5: (2, 2, 0), 6: (2, 5, 0), 7: (0, 5, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 5, 1), 4: (1, 2, 1), 5: (1, 2, 0), 6: (1, 5, 0), 7: (0, 5, 0)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (1, 4, 1), 4: (1, 3, 1), 5: (1, 3, 0), 6: (1, 4, 0), 7: (0, 4, 0)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (2, 4, 1), 4: (2, 3, 1), 5: (2, 3, 0), 6: (2, 4, 0), 7: (0, 4, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (3, 4, 1), 4: (3, 3, 1), 5: (3, 3, 0), 6: (3, 4, 0), 7: (0, 4, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (4, 4, 1), 4: (4, 3, 1), 5: (4, 3, 0), 6: (4, 4, 0), 7: (0, 4, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (5, 4, 1), 4: (5, 3, 1), 5: (5, 3, 0), 6: (5, 4, 0), 7: (0, 4, 0)}
value of y is -1
we finshed
h is 0
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 5), 3: (5, 4, 1), 4: (5, 3, 1), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (5, 4, 2), 4: (5, 3, 2), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
calling CUBE recursively for t-1
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (4, 4, 2), 4: (4, 3, 2), 5: (4, 3, 5), 6: (4, 4, 5), 7: (0, 4, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (3, 4, 2), 4: (3, 3, 2), 5: (3, 3, 5), 6: (3, 4, 5), 7: (0, 4, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (2, 4, 2), 4: (2, 3, 2), 5: (2, 3, 5), 6: (2, 4, 5), 7: (0, 4, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 4, 2), 4: (1, 3, 2), 5: (1, 3, 5), 6: (1, 4, 5), 7: (0, 4, 5)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (1, 5, 2), 4: (1, 2, 2), 5: (1, 2, 5), 6: (1, 5, 5), 7: (0, 5, 5)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (2, 5, 2), 4: (2, 2, 2), 5: (2, 2, 5), 6: (2, 5, 5), 7: (0, 5, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (3, 5, 2), 4: (3, 2, 2), 5: (3, 2, 5), 6: (3, 5, 5), 7: (0, 5, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (4, 5, 2), 4: (4, 2, 2), 5: (4, 2, 5), 6: (4, 5, 5), 7: (0, 5, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (5, 5, 2), 4: (5, 2, 2), 5: (5, 2, 5), 6: (5, 5, 5), 7: (0, 5, 5)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (5, 0, 2), 4: (5, 1, 2), 5: (5, 1, 5), 6: (5, 0, 5), 7: (0, 0, 5)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (4, 0, 2), 4: (4, 1, 2), 5: (4, 1, 5), 6: (4, 0, 5), 7: (0, 0, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (3, 0, 2), 4: (3, 1, 2), 5: (3, 1, 5), 6: (3, 0, 5), 7: (0, 0, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (2, 0, 2), 4: (2, 1, 2), 5: (2, 1, 5), 6: (2, 0, 5), 7: (0, 0, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 5), 6: (1, 0, 5), 7: (0, 0, 5)}
value of y is 1
we finshed
h is 1
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 4), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (1, 0, 3), 4: (1, 1, 3), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
calling CUBE recursively for t-1
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (2, 0, 3), 4: (2, 1, 3), 5: (2, 1, 4), 6: (2, 0, 4), 7: (0, 0, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (3, 0, 3), 4: (3, 1, 3), 5: (3, 1, 4), 6: (3, 0, 4), 7: (0, 0, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (4, 0, 3), 4: (4, 1, 3), 5: (4, 1, 4), 6: (4, 0, 4), 7: (0, 0, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (5, 0, 3), 4: (5, 1, 3), 5: (5, 1, 4), 6: (5, 0, 4), 7: (0, 0, 4)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (5, 5, 3), 4: (5, 2, 3), 5: (5, 2, 4), 6: (5, 5, 4), 7: (0, 5, 4)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (4, 5, 3), 4: (4, 2, 3), 5: (4, 2, 4), 6: (4, 5, 4), 7: (0, 5, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (3, 5, 3), 4: (3, 2, 3), 5: (3, 2, 4), 6: (3, 5, 4), 7: (0, 5, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (2, 5, 3), 4: (2, 2, 3), 5: (2, 2, 4), 6: (2, 5, 4), 7: (0, 5, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 5, 3), 4: (1, 2, 3), 5: (1, 2, 4), 6: (1, 5, 4), 7: (0, 5, 4)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (1, 4, 3), 4: (1, 3, 3), 5: (1, 3, 4), 6: (1, 4, 4), 7: (0, 4, 4)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (2, 4, 3), 4: (2, 3, 3), 5: (2, 3, 4), 6: (2, 4, 4), 7: (0, 4, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (3, 4, 3), 4: (3, 3, 3), 5: (3, 3, 4), 6: (3, 4, 4), 7: (0, 4, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (4, 4, 3), 4: (4, 3, 3), 5: (4, 3, 4), 6: (4, 4, 4), 7: (0, 4, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (5, 4, 3), 4: (5, 3, 3), 5: (5, 3, 4), 6: (5, 4, 4), 7: (0, 4, 4)}
value of y is -1
we finshed
8
no grey nodes remain
after init is 12
move counted is 220
move counter at starting position is 0
dimensions are the following: [6, 6, 6]
Graph with 216 nodes and 648 edges
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (0, 3, 4), (0, 3, 5), (0, 4, 0), (0, 4, 1), (0, 4, 2), (0, 4, 3), (0, 4, 4), (0, 4, 5), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 3), (0, 5, 4), (0, 5, 5), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 0), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 4, 5), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 3), (1, 5, 4), (1, 5, 5), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 0), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (2, 4, 5), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 3), (2, 5, 4), (2, 5, 5), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 0, 4), (3, 0, 5), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 1, 5), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 2, 5), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 0), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (3, 4, 5), (3, 5, 0), (3, 5, 1), (3, 5, 2), (3, 5, 3), (3, 5, 4), (3, 5, 5), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 2, 0), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 2, 5), (4, 3, 0), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 3, 5), (4, 4, 0), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4), (4, 4, 5), (4, 5, 0), (4, 5, 1), (4, 5, 2), (4, 5, 3), (4, 5, 4), (4, 5, 5), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 0), (5, 3, 1), (5, 3, 2), (5, 3, 3), (5, 3, 4), (5, 3, 5), (5, 4, 0), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 3), (5, 5, 4), (5, 5, 5)]
list of C nodes
[(0, 0, 0), (0, 1, 0), (1, 0, 0), (1, 1, 0)]
{(0, 0, 0): 'grey', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'grey', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
(x,y, z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y, z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y, z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y, z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)]]
flipped_agents
{(0, 0, 0): [0, 1, 2, 3]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3]
4
edges_of_v_in_P
[[(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[0]
v is
(0, 0, 0)
i is:
1
list of agents on v
[1, 2]
v is
(0, 0, 0)
{0: (0, 1, 0), 1: (1, 0, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 1, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 1, 0)}
{0: (0, 1, 0), 1: (1, 0, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0], (1, 0, 0): [1, 2], (0, 0, 0): [3]}
v is:
(1, 0, 0)
truest
[1, 2]
2
edges_of_v_in_P
[[(1, 0, 0), (1, 1, 0)]]
p is:
[1]
i is:
0
list of agents on v
[1]
v is
(1, 0, 0)
{0: (0, 1, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 1, 0), (1, 1, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (1, 1, 0), (0, 1, 0)}
{0: (0, 1, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
agents at the end of INITIAL SET
{0: (0, 1, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
ITERCUBE else is commencing
ITERCUBE s == 6-m commencing
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 0), 1: (2, 1, 0), 2: (2, 0, 0), 3: (0, 0, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 0), 1: (3, 1, 0), 2: (3, 0, 0), 3: (0, 0, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 0), 1: (4, 1, 0), 2: (4, 0, 0), 3: (0, 0, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 0), 1: (5, 1, 0), 2: (5, 0, 0), 3: (0, 0, 0)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 2, 0), 1: (5, 2, 0), 2: (5, 5, 0), 3: (0, 5, 0)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 0), 1: (4, 2, 0), 2: (4, 5, 0), 3: (0, 5, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 0), 1: (3, 2, 0), 2: (3, 5, 0), 3: (0, 5, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 0), 1: (2, 2, 0), 2: (2, 5, 0), 3: (0, 5, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 0), 1: (1, 2, 0), 2: (1, 5, 0), 3: (0, 5, 0)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 3, 0), 1: (1, 3, 0), 2: (1, 4, 0), 3: (0, 4, 0)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 0), 1: (2, 3, 0), 2: (2, 4, 0), 3: (0, 4, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 0), 1: (3, 3, 0), 2: (3, 4, 0), 3: (0, 4, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 0), 1: (4, 3, 0), 2: (4, 4, 0), 3: (0, 4, 0)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 0), 1: (5, 3, 0), 2: (5, 4, 0), 3: (0, 4, 0)}
value of y is -1
we finshed
moving 1 in the 3th dimension
{0: (0, 3, 1), 1: (5, 3, 1), 2: (5, 4, 1), 3: (0, 4, 1)}
ITERCUBE s == 6-m commencing
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 1), 1: (4, 3, 1), 2: (4, 4, 1), 3: (0, 4, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 1), 1: (3, 3, 1), 2: (3, 4, 1), 3: (0, 4, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 1), 1: (2, 3, 1), 2: (2, 4, 1), 3: (0, 4, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 1), 1: (1, 3, 1), 2: (1, 4, 1), 3: (0, 4, 1)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 2, 1), 1: (1, 2, 1), 2: (1, 5, 1), 3: (0, 5, 1)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 1), 1: (2, 2, 1), 2: (2, 5, 1), 3: (0, 5, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 1), 1: (3, 2, 1), 2: (3, 5, 1), 3: (0, 5, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 1), 1: (4, 2, 1), 2: (4, 5, 1), 3: (0, 5, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 1), 1: (5, 2, 1), 2: (5, 5, 1), 3: (0, 5, 1)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 1, 1), 1: (5, 1, 1), 2: (5, 0, 1), 3: (0, 0, 1)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 1), 1: (4, 1, 1), 2: (4, 0, 1), 3: (0, 0, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 1), 1: (3, 1, 1), 2: (3, 0, 1), 3: (0, 0, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 1), 1: (2, 1, 1), 2: (2, 0, 1), 3: (0, 0, 1)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 1), 1: (1, 1, 1), 2: (1, 0, 1), 3: (0, 0, 1)}
value of y is 1
we finshed
moving 1 in the 3th dimension
{0: (0, 1, 2), 1: (1, 1, 2), 2: (1, 0, 2), 3: (0, 0, 2)}
ITERCUBE s == 6-m commencing
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 2), 1: (2, 1, 2), 2: (2, 0, 2), 3: (0, 0, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 2), 1: (3, 1, 2), 2: (3, 0, 2), 3: (0, 0, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 2), 1: (4, 1, 2), 2: (4, 0, 2), 3: (0, 0, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 2), 1: (5, 1, 2), 2: (5, 0, 2), 3: (0, 0, 2)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 2, 2), 1: (5, 2, 2), 2: (5, 5, 2), 3: (0, 5, 2)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 2), 1: (4, 2, 2), 2: (4, 5, 2), 3: (0, 5, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 2), 1: (3, 2, 2), 2: (3, 5, 2), 3: (0, 5, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 2), 1: (2, 2, 2), 2: (2, 5, 2), 3: (0, 5, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 2), 1: (1, 2, 2), 2: (1, 5, 2), 3: (0, 5, 2)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 3, 2), 1: (1, 3, 2), 2: (1, 4, 2), 3: (0, 4, 2)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 2), 1: (2, 3, 2), 2: (2, 4, 2), 3: (0, 4, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 2), 1: (3, 3, 2), 2: (3, 4, 2), 3: (0, 4, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 2), 1: (4, 3, 2), 2: (4, 4, 2), 3: (0, 4, 2)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 2), 1: (5, 3, 2), 2: (5, 4, 2), 3: (0, 4, 2)}
value of y is -1
we finshed
moving 1 in the 3th dimension
{0: (0, 3, 3), 1: (5, 3, 3), 2: (5, 4, 3), 3: (0, 4, 3)}
ITERCUBE s == 6-m commencing
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 3), 1: (4, 3, 3), 2: (4, 4, 3), 3: (0, 4, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 3), 1: (3, 3, 3), 2: (3, 4, 3), 3: (0, 4, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 3), 1: (2, 3, 3), 2: (2, 4, 3), 3: (0, 4, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 3), 1: (1, 3, 3), 2: (1, 4, 3), 3: (0, 4, 3)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 2, 3), 1: (1, 2, 3), 2: (1, 5, 3), 3: (0, 5, 3)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 3), 1: (2, 2, 3), 2: (2, 5, 3), 3: (0, 5, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 3), 1: (3, 2, 3), 2: (3, 5, 3), 3: (0, 5, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 3), 1: (4, 2, 3), 2: (4, 5, 3), 3: (0, 5, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 3), 1: (5, 2, 3), 2: (5, 5, 3), 3: (0, 5, 3)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 1, 3), 1: (5, 1, 3), 2: (5, 0, 3), 3: (0, 0, 3)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 3), 1: (4, 1, 3), 2: (4, 0, 3), 3: (0, 0, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 3), 1: (3, 1, 3), 2: (3, 0, 3), 3: (0, 0, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 3), 1: (2, 1, 3), 2: (2, 0, 3), 3: (0, 0, 3)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 3), 1: (1, 1, 3), 2: (1, 0, 3), 3: (0, 0, 3)}
value of y is 1
we finshed
moving 1 in the 3th dimension
{0: (0, 1, 4), 1: (1, 1, 4), 2: (1, 0, 4), 3: (0, 0, 4)}
ITERCUBE s == 6-m commencing
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 4), 1: (2, 1, 4), 2: (2, 0, 4), 3: (0, 0, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 4), 1: (3, 1, 4), 2: (3, 0, 4), 3: (0, 0, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 4), 1: (4, 1, 4), 2: (4, 0, 4), 3: (0, 0, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 1, 4), 1: (5, 1, 4), 2: (5, 0, 4), 3: (0, 0, 4)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 2, 4), 1: (5, 2, 4), 2: (5, 5, 4), 3: (0, 5, 4)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 4), 1: (4, 2, 4), 2: (4, 5, 4), 3: (0, 5, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 4), 1: (3, 2, 4), 2: (3, 5, 4), 3: (0, 5, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 4), 1: (2, 2, 4), 2: (2, 5, 4), 3: (0, 5, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 2, 4), 1: (1, 2, 4), 2: (1, 5, 4), 3: (0, 5, 4)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 3, 4), 1: (1, 3, 4), 2: (1, 4, 4), 3: (0, 4, 4)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 4), 1: (2, 3, 4), 2: (2, 4, 4), 3: (0, 4, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 4), 1: (3, 3, 4), 2: (3, 4, 4), 3: (0, 4, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 4), 1: (4, 3, 4), 2: (4, 4, 4), 3: (0, 4, 4)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 3, 4), 1: (5, 3, 4), 2: (5, 4, 4), 3: (0, 4, 4)}
value of y is -1
we finshed
moving 1 in the 3th dimension
{0: (0, 3, 5), 1: (5, 3, 5), 2: (5, 4, 5), 3: (0, 4, 5)}
ITERCUBE s == 6-m commencing
cube is starting
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 5), 1: (4, 3, 5), 2: (4, 4, 5), 3: (0, 4, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 5), 1: (3, 3, 5), 2: (3, 4, 5), 3: (0, 4, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 5), 1: (2, 3, 5), 2: (2, 4, 5), 3: (0, 4, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 3, 5), 1: (1, 3, 5), 2: (1, 4, 5), 3: (0, 4, 5)}
value of y is 1
if happened (moving along second dimension)
{0: (0, 2, 5), 1: (1, 2, 5), 2: (1, 5, 5), 3: (0, 5, 5)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 5), 1: (2, 2, 5), 2: (2, 5, 5), 3: (0, 5, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 5), 1: (3, 2, 5), 2: (3, 5, 5), 3: (0, 5, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 5), 1: (4, 2, 5), 2: (4, 5, 5), 3: (0, 5, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
{0: (0, 2, 5), 1: (5, 2, 5), 2: (5, 5, 5), 3: (0, 5, 5)}
value of y is -1
if happened (moving along second dimension)
{0: (0, 1, 5), 1: (5, 1, 5), 2: (5, 0, 5), 3: (0, 0, 5)}
we finshed
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 5), 1: (4, 1, 5), 2: (4, 0, 5), 3: (0, 0, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 5), 1: (3, 1, 5), 2: (3, 0, 5), 3: (0, 0, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 5), 1: (2, 1, 5), 2: (2, 0, 5), 3: (0, 0, 5)}
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
{0: (0, 1, 5), 1: (1, 1, 5), 2: (1, 0, 5), 3: (0, 0, 5)}
value of y is 1
we finshed
moving 1 in the 3th dimension
4
no grey nodes remain
after init is 4
move counted is 216
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
0 0
0 1
0 2
0 3
0 4
1 0
1 1
1 2
1 3
1 4
2 0
2 1
2 2
2 3
2 4
3 0
3 1
3 2
3 3
3 4
4 0
4 1
4 2
4 3
4 4
5 0
5 1
5 2
5 3
5 4
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
{(0, 0): 'grey', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
[(0, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0), (2, 0)]
[(0, 0), (1, 0), (2, 0), (3, 0)]
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
P is :
[[(0, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0), (2, 0)], [(0, 0), (1, 0), (2, 0), (3, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]]
{0: (0, 0), 1: (0, 0), 2: (0, 0), 3: (0, 0), 4: (0, 0), 5: (0, 0)}
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
0
36
6
theoretical_nr_moves is 52.0
18.0
agent_which is 4
agent_when is 1000000
6
0
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0)]
2
(0, 0)
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0), (2, 0)]
3
(0, 0)
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0)]
4
(0, 0)
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
5
(0, 0)
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
(i.index(j) is
0
i[i.index(j)] is
(0, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(0, 0)
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
j is:
(5, 0)
len(j) is:
2
[[(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)], [(0, 0), (1, 0)]]
5
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
[(0, 0), (1, 0)]
p is:
[5, 5, 5, 5, 5]
{0: (0, 0), 1: (0, 0), 2: (0, 0), 3: (0, 0), 4: (0, 0), 5: (0, 0)}
[0, 1, 2, 3, 4, 5]
(0, 0)
[0, 2, 3, 4, 5]
(0, 0)
[0, 3, 4, 5]
(0, 0)
[0, 4, 5]
(0, 0)
[0, 5]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
[0]
(0, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0], (1, 0): [1, 2, 3, 4, 5]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
(i.index(j) is
1
i[i.index(j)] is
(1, 0)
i indices
[(0, 0), (1, 0), (2, 0)]
3
(1, 0)
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
(i.index(j) is
1
i[i.index(j)] is
(1, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0)]
4
(1, 0)
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
(i.index(j) is
1
i[i.index(j)] is
(1, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
5
(1, 0)
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
(i.index(j) is
1
i[i.index(j)] is
(1, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(1, 0)
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
j is:
(5, 0)
len(j) is:
2
[[(1, 0), (2, 0)], [(1, 0), (2, 0)], [(1, 0), (2, 0)], [(1, 0), (2, 0)]]
4
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
[(1, 0), (2, 0)]
p is:
[4, 4, 4, 4]
{0: (0, 0), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0)}
[1, 2, 3, 4, 5]
(1, 0)
[2, 3, 4, 5]
(1, 0)
[3, 4, 5]
(1, 0)
[4, 5]
(1, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
[5]
(1, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0, 0], (1, 0): [1, 2, 3, 4, 5, 5], (2, 0): [1, 2, 3, 4]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
(i.index(j) is
2
i[i.index(j)] is
(2, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0)]
4
(2, 0)
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
(i.index(j) is
2
i[i.index(j)] is
(2, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
5
(2, 0)
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
(i.index(j) is
2
i[i.index(j)] is
(2, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(2, 0)
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
j is:
(5, 0)
len(j) is:
2
[[(2, 0), (3, 0)], [(2, 0), (3, 0)], [(2, 0), (3, 0)]]
3
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
[(2, 0), (3, 0)]
p is:
[3, 3, 3]
{0: (0, 0), 1: (2, 0), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (1, 0)}
[1, 2, 3, 4]
(2, 0)
[2, 3, 4]
(2, 0)
[3, 4]
(2, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (3, 0), 2: (3, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[4]
(2, 0)
[4]
(2, 0)
[4]
(2, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (3, 0), 2: (3, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[4]
(2, 0)
[4]
(2, 0)
[4]
(2, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (3, 0), 2: (3, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0, 0, 0], (1, 0): [1, 2, 3, 4, 5, 5, 5], (2, 0): [1, 2, 3, 4, 4], (3, 0): [1, 2, 3]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
(i.index(j) is
3
i[i.index(j)] is
(3, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
5
(3, 0)
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
(i.index(j) is
3
i[i.index(j)] is
(3, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(3, 0)
j is:
(4, 0)
len(j) is:
2
j is:
(5, 0)
len(j) is:
2
[[(3, 0), (4, 0)], [(3, 0), (4, 0)]]
2
[(3, 0), (4, 0)]
[(3, 0), (4, 0)]
[(3, 0), (4, 0)]
[(3, 0), (4, 0)]
p is:
[2, 2]
{0: (0, 0), 1: (3, 0), 2: (3, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[1, 2, 3]
(3, 0)
[2, 3]
(3, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (4, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[3]
(3, 0)
[3]
(3, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (4, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0, 0, 0, 0], (1, 0): [1, 2, 3, 4, 5, 5, 5, 5], (2, 0): [1, 2, 3, 4, 4, 4], (3, 0): [1, 2, 3, 3], (4, 0): [1, 2]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
(i.index(j) is
4
i[i.index(j)] is
(4, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(4, 0)
j is:
(5, 0)
len(j) is:
2
[[(4, 0), (5, 0)]]
1
[(4, 0), (5, 0)]
p is:
[1]
{0: (0, 0), 1: (4, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[1, 2]
(4, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'black', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (5, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0], (1, 0): [1, 2, 3, 4, 5, 5, 5, 5, 5], (2, 0): [1, 2, 3, 4, 4, 4, 4], (3, 0): [1, 2, 3, 3, 3], (4, 0): [1, 2, 2], (5, 0): [1]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0)]
len(i) is: 
2
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0)]
len(i) is: 
3
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0)]
len(i) is: 
4
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
len(i) is: 
5
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
i is:
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
len(i) is: 
6
j is:
(0, 0)
len(j) is:
2
j is:
(1, 0)
len(j) is:
2
j is:
(2, 0)
len(j) is:
2
j is:
(3, 0)
len(j) is:
2
j is:
(4, 0)
len(j) is:
2
(i.index(j) is
4
i[i.index(j)] is
(4, 0)
i indices
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
6
(4, 0)
j is:
(5, 0)
len(j) is:
2
[[(4, 0), (5, 0)]]
1
[(4, 0), (5, 0)]
p is:
[1]
{0: (0, 0), 1: (5, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
[2]
(4, 0)
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'black', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 0), 1: (5, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
iteration is over
{0: (0, 0), 1: (5, 0), 2: (4, 0), 3: (3, 0), 4: (2, 0), 5: (1, 0)}
{0: (0, 1), 1: (5, 1), 2: (4, 1), 3: (3, 1), 4: (2, 1), 5: (1, 1)}
{(0, 0): 'white', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'white', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'white', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'white', (3, 1): 'black', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'white', (4, 1): 'black', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'white', (5, 1): 'black', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 2), 1: (5, 2), 2: (4, 2), 3: (3, 2), 4: (2, 2), 5: (1, 2)}
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'black', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'white', (1, 1): 'white', (1, 2): 'black', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'white', (2, 1): 'white', (2, 2): 'black', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'white', (3, 1): 'white', (3, 2): 'black', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'white', (4, 1): 'white', (4, 2): 'black', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'white', (5, 1): 'white', (5, 2): 'black', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 3), 1: (5, 3), 2: (4, 3), 3: (3, 3), 4: (2, 3), 5: (1, 3)}
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'black', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'black', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'black', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'black', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'black', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'white', (5, 1): 'white', (5, 2): 'white', (5, 3): 'black', (5, 4): 'grey', (5, 5): 'grey'}
{0: (0, 4), 1: (5, 4), 2: (4, 4), 3: (3, 4), 4: (2, 4), 5: (1, 4)}
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'black', (0, 5): 'grey', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'black', (1, 5): 'grey', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'black', (2, 5): 'grey', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'black', (3, 5): 'grey', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'black', (4, 5): 'grey', (5, 0): 'white', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'black', (5, 5): 'grey'}
{0: (0, 5), 1: (5, 5), 2: (4, 5), 3: (3, 5), 4: (2, 5), 5: (1, 5)}
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'black', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'black', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'black', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'black', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'black', (5, 0): 'white', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'black'}
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'black', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'black', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'black', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'black', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'black', (5, 0): 'white', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'black'}
6
no grey nodes remain
after_init is 15
move_counter is 49
spare agent is(0, 4)
18.0
52.0
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
[(0, 0)]
{(0, 0): 'grey', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
[(0, 0)]
P is :
[[(0, 0)]]
{0: (0, 0)}
{(0, 0): 'black', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
theoretical_nr_moves is 69
0
agent_which is 0
agent_when is 1000000
1
0
flipped_agents
{(0, 0): [0]}
i is:
[(0, 0)]
len(i) is: 
1
j is:
(0, 0)
len(j) is:
2
[]
0
p is:
[]
{0: (0, 0)}
iteration is over
0
canonical_path
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 5), (1, 4), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 5), (3, 4), (3, 3), (3, 2), (3, 1), (3, 0), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 5), (5, 4), (5, 3), (5, 2), (5, 1), (5, 0)]
36
(0, 1)
{(0, 0): 'white', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(0, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'black', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(0, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'black', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(0, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'black', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(0, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'black', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'black', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'black', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'black', (1, 4): 'white', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'black', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'grey', (1, 1): 'black', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(1, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'black', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'black', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'black', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'black', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(2, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'black', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'black', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'black', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'black', (3, 4): 'white', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'black', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'grey', (3, 1): 'black', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(3, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'black', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'black', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'black', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'black', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'black', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(4, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'black', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(5, 5)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'black'}
(5, 4)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'black', (5, 5): 'white'}
(5, 3)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'black', (5, 4): 'white', (5, 5): 'white'}
(5, 2)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'black', (5, 3): 'white', (5, 4): 'white', (5, 5): 'white'}
(5, 1)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'grey', (5, 1): 'black', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'white'}
(5, 0)
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'black', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'white'}
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
{(0, 0): 'white', (0, 1): 'white', (0, 2): 'white', (0, 3): 'white', (0, 4): 'white', (0, 5): 'white', (1, 0): 'white', (1, 1): 'white', (1, 2): 'white', (1, 3): 'white', (1, 4): 'white', (1, 5): 'white', (2, 0): 'white', (2, 1): 'white', (2, 2): 'white', (2, 3): 'white', (2, 4): 'white', (2, 5): 'white', (3, 0): 'white', (3, 1): 'white', (3, 2): 'white', (3, 3): 'white', (3, 4): 'white', (3, 5): 'white', (4, 0): 'white', (4, 1): 'white', (4, 2): 'white', (4, 3): 'white', (4, 4): 'white', (4, 5): 'white', (5, 0): 'black', (5, 1): 'white', (5, 2): 'white', (5, 3): 'white', (5, 4): 'white', (5, 5): 'white'}
1
no grey nodes remain
after_init is 0
move_counter is 69
spare agent is(5, 1)
0
69
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)]
(x,y,z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y,z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y,z) is:
(0, 2, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0)]
(x,y,z) is:
(0, 3, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0)]
(x,y,z) is:
(0, 4, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)]
(x,y,z) is:
(0, 5, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0)]
(x,y,z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y,z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
(x,y,z) is:
(1, 2, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0)]
(x,y,z) is:
(1, 3, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0)]
(x,y,z) is:
(1, 4, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0)]
(x,y,z) is:
(1, 5, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0)]
(x,y,z) is:
(2, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0)]
(x,y,z) is:
(2, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)]
(x,y,z) is:
(2, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0)]
(x,y,z) is:
(2, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0)]
(x,y,z) is:
(2, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0)]
(x,y,z) is:
(2, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0)]
(x,y,z) is:
(3, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]
(x,y,z) is:
(3, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)]
(x,y,z) is:
(3, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0)]
(x,y,z) is:
(3, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)]
(x,y,z) is:
(3, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0)]
(x,y,z) is:
(3, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0)]
(x,y,z) is:
(4, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)]
(x,y,z) is:
(4, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)]
(x,y,z) is:
(4, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0)]
(x,y,z) is:
(4, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0)]
(x,y,z) is:
(4, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)]
(x,y,z) is:
(4, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0)]
(x,y,z) is:
(5, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
(x,y,z) is:
(5, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)]
(x,y,z) is:
(5, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0)]
(x,y,z) is:
(5, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0)]
(x,y,z) is:
(5, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0)]
(x,y,z) is:
(5, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)]]
0
216
6
theoretical_nr_moves is 400
216
agent_which is 0
agent_when is 1000000
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
36
edges_of_v_in_P
[[(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[5, 30]
i is:
0
list of agents on v
[0, 1, 2, 3, 4]
v is
(0, 0, 0)
i is:
1
list of agents on v
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
v is
(0, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (1, 0, 0), 8: (1, 0, 0), 9: (1, 0, 0), 10: (1, 0, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (1, 0, 0), 24: (1, 0, 0), 25: (1, 0, 0), 26: (1, 0, 0), 27: (1, 0, 0), 28: (1, 0, 0), 29: (1, 0, 0), 30: (1, 0, 0), 31: (1, 0, 0), 32: (1, 0, 0), 33: (1, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 1, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (1, 0, 0), 8: (1, 0, 0), 9: (1, 0, 0), 10: (1, 0, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (1, 0, 0), 24: (1, 0, 0), 25: (1, 0, 0), 26: (1, 0, 0), 27: (1, 0, 0), 28: (1, 0, 0), 29: (1, 0, 0), 30: (1, 0, 0), 31: (1, 0, 0), 32: (1, 0, 0), 33: (1, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 0, 0): [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], (0, 0, 0): [35]}
v is:
(1, 0, 0)
truest
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
30
edges_of_v_in_P
[[(1, 0, 0), (1, 1, 0)], [(1, 0, 0), (2, 0, 0)]]
p is:
[5, 24]
i is:
0
list of agents on v
[5, 6, 7, 8, 9]
v is
(1, 0, 0)
i is:
1
list of agents on v
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
v is
(1, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 0, 0), 11: (2, 0, 0), 12: (2, 0, 0), 13: (2, 0, 0), 14: (2, 0, 0), 15: (2, 0, 0), 16: (2, 0, 0), 17: (2, 0, 0), 18: (2, 0, 0), 19: (2, 0, 0), 20: (2, 0, 0), 21: (2, 0, 0), 22: (2, 0, 0), 23: (2, 0, 0), 24: (2, 0, 0), 25: (2, 0, 0), 26: (2, 0, 0), 27: (2, 0, 0), 28: (2, 0, 0), 29: (2, 0, 0), 30: (2, 0, 0), 31: (2, 0, 0), 32: (2, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 0, 0), 11: (2, 0, 0), 12: (2, 0, 0), 13: (2, 0, 0), 14: (2, 0, 0), 15: (2, 0, 0), 16: (2, 0, 0), 17: (2, 0, 0), 18: (2, 0, 0), 19: (2, 0, 0), 20: (2, 0, 0), 21: (2, 0, 0), 22: (2, 0, 0), 23: (2, 0, 0), 24: (2, 0, 0), 25: (2, 0, 0), 26: (2, 0, 0), 27: (2, 0, 0), 28: (2, 0, 0), 29: (2, 0, 0), 30: (2, 0, 0), 31: (2, 0, 0), 32: (2, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 0, 0): [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 0, 0)
truest
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
24
edges_of_v_in_P
[[(2, 0, 0), (2, 1, 0)], [(2, 0, 0), (3, 0, 0)]]
p is:
[5, 18]
i is:
0
list of agents on v
[10, 11, 12, 13, 14]
v is
(2, 0, 0)
i is:
1
list of agents on v
[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
v is
(2, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 0, 0), 16: (3, 0, 0), 17: (3, 0, 0), 18: (3, 0, 0), 19: (3, 0, 0), 20: (3, 0, 0), 21: (3, 0, 0), 22: (3, 0, 0), 23: (3, 0, 0), 24: (3, 0, 0), 25: (3, 0, 0), 26: (3, 0, 0), 27: (3, 0, 0), 28: (3, 0, 0), 29: (3, 0, 0), 30: (3, 0, 0), 31: (3, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 0, 0), 16: (3, 0, 0), 17: (3, 0, 0), 18: (3, 0, 0), 19: (3, 0, 0), 20: (3, 0, 0), 21: (3, 0, 0), 22: (3, 0, 0), 23: (3, 0, 0), 24: (3, 0, 0), 25: (3, 0, 0), 26: (3, 0, 0), 27: (3, 0, 0), 28: (3, 0, 0), 29: (3, 0, 0), 30: (3, 0, 0), 31: (3, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 0, 0): [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 0, 0)
truest
[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
18
edges_of_v_in_P
[[(3, 0, 0), (3, 1, 0)], [(3, 0, 0), (4, 0, 0)]]
p is:
[5, 12]
i is:
0
list of agents on v
[15, 16, 17, 18, 19]
v is
(3, 0, 0)
i is:
1
list of agents on v
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
v is
(3, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 0, 0), 21: (4, 0, 0), 22: (4, 0, 0), 23: (4, 0, 0), 24: (4, 0, 0), 25: (4, 0, 0), 26: (4, 0, 0), 27: (4, 0, 0), 28: (4, 0, 0), 29: (4, 0, 0), 30: (4, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 0, 0), 21: (4, 0, 0), 22: (4, 0, 0), 23: (4, 0, 0), 24: (4, 0, 0), 25: (4, 0, 0), 26: (4, 0, 0), 27: (4, 0, 0), 28: (4, 0, 0), 29: (4, 0, 0), 30: (4, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 0, 0): [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 0, 0)
truest
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
12
edges_of_v_in_P
[[(4, 0, 0), (4, 1, 0)], [(4, 0, 0), (5, 0, 0)]]
p is:
[5, 6]
i is:
0
list of agents on v
[20, 21, 22, 23, 24]
v is
(4, 0, 0)
i is:
1
list of agents on v
[25, 26, 27, 28, 29, 30]
v is
(4, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 0, 0), 26: (5, 0, 0), 27: (5, 0, 0), 28: (5, 0, 0), 29: (5, 0, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 0, 0), 26: (5, 0, 0), 27: (5, 0, 0), 28: (5, 0, 0), 29: (5, 0, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 0, 0): [25, 26, 27, 28, 29, 30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 0, 0)
truest
[25, 26, 27, 28, 29, 30]
6
edges_of_v_in_P
[[(5, 0, 0), (5, 1, 0)]]
p is:
[5]
i is:
0
list of agents on v
[25, 26, 27, 28, 29]
v is
(5, 0, 0)
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
6
values
[(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0)}
{0: (0, 1, 0), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0, 1, 2, 3, 4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(0, 1, 0)
truest
[0, 1, 2, 3, 4]
5
edges_of_v_in_P
[[(0, 1, 0), (0, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[0, 1, 2, 3]
v is
(0, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
7
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 1, 0), 6: (1, 1, 0), 7: (1, 1, 0), 8: (1, 1, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 1, 0): [5, 6, 7, 8, 9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(1, 1, 0)
truest
[5, 6, 7, 8, 9]
5
edges_of_v_in_P
[[(1, 1, 0), (1, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[5, 6, 7, 8]
v is
(1, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
8
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 1, 0), 11: (2, 1, 0), 12: (2, 1, 0), 13: (2, 1, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 1, 0): [10, 11, 12, 13, 14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 1, 0)
truest
[10, 11, 12, 13, 14]
5
edges_of_v_in_P
[[(2, 1, 0), (2, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[10, 11, 12, 13]
v is
(2, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
9
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (2, 2, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 1, 0), 16: (3, 1, 0), 17: (3, 1, 0), 18: (3, 1, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 1, 0): [15, 16, 17, 18, 19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 1, 0)
truest
[15, 16, 17, 18, 19]
5
edges_of_v_in_P
[[(3, 1, 0), (3, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[15, 16, 17, 18]
v is
(3, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
10
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (2, 2, 0), (3, 2, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 1, 0), 21: (4, 1, 0), 22: (4, 1, 0), 23: (4, 1, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 1, 0): [20, 21, 22, 23, 24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 1, 0)
truest
[20, 21, 22, 23, 24]
5
edges_of_v_in_P
[[(4, 1, 0), (4, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[20, 21, 22, 23]
v is
(4, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
11
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (4, 2, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (2, 2, 0), (3, 2, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 1, 0), 26: (5, 1, 0), 27: (5, 1, 0), 28: (5, 1, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 1, 0): [25, 26, 27, 28, 29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 1, 0)
truest
[25, 26, 27, 28, 29]
5
edges_of_v_in_P
[[(5, 1, 0), (5, 2, 0)]]
p is:
[4]
i is:
0
list of agents on v
[25, 26, 27, 28]
v is
(5, 1, 0)
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
12
values
[(0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 1, 0), (0, 1, 0), (1, 2, 0), (0, 2, 0), (2, 1, 0), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (4, 1, 0), (4, 2, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (5, 2, 0), (2, 2, 0), (3, 2, 0)}
{0: (0, 2, 0), 1: (0, 2, 0), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 2, 0): [0, 1, 2, 3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(0, 2, 0)
truest
[0, 1, 2, 3]
4
edges_of_v_in_P
[[(0, 2, 0), (0, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[0, 1, 2]
v is
(0, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
13
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 2, 0), 6: (1, 2, 0), 7: (1, 2, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 2, 0): [5, 6, 7, 8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(1, 2, 0)
truest
[5, 6, 7, 8]
4
edges_of_v_in_P
[[(1, 2, 0), (1, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[5, 6, 7]
v is
(1, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
14
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 2, 0), 11: (2, 2, 0), 12: (2, 2, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 2, 0): [10, 11, 12, 13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 2, 0)
truest
[10, 11, 12, 13]
4
edges_of_v_in_P
[[(2, 2, 0), (2, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[10, 11, 12]
v is
(2, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
15
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 2, 0), 16: (3, 2, 0), 17: (3, 2, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 2, 0): [15, 16, 17, 18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 2, 0)
truest
[15, 16, 17, 18]
4
edges_of_v_in_P
[[(3, 2, 0), (3, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[15, 16, 17]
v is
(3, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
16
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 2, 0), 21: (4, 2, 0), 22: (4, 2, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 2, 0): [20, 21, 22, 23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 2, 0)
truest
[20, 21, 22, 23]
4
edges_of_v_in_P
[[(4, 2, 0), (4, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[20, 21, 22]
v is
(4, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
17
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 2, 0), 26: (5, 2, 0), 27: (5, 2, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 2, 0): [25, 26, 27, 28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 2, 0)
truest
[25, 26, 27, 28]
4
edges_of_v_in_P
[[(5, 2, 0), (5, 3, 0)]]
p is:
[3]
i is:
0
list of agents on v
[25, 26, 27]
v is
(5, 2, 0)
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
18
values
[(0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 3, 0), 1: (0, 3, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 3, 0): [0, 1, 2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(0, 3, 0)
truest
[0, 1, 2]
3
edges_of_v_in_P
[[(0, 3, 0), (0, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[0, 1]
v is
(0, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
19
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 3, 0), 6: (1, 3, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 3, 0): [5, 6, 7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(1, 3, 0)
truest
[5, 6, 7]
3
edges_of_v_in_P
[[(1, 3, 0), (1, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[5, 6]
v is
(1, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
20
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 3, 0), 11: (2, 3, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 3, 0): [10, 11, 12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 3, 0)
truest
[10, 11, 12]
3
edges_of_v_in_P
[[(2, 3, 0), (2, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[10, 11]
v is
(2, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
21
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 3, 0), 16: (3, 3, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 3, 0): [15, 16, 17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 3, 0)
truest
[15, 16, 17]
3
edges_of_v_in_P
[[(3, 3, 0), (3, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[15, 16]
v is
(3, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
22
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 3, 0), 21: (4, 3, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 3, 0): [20, 21, 22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 3, 0)
truest
[20, 21, 22]
3
edges_of_v_in_P
[[(4, 3, 0), (4, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[20, 21]
v is
(4, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
23
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 3, 0), 26: (5, 3, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 3, 0): [25, 26, 27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 3, 0)
truest
[25, 26, 27]
3
edges_of_v_in_P
[[(5, 3, 0), (5, 4, 0)]]
p is:
[2]
i is:
0
list of agents on v
[25, 26]
v is
(5, 3, 0)
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
24
values
[(0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 4, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 4, 0): [0, 1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(0, 4, 0)
truest
[0, 1]
2
edges_of_v_in_P
[[(0, 4, 0), (0, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[0]
v is
(0, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
25
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 4, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 4, 0): [5, 6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(1, 4, 0)
truest
[5, 6]
2
edges_of_v_in_P
[[(1, 4, 0), (1, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[5]
v is
(1, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
26
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 4, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 5, 0): [5], (1, 4, 0): [6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 4, 0): [10, 11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(2, 4, 0)
truest
[10, 11]
2
edges_of_v_in_P
[[(2, 4, 0), (2, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[10]
v is
(2, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
27
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (2, 5, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 4, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 5, 0): [5], (1, 4, 0): [6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 5, 0): [10], (2, 4, 0): [11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 4, 0): [15, 16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(3, 4, 0)
truest
[15, 16]
2
edges_of_v_in_P
[[(3, 4, 0), (3, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[15]
v is
(3, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
28
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (0, 3, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (2, 5, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 4, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 5, 0): [5], (1, 4, 0): [6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 5, 0): [10], (2, 4, 0): [11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 5, 0): [15], (3, 4, 0): [16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 4, 0): [20, 21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(4, 4, 0)
truest
[20, 21]
2
edges_of_v_in_P
[[(4, 4, 0), (4, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[20]
v is
(4, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 5, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
29
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (0, 3, 0), (4, 5, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (2, 5, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 5, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 4, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
flipped_agents
{(0, 5, 0): [0], (0, 4, 0): [1], (0, 3, 0): [2], (0, 2, 0): [3], (0, 1, 0): [4], (1, 5, 0): [5], (1, 4, 0): [6], (1, 3, 0): [7], (1, 2, 0): [8], (1, 1, 0): [9], (2, 5, 0): [10], (2, 4, 0): [11], (2, 3, 0): [12], (2, 2, 0): [13], (2, 1, 0): [14], (3, 5, 0): [15], (3, 4, 0): [16], (3, 3, 0): [17], (3, 2, 0): [18], (3, 1, 0): [19], (4, 5, 0): [20], (4, 4, 0): [21], (4, 3, 0): [22], (4, 2, 0): [23], (4, 1, 0): [24], (5, 4, 0): [25, 26], (5, 3, 0): [27], (5, 2, 0): [28], (5, 1, 0): [29], (5, 0, 0): [30], (4, 0, 0): [31], (3, 0, 0): [32], (2, 0, 0): [33], (1, 0, 0): [34], (0, 0, 0): [35]}
v is:
(5, 4, 0)
truest
[25, 26]
2
edges_of_v_in_P
[[(5, 4, 0), (5, 5, 0)]]
p is:
[1]
i is:
0
list of agents on v
[25]
v is
(5, 4, 0)
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 5, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 5, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
30
values
[(0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (0, 3, 0), (4, 5, 0), (5, 5, 0), (1, 3, 0), (2, 3, 0), (1, 1, 0), (3, 0, 0), (0, 5, 0), (1, 5, 0), (4, 0, 0), (4, 2, 0), (5, 0, 0), (2, 5, 0), (4, 4, 0), (5, 2, 0), (3, 2, 0), (3, 4, 0), (0, 2, 0), (0, 0, 0), (0, 4, 0), (1, 0, 0), (5, 4, 0), (2, 0, 0), (2, 2, 0), (1, 2, 0), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (5, 1, 0), (5, 3, 0)}
{0: (0, 5, 0), 1: (0, 4, 0), 2: (0, 3, 0), 3: (0, 2, 0), 4: (0, 1, 0), 5: (1, 5, 0), 6: (1, 4, 0), 7: (1, 3, 0), 8: (1, 2, 0), 9: (1, 1, 0), 10: (2, 5, 0), 11: (2, 4, 0), 12: (2, 3, 0), 13: (2, 2, 0), 14: (2, 1, 0), 15: (3, 5, 0), 16: (3, 4, 0), 17: (3, 3, 0), 18: (3, 2, 0), 19: (3, 1, 0), 20: (4, 5, 0), 21: (4, 4, 0), 22: (4, 3, 0), 23: (4, 2, 0), 24: (4, 1, 0), 25: (5, 5, 0), 26: (5, 4, 0), 27: (5, 3, 0), 28: (5, 2, 0), 29: (5, 1, 0), 30: (5, 0, 0), 31: (4, 0, 0), 32: (3, 0, 0), 33: (2, 0, 0), 34: (1, 0, 0), 35: (0, 0, 0)}
36
no grey nodes remain
after_init is 180
move_counter is 364
216
400
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
(x,y,z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y,z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y,z) is:
(2, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0)]
(x,y,z) is:
(3, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]
(x,y,z) is:
(4, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)]
(x,y,z) is:
(5, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]]
0
216
6
theoretical_nr_moves is 262.0
18.0
agent_which is 4
agent_when is 1000000
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5]
6
edges_of_v_in_P
[[(0, 0, 0), (1, 0, 0)]]
p is:
[5]
i is:
0
list of agents on v
[0, 1, 2, 3, 4]
v is
(0, 0, 0)
{0: (1, 0, 0), 1: (1, 0, 0), 2: (1, 0, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0)}
{0: (1, 0, 0), 1: (1, 0, 0), 2: (1, 0, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
flipped_agents
{(1, 0, 0): [0, 1, 2, 3, 4], (0, 0, 0): [5]}
v is:
(1, 0, 0)
truest
[0, 1, 2, 3, 4]
5
edges_of_v_in_P
[[(1, 0, 0), (2, 0, 0)]]
p is:
[4]
i is:
0
list of agents on v
[0, 1, 2, 3]
v is
(1, 0, 0)
{0: (2, 0, 0), 1: (2, 0, 0), 2: (2, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (2, 0, 0)}
{0: (2, 0, 0), 1: (2, 0, 0), 2: (2, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
flipped_agents
{(2, 0, 0): [0, 1, 2, 3], (1, 0, 0): [4], (0, 0, 0): [5]}
v is:
(2, 0, 0)
truest
[0, 1, 2, 3]
4
edges_of_v_in_P
[[(2, 0, 0), (3, 0, 0)]]
p is:
[3]
i is:
0
list of agents on v
[0, 1, 2]
v is
(2, 0, 0)
{0: (3, 0, 0), 1: (3, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(3, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (3, 0, 0), 1: (3, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
flipped_agents
{(3, 0, 0): [0, 1, 2], (2, 0, 0): [3], (1, 0, 0): [4], (0, 0, 0): [5]}
v is:
(3, 0, 0)
truest
[0, 1, 2]
3
edges_of_v_in_P
[[(3, 0, 0), (4, 0, 0)]]
p is:
[2]
i is:
0
list of agents on v
[0, 1]
v is
(3, 0, 0)
{0: (4, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(4, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(3, 0, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (2, 0, 0)}
{0: (4, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
flipped_agents
{(4, 0, 0): [0, 1], (3, 0, 0): [2], (2, 0, 0): [3], (1, 0, 0): [4], (0, 0, 0): [5]}
v is:
(4, 0, 0)
truest
[0, 1]
2
edges_of_v_in_P
[[(4, 0, 0), (5, 0, 0)]]
p is:
[1]
i is:
0
list of agents on v
[0]
v is
(4, 0, 0)
{0: (5, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(3, 0, 0), (0, 0, 0), (4, 0, 0), (1, 0, 0), (5, 0, 0), (2, 0, 0)}
{0: (5, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 0), 1: (4, 0, 0), 2: (3, 0, 0), 3: (2, 0, 0), 4: (1, 0, 0), 5: (0, 0, 0)}
{0: (5, 1, 0), 1: (4, 1, 0), 2: (3, 1, 0), 3: (2, 1, 0), 4: (1, 1, 0), 5: (0, 1, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 0), 1: (4, 2, 0), 2: (3, 2, 0), 3: (2, 2, 0), 4: (1, 2, 0), 5: (0, 2, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 0), 1: (4, 3, 0), 2: (3, 3, 0), 3: (2, 3, 0), 4: (1, 3, 0), 5: (0, 3, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 0), 1: (4, 4, 0), 2: (3, 4, 0), 3: (2, 4, 0), 4: (1, 4, 0), 5: (0, 4, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 0), 1: (4, 5, 0), 2: (3, 5, 0), 3: (2, 5, 0), 4: (1, 5, 0), 5: (0, 5, 0)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 1), 1: (4, 5, 1), 2: (3, 5, 1), 3: (2, 5, 1), 4: (1, 5, 1), 5: (0, 5, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'black', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'black', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'black', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 1), 1: (4, 4, 1), 2: (3, 4, 1), 3: (2, 4, 1), 4: (1, 4, 1), 5: (0, 4, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 1), 1: (4, 3, 1), 2: (3, 3, 1), 3: (2, 3, 1), 4: (1, 3, 1), 5: (0, 3, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 1), 1: (4, 2, 1), 2: (3, 2, 1), 3: (2, 2, 1), 4: (1, 2, 1), 5: (0, 2, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 1, 1), 1: (4, 1, 1), 2: (3, 1, 1), 3: (2, 1, 1), 4: (1, 1, 1), 5: (0, 1, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 1), 1: (4, 0, 1), 2: (3, 0, 1), 3: (2, 0, 1), 4: (1, 0, 1), 5: (0, 0, 1)}
{(0, 0, 0): 'white', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 2), 1: (4, 0, 2), 2: (3, 0, 2), 3: (2, 0, 2), 4: (1, 0, 2), 5: (0, 0, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'black', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'black', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'black', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'black', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'black', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'black', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 1, 2), 1: (4, 1, 2), 2: (3, 1, 2), 3: (2, 1, 2), 4: (1, 1, 2), 5: (0, 1, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'black', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'black', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'black', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'black', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'black', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'black', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 2), 1: (4, 2, 2), 2: (3, 2, 2), 3: (2, 2, 2), 4: (1, 2, 2), 5: (0, 2, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'black', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'black', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'black', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'black', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'black', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'black', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 2), 1: (4, 3, 2), 2: (3, 3, 2), 3: (2, 3, 2), 4: (1, 3, 2), 5: (0, 3, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'black', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'black', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'black', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'black', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'black', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'black', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 2), 1: (4, 4, 2), 2: (3, 4, 2), 3: (2, 4, 2), 4: (1, 4, 2), 5: (0, 4, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'black', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'black', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'black', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'black', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'black', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'black', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 2), 1: (4, 5, 2), 2: (3, 5, 2), 3: (2, 5, 2), 4: (1, 5, 2), 5: (0, 5, 2)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'black', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'black', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'black', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'black', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'black', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'black', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 3), 1: (4, 5, 3), 2: (3, 5, 3), 3: (2, 5, 3), 4: (1, 5, 3), 5: (0, 5, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'black', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'black', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'black', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'black', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'black', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'black', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 3), 1: (4, 4, 3), 2: (3, 4, 3), 3: (2, 4, 3), 4: (1, 4, 3), 5: (0, 4, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'black', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'black', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'black', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'black', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'black', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'black', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 3), 1: (4, 3, 3), 2: (3, 3, 3), 3: (2, 3, 3), 4: (1, 3, 3), 5: (0, 3, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'black', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'black', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'black', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'black', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'black', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'black', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 3), 1: (4, 2, 3), 2: (3, 2, 3), 3: (2, 2, 3), 4: (1, 2, 3), 5: (0, 2, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'black', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'black', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'black', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'black', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'black', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'black', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 1, 3), 1: (4, 1, 3), 2: (3, 1, 3), 3: (2, 1, 3), 4: (1, 1, 3), 5: (0, 1, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'black', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'black', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'black', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'black', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'black', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'black', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 3), 1: (4, 0, 3), 2: (3, 0, 3), 3: (2, 0, 3), 4: (1, 0, 3), 5: (0, 0, 3)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'black', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'black', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'black', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'black', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'black', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'black', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 0, 4), 1: (4, 0, 4), 2: (3, 0, 4), 3: (2, 0, 4), 4: (1, 0, 4), 5: (0, 0, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'black', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'black', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'black', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'black', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'black', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'black', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 1, 4), 1: (4, 1, 4), 2: (3, 1, 4), 3: (2, 1, 4), 4: (1, 1, 4), 5: (0, 1, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'black', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'black', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'black', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'black', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'black', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'black', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 2, 4), 1: (4, 2, 4), 2: (3, 2, 4), 3: (2, 2, 4), 4: (1, 2, 4), 5: (0, 2, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'black', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'black', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'black', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'black', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'black', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'black', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 3, 4), 1: (4, 3, 4), 2: (3, 3, 4), 3: (2, 3, 4), 4: (1, 3, 4), 5: (0, 3, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'black', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'black', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'black', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'black', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'black', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'black', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 4, 4), 1: (4, 4, 4), 2: (3, 4, 4), 3: (2, 4, 4), 4: (1, 4, 4), 5: (0, 4, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'black', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'black', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'black', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'black', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'black', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'black', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
{0: (5, 5, 4), 1: (4, 5, 4), 2: (3, 5, 4), 3: (2, 5, 4), 4: (1, 5, 4), 5: (0, 5, 4)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'black', (0, 5, 5): 'grey', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'black', (1, 5, 5): 'grey', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'black', (2, 5, 5): 'grey', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'black', (3, 5, 5): 'grey', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'black', (4, 5, 5): 'grey', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'black', (5, 5, 5): 'grey'}
{0: (5, 5, 5), 1: (4, 5, 5), 2: (3, 5, 5), 3: (2, 5, 5), 4: (1, 5, 5), 5: (0, 5, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'grey', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'black', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'grey', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'black', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'grey', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'black', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'grey', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'black', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'grey', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'black', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'grey', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'black'}
{0: (5, 4, 5), 1: (4, 4, 5), 2: (3, 4, 5), 3: (2, 4, 5), 4: (1, 4, 5), 5: (0, 4, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'grey', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'black', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'grey', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'black', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'grey', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'black', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'grey', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'black', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'grey', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'black', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'grey', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'black', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
{0: (5, 3, 5), 1: (4, 3, 5), 2: (3, 3, 5), 3: (2, 3, 5), 4: (1, 3, 5), 5: (0, 3, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'grey', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'black', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'white', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'grey', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'black', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'white', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'grey', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'black', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'white', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'grey', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'black', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'white', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'grey', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'black', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'white', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'grey', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'black', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'white', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
{0: (5, 2, 5), 1: (4, 2, 5), 2: (3, 2, 5), 3: (2, 2, 5), 4: (1, 2, 5), 5: (0, 2, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'grey', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'black', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'white', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'white', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'grey', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'black', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'white', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'white', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'grey', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'black', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'white', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'white', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'grey', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'black', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'white', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'white', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'grey', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'black', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'white', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'white', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'grey', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'black', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'white', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'white', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
{0: (5, 1, 5), 1: (4, 1, 5), 2: (3, 1, 5), 3: (2, 1, 5), 4: (1, 1, 5), 5: (0, 1, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'grey', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'black', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'white', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'white', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'white', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'grey', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'black', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'white', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'white', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'white', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'grey', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'black', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'white', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'white', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'white', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'grey', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'black', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'white', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'white', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'white', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'grey', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'black', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'white', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'white', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'white', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'grey', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'black', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'white', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'white', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'white', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
{0: (5, 0, 5), 1: (4, 0, 5), 2: (3, 0, 5), 3: (2, 0, 5), 4: (1, 0, 5), 5: (0, 0, 5)}
{(0, 0, 0): 'white', (0, 0, 1): 'white', (0, 0, 2): 'white', (0, 0, 3): 'white', (0, 0, 4): 'white', (0, 0, 5): 'black', (0, 1, 0): 'white', (0, 1, 1): 'white', (0, 1, 2): 'white', (0, 1, 3): 'white', (0, 1, 4): 'white', (0, 1, 5): 'white', (0, 2, 0): 'white', (0, 2, 1): 'white', (0, 2, 2): 'white', (0, 2, 3): 'white', (0, 2, 4): 'white', (0, 2, 5): 'white', (0, 3, 0): 'white', (0, 3, 1): 'white', (0, 3, 2): 'white', (0, 3, 3): 'white', (0, 3, 4): 'white', (0, 3, 5): 'white', (0, 4, 0): 'white', (0, 4, 1): 'white', (0, 4, 2): 'white', (0, 4, 3): 'white', (0, 4, 4): 'white', (0, 4, 5): 'white', (0, 5, 0): 'white', (0, 5, 1): 'white', (0, 5, 2): 'white', (0, 5, 3): 'white', (0, 5, 4): 'white', (0, 5, 5): 'white', (1, 0, 0): 'white', (1, 0, 1): 'white', (1, 0, 2): 'white', (1, 0, 3): 'white', (1, 0, 4): 'white', (1, 0, 5): 'black', (1, 1, 0): 'white', (1, 1, 1): 'white', (1, 1, 2): 'white', (1, 1, 3): 'white', (1, 1, 4): 'white', (1, 1, 5): 'white', (1, 2, 0): 'white', (1, 2, 1): 'white', (1, 2, 2): 'white', (1, 2, 3): 'white', (1, 2, 4): 'white', (1, 2, 5): 'white', (1, 3, 0): 'white', (1, 3, 1): 'white', (1, 3, 2): 'white', (1, 3, 3): 'white', (1, 3, 4): 'white', (1, 3, 5): 'white', (1, 4, 0): 'white', (1, 4, 1): 'white', (1, 4, 2): 'white', (1, 4, 3): 'white', (1, 4, 4): 'white', (1, 4, 5): 'white', (1, 5, 0): 'white', (1, 5, 1): 'white', (1, 5, 2): 'white', (1, 5, 3): 'white', (1, 5, 4): 'white', (1, 5, 5): 'white', (2, 0, 0): 'white', (2, 0, 1): 'white', (2, 0, 2): 'white', (2, 0, 3): 'white', (2, 0, 4): 'white', (2, 0, 5): 'black', (2, 1, 0): 'white', (2, 1, 1): 'white', (2, 1, 2): 'white', (2, 1, 3): 'white', (2, 1, 4): 'white', (2, 1, 5): 'white', (2, 2, 0): 'white', (2, 2, 1): 'white', (2, 2, 2): 'white', (2, 2, 3): 'white', (2, 2, 4): 'white', (2, 2, 5): 'white', (2, 3, 0): 'white', (2, 3, 1): 'white', (2, 3, 2): 'white', (2, 3, 3): 'white', (2, 3, 4): 'white', (2, 3, 5): 'white', (2, 4, 0): 'white', (2, 4, 1): 'white', (2, 4, 2): 'white', (2, 4, 3): 'white', (2, 4, 4): 'white', (2, 4, 5): 'white', (2, 5, 0): 'white', (2, 5, 1): 'white', (2, 5, 2): 'white', (2, 5, 3): 'white', (2, 5, 4): 'white', (2, 5, 5): 'white', (3, 0, 0): 'white', (3, 0, 1): 'white', (3, 0, 2): 'white', (3, 0, 3): 'white', (3, 0, 4): 'white', (3, 0, 5): 'black', (3, 1, 0): 'white', (3, 1, 1): 'white', (3, 1, 2): 'white', (3, 1, 3): 'white', (3, 1, 4): 'white', (3, 1, 5): 'white', (3, 2, 0): 'white', (3, 2, 1): 'white', (3, 2, 2): 'white', (3, 2, 3): 'white', (3, 2, 4): 'white', (3, 2, 5): 'white', (3, 3, 0): 'white', (3, 3, 1): 'white', (3, 3, 2): 'white', (3, 3, 3): 'white', (3, 3, 4): 'white', (3, 3, 5): 'white', (3, 4, 0): 'white', (3, 4, 1): 'white', (3, 4, 2): 'white', (3, 4, 3): 'white', (3, 4, 4): 'white', (3, 4, 5): 'white', (3, 5, 0): 'white', (3, 5, 1): 'white', (3, 5, 2): 'white', (3, 5, 3): 'white', (3, 5, 4): 'white', (3, 5, 5): 'white', (4, 0, 0): 'white', (4, 0, 1): 'white', (4, 0, 2): 'white', (4, 0, 3): 'white', (4, 0, 4): 'white', (4, 0, 5): 'black', (4, 1, 0): 'white', (4, 1, 1): 'white', (4, 1, 2): 'white', (4, 1, 3): 'white', (4, 1, 4): 'white', (4, 1, 5): 'white', (4, 2, 0): 'white', (4, 2, 1): 'white', (4, 2, 2): 'white', (4, 2, 3): 'white', (4, 2, 4): 'white', (4, 2, 5): 'white', (4, 3, 0): 'white', (4, 3, 1): 'white', (4, 3, 2): 'white', (4, 3, 3): 'white', (4, 3, 4): 'white', (4, 3, 5): 'white', (4, 4, 0): 'white', (4, 4, 1): 'white', (4, 4, 2): 'white', (4, 4, 3): 'white', (4, 4, 4): 'white', (4, 4, 5): 'white', (4, 5, 0): 'white', (4, 5, 1): 'white', (4, 5, 2): 'white', (4, 5, 3): 'white', (4, 5, 4): 'white', (4, 5, 5): 'white', (5, 0, 0): 'white', (5, 0, 1): 'white', (5, 0, 2): 'white', (5, 0, 3): 'white', (5, 0, 4): 'white', (5, 0, 5): 'black', (5, 1, 0): 'white', (5, 1, 1): 'white', (5, 1, 2): 'white', (5, 1, 3): 'white', (5, 1, 4): 'white', (5, 1, 5): 'white', (5, 2, 0): 'white', (5, 2, 1): 'white', (5, 2, 2): 'white', (5, 2, 3): 'white', (5, 2, 4): 'white', (5, 2, 5): 'white', (5, 3, 0): 'white', (5, 3, 1): 'white', (5, 3, 2): 'white', (5, 3, 3): 'white', (5, 3, 4): 'white', (5, 3, 5): 'white', (5, 4, 0): 'white', (5, 4, 1): 'white', (5, 4, 2): 'white', (5, 4, 3): 'white', (5, 4, 4): 'white', (5, 4, 5): 'white', (5, 5, 0): 'white', (5, 5, 1): 'white', (5, 5, 2): 'white', (5, 5, 3): 'white', (5, 5, 4): 'white', (5, 5, 5): 'white'}
6
no grey nodes remain
after_init is 15
move_counter is 259
18.0
262.0
[(0, 0, 0)]
(x,y,z) is:
(0, 0, 0)
[(0, 0, 0)]
P is :
[[(0, 0, 0)]]
theoretical_nr_moves is 429
0
agent_which is 0
agent_when is 1000000
1
no grey nodes remain
after_init is 0
move_counter is 429
0
429
[6, 6]
Graph with 36 nodes and 72 edges
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
list of C nodes
[(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1), (4, 0), (4, 1), (5, 0), (5, 1)]
{(0, 0): 'grey', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(x,y) is:
(0, 0)
[(0, 0)]
(x,y) is:
(0, 1)
[(0, 0), (0, 1)]
(x,y) is:
(1, 0)
[(0, 0), (1, 0)]
(x,y) is:
(1, 1)
[(0, 0), (1, 0), (1, 1)]
(x,y) is:
(2, 0)
[(0, 0), (1, 0), (2, 0)]
(x,y) is:
(2, 1)
[(0, 0), (1, 0), (2, 0), (2, 1)]
(x,y) is:
(3, 0)
[(0, 0), (1, 0), (2, 0), (3, 0)]
(x,y) is:
(3, 1)
[(0, 0), (1, 0), (2, 0), (3, 0), (3, 1)]
(x,y) is:
(4, 0)
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]
(x,y) is:
(4, 1)
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1)]
(x,y) is:
(5, 0)
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]
(x,y) is:
(5, 1)
[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (5, 1)]
P is :
[[(0, 0)], [(0, 0), (0, 1)], [(0, 0), (1, 0)], [(0, 0), (1, 0), (1, 1)], [(0, 0), (1, 0), (2, 0)], [(0, 0), (1, 0), (2, 0), (2, 1)], [(0, 0), (1, 0), (2, 0), (3, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (5, 1)]]
theoretical_nr_moves is 64
agent_which is 0
agent_when is 1000000
flipped_agents
{(0, 0): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}
v is:
(0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
12
edges_of_v_in_P
[[(0, 0), (0, 1)], [(0, 0), (1, 0)]]
p is:
[1, 10]
i is:
0
list of agents on v
[0]
v is
(0, 0)
i is:
1
list of agents on v
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
v is
(0, 0)
{0: (0, 1), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0), 6: (1, 0), 7: (1, 0), 8: (1, 0), 9: (1, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 1), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (1, 0), (0, 0)}
{0: (0, 1), 1: (1, 0), 2: (1, 0), 3: (1, 0), 4: (1, 0), 5: (1, 0), 6: (1, 0), 7: (1, 0), 8: (1, 0), 9: (1, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (0, 0): [11]}
v is:
(1, 0)
truest
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
10
edges_of_v_in_P
[[(1, 0), (1, 1)], [(1, 0), (2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[1]
v is
(1, 0)
i is:
1
list of agents on v
[2, 3, 4, 5, 6, 7, 8, 9]
v is
(1, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (2, 0), 6: (2, 0), 7: (2, 0), 8: (2, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 1), (1, 1), (2, 0), (2, 0), (2, 0), (2, 0), (2, 0), (2, 0), (2, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (0, 0), (1, 1), (2, 0), (1, 0)}
{0: (0, 1), 1: (1, 1), 2: (2, 0), 3: (2, 0), 4: (2, 0), 5: (2, 0), 6: (2, 0), 7: (2, 0), 8: (2, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 1): [1], (2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (1, 0): [10], (0, 0): [11]}
v is:
(2, 0)
truest
[2, 3, 4, 5, 6, 7, 8, 9]
8
edges_of_v_in_P
[[(2, 0), (2, 1)], [(2, 0), (3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[2]
v is
(2, 0)
i is:
1
list of agents on v
[3, 4, 5, 6, 7, 8]
v is
(2, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 0), 4: (3, 0), 5: (3, 0), 6: (3, 0), 7: (3, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 1), (1, 1), (2, 1), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (3, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (2, 1), (0, 0), (1, 1), (2, 0), (3, 0), (1, 0)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 0), 4: (3, 0), 5: (3, 0), 6: (3, 0), 7: (3, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 1): [1], (2, 1): [2], (3, 0): [3, 4, 5, 6, 7, 8], (2, 0): [9], (1, 0): [10], (0, 0): [11]}
v is:
(3, 0)
truest
[3, 4, 5, 6, 7, 8]
6
edges_of_v_in_P
[[(3, 0), (3, 1)], [(3, 0), (4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[3]
v is
(3, 0)
i is:
1
list of agents on v
[4, 5, 6, 7]
v is
(3, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 0), 5: (4, 0), 6: (4, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'black', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 1), (1, 1), (2, 1), (3, 1), (4, 0), (4, 0), (4, 0), (4, 0), (3, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (4, 0), (2, 1), (0, 0), (3, 1), (1, 1), (2, 0), (3, 0), (1, 0)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 0), 5: (4, 0), 6: (4, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 1): [1], (2, 1): [2], (3, 1): [3], (4, 0): [4, 5, 6, 7], (3, 0): [8], (2, 0): [9], (1, 0): [10], (0, 0): [11]}
v is:
(4, 0)
truest
[4, 5, 6, 7]
4
edges_of_v_in_P
[[(4, 0), (4, 1)], [(4, 0), (5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[4]
v is
(4, 0)
i is:
1
list of agents on v
[5, 6]
v is
(4, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 0), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'black', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'black', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'black', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 0), (5, 0), (4, 0), (3, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (4, 0), (2, 1), (0, 0), (3, 1), (1, 1), (2, 0), (3, 0), (5, 0), (1, 0), (4, 1)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 0), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 1): [1], (2, 1): [2], (3, 1): [3], (4, 1): [4], (5, 0): [5, 6], (4, 0): [7], (3, 0): [8], (2, 0): [9], (1, 0): [10], (0, 0): [11]}
v is:
(5, 0)
truest
[5, 6]
2
edges_of_v_in_P
[[(5, 0), (5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[5]
v is
(5, 0)
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 1), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'black', (2, 1): 'black', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'black', (3, 1): 'black', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'black', (4, 1): 'black', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'black', (5, 1): 'black', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
6
values
[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (5, 0), (4, 0), (3, 0), (2, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (4, 0), (2, 1), (0, 0), (3, 1), (1, 1), (2, 0), (5, 1), (3, 0), (5, 0), (1, 0), (4, 1)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 1), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
{0: (0, 1), 1: (1, 1), 2: (2, 1), 3: (3, 1), 4: (4, 1), 5: (5, 1), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
target_agents are {1: 0, 0: 11}
this a b in target_agents is (0, 1)
this c d in agents are (0, 1)
this c d in agents are (1, 1)
this c d in agents are (2, 1)
this c d in agents are (3, 1)
this c d in agents are (4, 1)
this c d in agents are (5, 1)
this c d in agents are (5, 0)
this c d in agents are (4, 0)
this c d in agents are (3, 0)
this c d in agents are (2, 0)
this c d in agents are (1, 0)
this c d in agents are (0, 0)
this list_of_i is [0, 1, 2, 3, 4, 5]
this a b in target_agents is (0, 0)
this c d in agents are (0, 1)
this c d in agents are (1, 1)
this c d in agents are (2, 1)
this c d in agents are (3, 1)
this c d in agents are (4, 1)
this c d in agents are (5, 1)
this c d in agents are (5, 0)
this c d in agents are (4, 0)
this c d in agents are (3, 0)
this c d in agents are (2, 0)
this c d in agents are (1, 0)
this c d in agents are (0, 0)
this list_of_i is [6, 7, 8, 9, 10, 11]
t_groups will be {1: [0, 1, 2, 3, 4, 5], 0: [6, 7, 8, 9, 10, 11]}
the path from spare to agent is [(0, 0)]
the path from spare to agent is [(0, 0), (0, 1)]
i in range is
6
welp
welp
welp
welp
welp
welp
moved
{0: (0, 2), 1: (1, 2), 2: (2, 2), 3: (3, 2), 4: (4, 2), 5: (5, 2), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
ribbit
spare agents are in the position at {0: (0, 0), 1: (0, 1)}
welp
welp
welp
welp
welp
welp
moved
{0: (0, 3), 1: (1, 3), 2: (2, 3), 3: (3, 3), 4: (4, 3), 5: (5, 3), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
ribbit
spare agents are in the position at {0: (0, 0), 1: (0, 2)}
welp
welp
welp
welp
welp
welp
moved
{0: (0, 4), 1: (1, 4), 2: (2, 4), 3: (3, 4), 4: (4, 4), 5: (5, 4), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
ribbit
spare agents are in the position at {0: (0, 0), 1: (0, 3)}
welp
welp
welp
welp
welp
welp
moved
{0: (0, 5), 1: (1, 5), 2: (2, 5), 3: (3, 5), 4: (4, 5), 5: (5, 5), 6: (5, 0), 7: (4, 0), 8: (3, 0), 9: (2, 0), 10: (1, 0), 11: (0, 0)}
ribbit
spare agents are in the position at {0: (0, 0), 1: (0, 4)}
12
no grey nodes remain
after_init is 36
move_counter is 64
theo nr of moves is (36, 64)
[6, 6]
Graph with 36 nodes and 72 edges
[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
list of C nodes
[(0, 0), (0, 1), (1, 0), (1, 1)]
{(0, 0): 'grey', (0, 1): 'grey', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'grey', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
(x,y) is:
(0, 0)
[(0, 0)]
(x,y) is:
(0, 1)
[(0, 0), (0, 1)]
(x,y) is:
(1, 0)
[(0, 0), (1, 0)]
(x,y) is:
(1, 1)
[(0, 0), (1, 0), (1, 1)]
P is :
[[(0, 0)], [(0, 0), (0, 1)], [(0, 0), (1, 0)], [(0, 0), (1, 0), (1, 1)]]
theoretical_nr_moves is 68
agent_which is 2
agent_when is 1000000
flipped_agents
{(0, 0): [0, 1, 2, 3]}
v is:
(0, 0)
truest
[0, 1, 2, 3]
4
edges_of_v_in_P
[[(0, 0), (0, 1)], [(0, 0), (1, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[0]
v is
(0, 0)
i is:
1
list of agents on v
[1, 2]
v is
(0, 0)
{0: (0, 1), 1: (1, 0), 2: (1, 0), 3: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'grey', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 1), (1, 0), (1, 0), (0, 0)]
set(values)
{(0, 1), (1, 0), (0, 0)}
{0: (0, 1), 1: (1, 0), 2: (1, 0), 3: (0, 0)}
flipped_agents
{(0, 1): [0], (1, 0): [1, 2], (0, 0): [3]}
v is:
(1, 0)
truest
[1, 2]
2
edges_of_v_in_P
[[(1, 0), (1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[1]
v is
(1, 0)
{0: (0, 1), 1: (1, 1), 2: (1, 0), 3: (0, 0)}
{(0, 0): 'black', (0, 1): 'black', (0, 2): 'grey', (0, 3): 'grey', (0, 4): 'grey', (0, 5): 'grey', (1, 0): 'black', (1, 1): 'black', (1, 2): 'grey', (1, 3): 'grey', (1, 4): 'grey', (1, 5): 'grey', (2, 0): 'grey', (2, 1): 'grey', (2, 2): 'grey', (2, 3): 'grey', (2, 4): 'grey', (2, 5): 'grey', (3, 0): 'grey', (3, 1): 'grey', (3, 2): 'grey', (3, 3): 'grey', (3, 4): 'grey', (3, 5): 'grey', (4, 0): 'grey', (4, 1): 'grey', (4, 2): 'grey', (4, 3): 'grey', (4, 4): 'grey', (4, 5): 'grey', (5, 0): 'grey', (5, 1): 'grey', (5, 2): 'grey', (5, 3): 'grey', (5, 4): 'grey', (5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 1), (1, 1), (1, 0), (0, 0)]
set(values)
{(0, 1), (1, 0), (1, 1), (0, 0)}
{0: (0, 1), 1: (1, 1), 2: (1, 0), 3: (0, 0)}
{0: (0, 1), 1: (1, 1), 2: (1, 0), 3: (0, 0)}
the path from spare to agent is [(0, 0), (0, 1)]
the path from spare to agent is [(0, 0), (0, 1), (1, 1)]
spare agent 1 moved to (0, 1)
the path from spare to agent is [(0, 0), (1, 0)]
the path from spare to agent is [(0, 0)]
cube is starting
welp
welp
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
shift became
1
agents are at {0: (0, 1), 1: (2, 1), 2: (2, 0), 3: (0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0), 1: (1, 1), 2: (1, 0), 3: (0, 0)}
{0: (0, 1), 1: (2, 1), 2: (2, 0), 3: (0, 0)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 2, its first coord is changed by 1
shift became
2
agents are at {0: (0, 1), 1: (3, 1), 2: (3, 0), 3: (0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0), 1: (2, 1), 2: (2, 0), 3: (0, 0)}
{0: (0, 1), 1: (3, 1), 2: (3, 0), 3: (0, 0)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 3, its first coord is changed by 1
shift became
3
agents are at {0: (0, 1), 1: (4, 1), 2: (4, 0), 3: (0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0), 1: (3, 1), 2: (3, 0), 3: (0, 0)}
{0: (0, 1), 1: (4, 1), 2: (4, 0), 3: (0, 0)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 4, its first coord is changed by 1
shift became
4
agents are at {0: (0, 1), 1: (5, 1), 2: (5, 0), 3: (0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0), 1: (4, 1), 2: (4, 0), 3: (0, 0)}
{0: (0, 1), 1: (5, 1), 2: (5, 0), 3: (0, 0)}
welp
welp
welp
welp
agents are at {0: (0, 2), 1: (5, 2), 2: (5, 5), 3: (0, 5)}
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 1), 1: (5, 1), 2: (5, 0), 3: (0, 0)}
if happened
{0: (0, 2), 1: (5, 2), 2: (5, 5), 3: (0, 5)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 5, its first coord is changed by -1
shift became
3
agents are at {0: (0, 2), 1: (4, 2), 2: (4, 5), 3: (0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1), 1: (5, 2), 2: (5, 5), 3: (0, 0)}
{0: (0, 2), 1: (4, 2), 2: (4, 5), 3: (0, 5)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 4, its first coord is changed by -1
shift became
2
agents are at {0: (0, 2), 1: (3, 2), 2: (3, 5), 3: (0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1), 1: (4, 2), 2: (4, 5), 3: (0, 0)}
{0: (0, 2), 1: (3, 2), 2: (3, 5), 3: (0, 5)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 3, its first coord is changed by -1
shift became
1
agents are at {0: (0, 2), 1: (2, 2), 2: (2, 5), 3: (0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1), 1: (3, 2), 2: (3, 5), 3: (0, 0)}
{0: (0, 2), 1: (2, 2), 2: (2, 5), 3: (0, 5)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 2, its first coord is changed by -1
shift became
0
agents are at {0: (0, 2), 1: (1, 2), 2: (1, 5), 3: (0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1), 1: (2, 2), 2: (2, 5), 3: (0, 0)}
{0: (0, 2), 1: (1, 2), 2: (1, 5), 3: (0, 5)}
welp
welp
welp
welp
agents are at {0: (0, 3), 1: (1, 3), 2: (1, 4), 3: (0, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 2), 1: (1, 2), 2: (1, 5), 3: (0, 5)}
if happened
{0: (0, 3), 1: (1, 3), 2: (1, 4), 3: (0, 4)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
shift became
1
agents are at {0: (0, 3), 1: (2, 3), 2: (2, 4), 3: (0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2), 1: (1, 3), 2: (1, 4), 3: (0, 5)}
{0: (0, 3), 1: (2, 3), 2: (2, 4), 3: (0, 4)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 2, its first coord is changed by 1
shift became
2
agents are at {0: (0, 3), 1: (3, 3), 2: (3, 4), 3: (0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2), 1: (2, 3), 2: (2, 4), 3: (0, 5)}
{0: (0, 3), 1: (3, 3), 2: (3, 4), 3: (0, 4)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 3, its first coord is changed by 1
shift became
3
agents are at {0: (0, 3), 1: (4, 3), 2: (4, 4), 3: (0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2), 1: (3, 3), 2: (3, 4), 3: (0, 5)}
{0: (0, 3), 1: (4, 3), 2: (4, 4), 3: (0, 4)}
welp
welp
we just moved the agents on the vertices, where 1st coord is 4, its first coord is changed by 1
shift became
4
agents are at {0: (0, 3), 1: (5, 3), 2: (5, 4), 3: (0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2), 1: (4, 3), 2: (4, 4), 3: (0, 5)}
{0: (0, 3), 1: (5, 3), 2: (5, 4), 3: (0, 4)}
4
no grey nodes remain
after_init is 5
move_counter is 68
theo nr of moves is (5, 68)
move counter at starting position is 0
dimensions are the following: [6, 6, 6]
Graph with 216 nodes and 648 edges
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (0, 3, 4), (0, 3, 5), (0, 4, 0), (0, 4, 1), (0, 4, 2), (0, 4, 3), (0, 4, 4), (0, 4, 5), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 3), (0, 5, 4), (0, 5, 5), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 0), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 4, 5), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 3), (1, 5, 4), (1, 5, 5), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 0), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (2, 4, 5), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 3), (2, 5, 4), (2, 5, 5), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 0, 4), (3, 0, 5), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 1, 5), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 2, 5), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 0), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (3, 4, 5), (3, 5, 0), (3, 5, 1), (3, 5, 2), (3, 5, 3), (3, 5, 4), (3, 5, 5), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 2, 0), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 2, 5), (4, 3, 0), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 3, 5), (4, 4, 0), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4), (4, 4, 5), (4, 5, 0), (4, 5, 1), (4, 5, 2), (4, 5, 3), (4, 5, 4), (4, 5, 5), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 0), (5, 3, 1), (5, 3, 2), (5, 3, 3), (5, 3, 4), (5, 3, 5), (5, 4, 0), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 3), (5, 5, 4), (5, 5, 5)]
list of C nodes
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (0, 2, 0), (0, 2, 1), (0, 3, 0), (0, 3, 1), (0, 4, 0), (0, 4, 1), (0, 5, 0), (0, 5, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1), (1, 2, 0), (1, 2, 1), (1, 3, 0), (1, 3, 1), (1, 4, 0), (1, 4, 1), (1, 5, 0), (1, 5, 1), (2, 0, 0), (2, 0, 1), (2, 1, 0), (2, 1, 1), (2, 2, 0), (2, 2, 1), (2, 3, 0), (2, 3, 1), (2, 4, 0), (2, 4, 1), (2, 5, 0), (2, 5, 1), (3, 0, 0), (3, 0, 1), (3, 1, 0), (3, 1, 1), (3, 2, 0), (3, 2, 1), (3, 3, 0), (3, 3, 1), (3, 4, 0), (3, 4, 1), (3, 5, 0), (3, 5, 1), (4, 0, 0), (4, 0, 1), (4, 1, 0), (4, 1, 1), (4, 2, 0), (4, 2, 1), (4, 3, 0), (4, 3, 1), (4, 4, 0), (4, 4, 1), (4, 5, 0), (4, 5, 1), (5, 0, 0), (5, 0, 1), (5, 1, 0), (5, 1, 1), (5, 2, 0), (5, 2, 1), (5, 3, 0), (5, 3, 1), (5, 4, 0), (5, 4, 1), (5, 5, 0), (5, 5, 1)]
{(0, 0, 0): 'grey', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'grey', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
(x,y, z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y, z) is:
(0, 0, 1)
[(0, 0, 0), (0, 0, 1)]
(x,y, z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y, z) is:
(0, 1, 1)
[(0, 0, 0), (0, 1, 0), (0, 1, 1)]
(x,y, z) is:
(0, 2, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0)]
(x,y, z) is:
(0, 2, 1)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 2, 1)]
(x,y, z) is:
(0, 3, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0)]
(x,y, z) is:
(0, 3, 1)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 3, 1)]
(x,y, z) is:
(0, 4, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)]
(x,y, z) is:
(0, 4, 1)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 4, 1)]
(x,y, z) is:
(0, 5, 0)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0)]
(x,y, z) is:
(0, 5, 1)
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0), (0, 5, 1)]
(x,y, z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y, z) is:
(1, 0, 1)
[(0, 0, 0), (1, 0, 0), (1, 0, 1)]
(x,y, z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
(x,y, z) is:
(1, 1, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]
(x,y, z) is:
(1, 2, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0)]
(x,y, z) is:
(1, 2, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 2, 1)]
(x,y, z) is:
(1, 3, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0)]
(x,y, z) is:
(1, 3, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 3, 1)]
(x,y, z) is:
(1, 4, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0)]
(x,y, z) is:
(1, 4, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 4, 1)]
(x,y, z) is:
(1, 5, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0)]
(x,y, z) is:
(1, 5, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0), (1, 5, 1)]
(x,y, z) is:
(2, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0)]
(x,y, z) is:
(2, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 1)]
(x,y, z) is:
(2, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)]
(x,y, z) is:
(2, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 1, 1)]
(x,y, z) is:
(2, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0)]
(x,y, z) is:
(2, 2, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 2, 1)]
(x,y, z) is:
(2, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0)]
(x,y, z) is:
(2, 3, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 3, 1)]
(x,y, z) is:
(2, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0)]
(x,y, z) is:
(2, 4, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 4, 1)]
(x,y, z) is:
(2, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0)]
(x,y, z) is:
(2, 5, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0), (2, 5, 1)]
(x,y, z) is:
(3, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]
(x,y, z) is:
(3, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 1)]
(x,y, z) is:
(3, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)]
(x,y, z) is:
(3, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 1, 1)]
(x,y, z) is:
(3, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0)]
(x,y, z) is:
(3, 2, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 2, 1)]
(x,y, z) is:
(3, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)]
(x,y, z) is:
(3, 3, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 3, 1)]
(x,y, z) is:
(3, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0)]
(x,y, z) is:
(3, 4, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 4, 1)]
(x,y, z) is:
(3, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0)]
(x,y, z) is:
(3, 5, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0), (3, 5, 1)]
(x,y, z) is:
(4, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)]
(x,y, z) is:
(4, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1)]
(x,y, z) is:
(4, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)]
(x,y, z) is:
(4, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 1, 1)]
(x,y, z) is:
(4, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0)]
(x,y, z) is:
(4, 2, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 2, 1)]
(x,y, z) is:
(4, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0)]
(x,y, z) is:
(4, 3, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 3, 1)]
(x,y, z) is:
(4, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)]
(x,y, z) is:
(4, 4, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 4, 1)]
(x,y, z) is:
(4, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0)]
(x,y, z) is:
(4, 5, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0), (4, 5, 1)]
(x,y, z) is:
(5, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
(x,y, z) is:
(5, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 0, 1)]
(x,y, z) is:
(5, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)]
(x,y, z) is:
(5, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 1, 1)]
(x,y, z) is:
(5, 2, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0)]
(x,y, z) is:
(5, 2, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 2, 1)]
(x,y, z) is:
(5, 3, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0)]
(x,y, z) is:
(5, 3, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 3, 1)]
(x,y, z) is:
(5, 4, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0)]
(x,y, z) is:
(5, 4, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 4, 1)]
(x,y, z) is:
(5, 5, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)]
(x,y, z) is:
(5, 5, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0), (5, 5, 1)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (0, 1, 0), (0, 1, 1)], [(0, 0, 0), (0, 1, 0), (0, 2, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 2, 1)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 3, 1)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 4, 1)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0)], [(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (0, 5, 0), (0, 5, 1)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 0, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 2, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 3, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 4, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (1, 5, 0), (1, 5, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 2, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 3, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 4, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (2, 5, 0), (2, 5, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 2, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 3, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 4, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (3, 5, 0), (3, 5, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 2, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 3, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 4, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0), (4, 5, 0), (4, 5, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 2, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 3, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 4, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 2, 0), (5, 3, 0), (5, 4, 0), (5, 5, 0), (5, 5, 1)]]
theoretical_nr_moves is 544
agent_which is 33
agent_when is 1000000
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71]
72
edges_of_v_in_P
[[(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[1, 10, 60]
i is:
0
list of agents on v
[0]
v is
(0, 0, 0)
i is:
1
list of agents on v
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
v is
(0, 0, 0)
i is:
2
list of agents on v
[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70]
v is
(0, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (1, 0, 0), 24: (1, 0, 0), 25: (1, 0, 0), 26: (1, 0, 0), 27: (1, 0, 0), 28: (1, 0, 0), 29: (1, 0, 0), 30: (1, 0, 0), 31: (1, 0, 0), 32: (1, 0, 0), 33: (1, 0, 0), 34: (1, 0, 0), 35: (1, 0, 0), 36: (1, 0, 0), 37: (1, 0, 0), 38: (1, 0, 0), 39: (1, 0, 0), 40: (1, 0, 0), 41: (1, 0, 0), 42: (1, 0, 0), 43: (1, 0, 0), 44: (1, 0, 0), 45: (1, 0, 0), 46: (1, 0, 0), 47: (1, 0, 0), 48: (1, 0, 0), 49: (1, 0, 0), 50: (1, 0, 0), 51: (1, 0, 0), 52: (1, 0, 0), 53: (1, 0, 0), 54: (1, 0, 0), 55: (1, 0, 0), 56: (1, 0, 0), 57: (1, 0, 0), 58: (1, 0, 0), 59: (1, 0, 0), 60: (1, 0, 0), 61: (1, 0, 0), 62: (1, 0, 0), 63: (1, 0, 0), 64: (1, 0, 0), 65: (1, 0, 0), 66: (1, 0, 0), 67: (1, 0, 0), 68: (1, 0, 0), 69: (1, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (1, 0, 0), 24: (1, 0, 0), 25: (1, 0, 0), 26: (1, 0, 0), 27: (1, 0, 0), 28: (1, 0, 0), 29: (1, 0, 0), 30: (1, 0, 0), 31: (1, 0, 0), 32: (1, 0, 0), 33: (1, 0, 0), 34: (1, 0, 0), 35: (1, 0, 0), 36: (1, 0, 0), 37: (1, 0, 0), 38: (1, 0, 0), 39: (1, 0, 0), 40: (1, 0, 0), 41: (1, 0, 0), 42: (1, 0, 0), 43: (1, 0, 0), 44: (1, 0, 0), 45: (1, 0, 0), 46: (1, 0, 0), 47: (1, 0, 0), 48: (1, 0, 0), 49: (1, 0, 0), 50: (1, 0, 0), 51: (1, 0, 0), 52: (1, 0, 0), 53: (1, 0, 0), 54: (1, 0, 0), 55: (1, 0, 0), 56: (1, 0, 0), 57: (1, 0, 0), 58: (1, 0, 0), 59: (1, 0, 0), 60: (1, 0, 0), 61: (1, 0, 0), 62: (1, 0, 0), 63: (1, 0, 0), 64: (1, 0, 0), 65: (1, 0, 0), 66: (1, 0, 0), 67: (1, 0, 0), 68: (1, 0, 0), 69: (1, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 0): [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], (0, 0, 0): [71]}
v is:
(1, 0, 0)
truest
[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70]
60
edges_of_v_in_P
[[(1, 0, 0), (1, 0, 1)], [(1, 0, 0), (1, 1, 0)], [(1, 0, 0), (2, 0, 0)]]
p is:
[1, 10, 48]
i is:
0
list of agents on v
[11]
v is
(1, 0, 0)
i is:
1
list of agents on v
[12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
v is
(1, 0, 0)
i is:
2
list of agents on v
[22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69]
v is
(1, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 0), 23: (2, 0, 0), 24: (2, 0, 0), 25: (2, 0, 0), 26: (2, 0, 0), 27: (2, 0, 0), 28: (2, 0, 0), 29: (2, 0, 0), 30: (2, 0, 0), 31: (2, 0, 0), 32: (2, 0, 0), 33: (2, 0, 0), 34: (2, 0, 0), 35: (2, 0, 0), 36: (2, 0, 0), 37: (2, 0, 0), 38: (2, 0, 0), 39: (2, 0, 0), 40: (2, 0, 0), 41: (2, 0, 0), 42: (2, 0, 0), 43: (2, 0, 0), 44: (2, 0, 0), 45: (2, 0, 0), 46: (2, 0, 0), 47: (2, 0, 0), 48: (2, 0, 0), 49: (2, 0, 0), 50: (2, 0, 0), 51: (2, 0, 0), 52: (2, 0, 0), 53: (2, 0, 0), 54: (2, 0, 0), 55: (2, 0, 0), 56: (2, 0, 0), 57: (2, 0, 0), 58: (2, 0, 0), 59: (2, 0, 0), 60: (2, 0, 0), 61: (2, 0, 0), 62: (2, 0, 0), 63: (2, 0, 0), 64: (2, 0, 0), 65: (2, 0, 0), 66: (2, 0, 0), 67: (2, 0, 0), 68: (2, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 0), 23: (2, 0, 0), 24: (2, 0, 0), 25: (2, 0, 0), 26: (2, 0, 0), 27: (2, 0, 0), 28: (2, 0, 0), 29: (2, 0, 0), 30: (2, 0, 0), 31: (2, 0, 0), 32: (2, 0, 0), 33: (2, 0, 0), 34: (2, 0, 0), 35: (2, 0, 0), 36: (2, 0, 0), 37: (2, 0, 0), 38: (2, 0, 0), 39: (2, 0, 0), 40: (2, 0, 0), 41: (2, 0, 0), 42: (2, 0, 0), 43: (2, 0, 0), 44: (2, 0, 0), 45: (2, 0, 0), 46: (2, 0, 0), 47: (2, 0, 0), 48: (2, 0, 0), 49: (2, 0, 0), 50: (2, 0, 0), 51: (2, 0, 0), 52: (2, 0, 0), 53: (2, 0, 0), 54: (2, 0, 0), 55: (2, 0, 0), 56: (2, 0, 0), 57: (2, 0, 0), 58: (2, 0, 0), 59: (2, 0, 0), 60: (2, 0, 0), 61: (2, 0, 0), 62: (2, 0, 0), 63: (2, 0, 0), 64: (2, 0, 0), 65: (2, 0, 0), 66: (2, 0, 0), 67: (2, 0, 0), 68: (2, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 0): [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 0, 0)
truest
[22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69]
48
edges_of_v_in_P
[[(2, 0, 0), (2, 0, 1)], [(2, 0, 0), (2, 1, 0)], [(2, 0, 0), (3, 0, 0)]]
p is:
[1, 10, 36]
i is:
0
list of agents on v
[22]
v is
(2, 0, 0)
i is:
1
list of agents on v
[23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
v is
(2, 0, 0)
i is:
2
list of agents on v
[33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68]
v is
(2, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 0), 34: (3, 0, 0), 35: (3, 0, 0), 36: (3, 0, 0), 37: (3, 0, 0), 38: (3, 0, 0), 39: (3, 0, 0), 40: (3, 0, 0), 41: (3, 0, 0), 42: (3, 0, 0), 43: (3, 0, 0), 44: (3, 0, 0), 45: (3, 0, 0), 46: (3, 0, 0), 47: (3, 0, 0), 48: (3, 0, 0), 49: (3, 0, 0), 50: (3, 0, 0), 51: (3, 0, 0), 52: (3, 0, 0), 53: (3, 0, 0), 54: (3, 0, 0), 55: (3, 0, 0), 56: (3, 0, 0), 57: (3, 0, 0), 58: (3, 0, 0), 59: (3, 0, 0), 60: (3, 0, 0), 61: (3, 0, 0), 62: (3, 0, 0), 63: (3, 0, 0), 64: (3, 0, 0), 65: (3, 0, 0), 66: (3, 0, 0), 67: (3, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (2, 0, 1), (1, 0, 0), (2, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 0), 34: (3, 0, 0), 35: (3, 0, 0), 36: (3, 0, 0), 37: (3, 0, 0), 38: (3, 0, 0), 39: (3, 0, 0), 40: (3, 0, 0), 41: (3, 0, 0), 42: (3, 0, 0), 43: (3, 0, 0), 44: (3, 0, 0), 45: (3, 0, 0), 46: (3, 0, 0), 47: (3, 0, 0), 48: (3, 0, 0), 49: (3, 0, 0), 50: (3, 0, 0), 51: (3, 0, 0), 52: (3, 0, 0), 53: (3, 0, 0), 54: (3, 0, 0), 55: (3, 0, 0), 56: (3, 0, 0), 57: (3, 0, 0), 58: (3, 0, 0), 59: (3, 0, 0), 60: (3, 0, 0), 61: (3, 0, 0), 62: (3, 0, 0), 63: (3, 0, 0), 64: (3, 0, 0), 65: (3, 0, 0), 66: (3, 0, 0), 67: (3, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 0): [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 0, 0)
truest
[33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68]
36
edges_of_v_in_P
[[(3, 0, 0), (3, 0, 1)], [(3, 0, 0), (3, 1, 0)], [(3, 0, 0), (4, 0, 0)]]
p is:
[1, 10, 24]
i is:
0
list of agents on v
[33]
v is
(3, 0, 0)
i is:
1
list of agents on v
[34, 35, 36, 37, 38, 39, 40, 41, 42, 43]
v is
(3, 0, 0)
i is:
2
list of agents on v
[44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67]
v is
(3, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 0), 45: (4, 0, 0), 46: (4, 0, 0), 47: (4, 0, 0), 48: (4, 0, 0), 49: (4, 0, 0), 50: (4, 0, 0), 51: (4, 0, 0), 52: (4, 0, 0), 53: (4, 0, 0), 54: (4, 0, 0), 55: (4, 0, 0), 56: (4, 0, 0), 57: (4, 0, 0), 58: (4, 0, 0), 59: (4, 0, 0), 60: (4, 0, 0), 61: (4, 0, 0), 62: (4, 0, 0), 63: (4, 0, 0), 64: (4, 0, 0), 65: (4, 0, 0), 66: (4, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (2, 0, 1), (1, 0, 0), (2, 0, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 0), 45: (4, 0, 0), 46: (4, 0, 0), 47: (4, 0, 0), 48: (4, 0, 0), 49: (4, 0, 0), 50: (4, 0, 0), 51: (4, 0, 0), 52: (4, 0, 0), 53: (4, 0, 0), 54: (4, 0, 0), 55: (4, 0, 0), 56: (4, 0, 0), 57: (4, 0, 0), 58: (4, 0, 0), 59: (4, 0, 0), 60: (4, 0, 0), 61: (4, 0, 0), 62: (4, 0, 0), 63: (4, 0, 0), 64: (4, 0, 0), 65: (4, 0, 0), 66: (4, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 0): [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 0, 0)
truest
[44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67]
24
edges_of_v_in_P
[[(4, 0, 0), (4, 0, 1)], [(4, 0, 0), (4, 1, 0)], [(4, 0, 0), (5, 0, 0)]]
p is:
[1, 10, 12]
i is:
0
list of agents on v
[44]
v is
(4, 0, 0)
i is:
1
list of agents on v
[45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
v is
(4, 0, 0)
i is:
2
list of agents on v
[55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]
v is
(4, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 0), 56: (5, 0, 0), 57: (5, 0, 0), 58: (5, 0, 0), 59: (5, 0, 0), 60: (5, 0, 0), 61: (5, 0, 0), 62: (5, 0, 0), 63: (5, 0, 0), 64: (5, 0, 0), 65: (5, 0, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (4, 0, 1), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (2, 0, 1), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 0), 56: (5, 0, 0), 57: (5, 0, 0), 58: (5, 0, 0), 59: (5, 0, 0), 60: (5, 0, 0), 61: (5, 0, 0), 62: (5, 0, 0), 63: (5, 0, 0), 64: (5, 0, 0), 65: (5, 0, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 0): [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 0, 0)
truest
[55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]
12
edges_of_v_in_P
[[(5, 0, 0), (5, 0, 1)], [(5, 0, 0), (5, 1, 0)]]
p is:
[1, 10]
i is:
0
list of agents on v
[55]
v is
(5, 0, 0)
i is:
1
list of agents on v
[56, 57, 58, 59, 60, 61, 62, 63, 64, 65]
v is
(5, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
6
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (4, 0, 1), (3, 0, 0), (3, 1, 0), (0, 0, 0), (5, 0, 1), (4, 0, 0), (2, 0, 1), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (0, 1, 0), 4: (0, 1, 0), 5: (0, 1, 0), 6: (0, 1, 0), 7: (0, 1, 0), 8: (0, 1, 0), 9: (0, 1, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 1, 0)
truest
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
10
edges_of_v_in_P
[[(0, 1, 0), (0, 1, 1)], [(0, 1, 0), (0, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[1]
v is
(0, 1, 0)
i is:
1
list of agents on v
[2, 3, 4, 5, 6, 7, 8, 9]
v is
(0, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
7
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 0), 13: (1, 1, 0), 14: (1, 1, 0), 15: (1, 1, 0), 16: (1, 1, 0), 17: (1, 1, 0), 18: (1, 1, 0), 19: (1, 1, 0), 20: (1, 1, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 0): [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 1, 0)
truest
[12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
10
edges_of_v_in_P
[[(1, 1, 0), (1, 1, 1)], [(1, 1, 0), (1, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[12]
v is
(1, 1, 0)
i is:
1
list of agents on v
[13, 14, 15, 16, 17, 18, 19, 20]
v is
(1, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
8
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 0), 24: (2, 1, 0), 25: (2, 1, 0), 26: (2, 1, 0), 27: (2, 1, 0), 28: (2, 1, 0), 29: (2, 1, 0), 30: (2, 1, 0), 31: (2, 1, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 0): [23, 24, 25, 26, 27, 28, 29, 30, 31, 32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 1, 0)
truest
[23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
10
edges_of_v_in_P
[[(2, 1, 0), (2, 1, 1)], [(2, 1, 0), (2, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[23]
v is
(2, 1, 0)
i is:
1
list of agents on v
[24, 25, 26, 27, 28, 29, 30, 31]
v is
(2, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
9
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 0), 35: (3, 1, 0), 36: (3, 1, 0), 37: (3, 1, 0), 38: (3, 1, 0), 39: (3, 1, 0), 40: (3, 1, 0), 41: (3, 1, 0), 42: (3, 1, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 0): [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 1, 0)
truest
[34, 35, 36, 37, 38, 39, 40, 41, 42, 43]
10
edges_of_v_in_P
[[(3, 1, 0), (3, 1, 1)], [(3, 1, 0), (3, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[34]
v is
(3, 1, 0)
i is:
1
list of agents on v
[35, 36, 37, 38, 39, 40, 41, 42]
v is
(3, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
10
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (3, 1, 1), (3, 2, 0), (0, 2, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 0), 46: (4, 1, 0), 47: (4, 1, 0), 48: (4, 1, 0), 49: (4, 1, 0), 50: (4, 1, 0), 51: (4, 1, 0), 52: (4, 1, 0), 53: (4, 1, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 0): [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 1, 0)
truest
[45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
10
edges_of_v_in_P
[[(4, 1, 0), (4, 1, 1)], [(4, 1, 0), (4, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[45]
v is
(4, 1, 0)
i is:
1
list of agents on v
[46, 47, 48, 49, 50, 51, 52, 53]
v is
(4, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
11
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (5, 0, 0), (3, 1, 1), (3, 2, 0), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 0), 57: (5, 1, 0), 58: (5, 1, 0), 59: (5, 1, 0), 60: (5, 1, 0), 61: (5, 1, 0), 62: (5, 1, 0), 63: (5, 1, 0), 64: (5, 1, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 0): [56, 57, 58, 59, 60, 61, 62, 63, 64, 65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 1, 0)
truest
[56, 57, 58, 59, 60, 61, 62, 63, 64, 65]
10
edges_of_v_in_P
[[(5, 1, 0), (5, 1, 1)], [(5, 1, 0), (5, 2, 0)]]
p is:
[1, 8]
i is:
0
list of agents on v
[56]
v is
(5, 1, 0)
i is:
1
list of agents on v
[57, 58, 59, 60, 61, 62, 63, 64]
v is
(5, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
12
values
[(0, 0, 1), (0, 1, 1), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 0), 3: (0, 2, 0), 4: (0, 2, 0), 5: (0, 2, 0), 6: (0, 2, 0), 7: (0, 2, 0), 8: (0, 2, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 0): [2, 3, 4, 5, 6, 7, 8, 9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 2, 0)
truest
[2, 3, 4, 5, 6, 7, 8, 9]
8
edges_of_v_in_P
[[(0, 2, 0), (0, 2, 1)], [(0, 2, 0), (0, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[2]
v is
(0, 2, 0)
i is:
1
list of agents on v
[3, 4, 5, 6, 7, 8]
v is
(0, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
13
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (5, 0, 1), (0, 0, 1), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 0), 14: (1, 2, 0), 15: (1, 2, 0), 16: (1, 2, 0), 17: (1, 2, 0), 18: (1, 2, 0), 19: (1, 2, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 0): [13, 14, 15, 16, 17, 18, 19, 20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 2, 0)
truest
[13, 14, 15, 16, 17, 18, 19, 20]
8
edges_of_v_in_P
[[(1, 2, 0), (1, 2, 1)], [(1, 2, 0), (1, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[13]
v is
(1, 2, 0)
i is:
1
list of agents on v
[14, 15, 16, 17, 18, 19]
v is
(1, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
14
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (5, 0, 1), (1, 3, 0), (0, 0, 1), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 0), 25: (2, 2, 0), 26: (2, 2, 0), 27: (2, 2, 0), 28: (2, 2, 0), 29: (2, 2, 0), 30: (2, 2, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 0): [24, 25, 26, 27, 28, 29, 30, 31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 2, 0)
truest
[24, 25, 26, 27, 28, 29, 30, 31]
8
edges_of_v_in_P
[[(2, 2, 0), (2, 2, 1)], [(2, 2, 0), (2, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[24]
v is
(2, 2, 0)
i is:
1
list of agents on v
[25, 26, 27, 28, 29, 30]
v is
(2, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
15
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (5, 0, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 0), 36: (3, 2, 0), 37: (3, 2, 0), 38: (3, 2, 0), 39: (3, 2, 0), 40: (3, 2, 0), 41: (3, 2, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 0): [35, 36, 37, 38, 39, 40, 41, 42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 2, 0)
truest
[35, 36, 37, 38, 39, 40, 41, 42]
8
edges_of_v_in_P
[[(3, 2, 0), (3, 2, 1)], [(3, 2, 0), (3, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[35]
v is
(3, 2, 0)
i is:
1
list of agents on v
[36, 37, 38, 39, 40, 41]
v is
(3, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
16
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (5, 0, 1), (3, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 0), 47: (4, 2, 0), 48: (4, 2, 0), 49: (4, 2, 0), 50: (4, 2, 0), 51: (4, 2, 0), 52: (4, 2, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 0): [46, 47, 48, 49, 50, 51, 52, 53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 2, 0)
truest
[46, 47, 48, 49, 50, 51, 52, 53]
8
edges_of_v_in_P
[[(4, 2, 0), (4, 2, 1)], [(4, 2, 0), (4, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[46]
v is
(4, 2, 0)
i is:
1
list of agents on v
[47, 48, 49, 50, 51, 52]
v is
(4, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
17
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 0), 58: (5, 2, 0), 59: (5, 2, 0), 60: (5, 2, 0), 61: (5, 2, 0), 62: (5, 2, 0), 63: (5, 2, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 0): [57, 58, 59, 60, 61, 62, 63, 64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 2, 0)
truest
[57, 58, 59, 60, 61, 62, 63, 64]
8
edges_of_v_in_P
[[(5, 2, 0), (5, 2, 1)], [(5, 2, 0), (5, 3, 0)]]
p is:
[1, 6]
i is:
0
list of agents on v
[57]
v is
(5, 2, 0)
i is:
1
list of agents on v
[58, 59, 60, 61, 62, 63]
v is
(5, 2, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
18
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 0), 4: (0, 3, 0), 5: (0, 3, 0), 6: (0, 3, 0), 7: (0, 3, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 0): [3, 4, 5, 6, 7, 8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 3, 0)
truest
[3, 4, 5, 6, 7, 8]
6
edges_of_v_in_P
[[(0, 3, 0), (0, 3, 1)], [(0, 3, 0), (0, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[3]
v is
(0, 3, 0)
i is:
1
list of agents on v
[4, 5, 6, 7]
v is
(0, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
19
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (3, 1, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 0), 15: (1, 3, 0), 16: (1, 3, 0), 17: (1, 3, 0), 18: (1, 3, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 0): [14, 15, 16, 17, 18, 19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 3, 0)
truest
[14, 15, 16, 17, 18, 19]
6
edges_of_v_in_P
[[(1, 3, 0), (1, 3, 1)], [(1, 3, 0), (1, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[14]
v is
(1, 3, 0)
i is:
1
list of agents on v
[15, 16, 17, 18]
v is
(1, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
20
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (4, 3, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 0), 26: (2, 3, 0), 27: (2, 3, 0), 28: (2, 3, 0), 29: (2, 3, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 0): [25, 26, 27, 28, 29, 30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 3, 0)
truest
[25, 26, 27, 28, 29, 30]
6
edges_of_v_in_P
[[(2, 3, 0), (2, 3, 1)], [(2, 3, 0), (2, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[25]
v is
(2, 3, 0)
i is:
1
list of agents on v
[26, 27, 28, 29]
v is
(2, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
21
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (0, 2, 0), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 0), 37: (3, 3, 0), 38: (3, 3, 0), 39: (3, 3, 0), 40: (3, 3, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 0): [36, 37, 38, 39, 40, 41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 3, 0)
truest
[36, 37, 38, 39, 40, 41]
6
edges_of_v_in_P
[[(3, 3, 0), (3, 3, 1)], [(3, 3, 0), (3, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[36]
v is
(3, 3, 0)
i is:
1
list of agents on v
[37, 38, 39, 40]
v is
(3, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
22
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 0), 48: (4, 3, 0), 49: (4, 3, 0), 50: (4, 3, 0), 51: (4, 3, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 0): [47, 48, 49, 50, 51, 52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 3, 0)
truest
[47, 48, 49, 50, 51, 52]
6
edges_of_v_in_P
[[(4, 3, 0), (4, 3, 1)], [(4, 3, 0), (4, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[47]
v is
(4, 3, 0)
i is:
1
list of agents on v
[48, 49, 50, 51]
v is
(4, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
23
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 0), 59: (5, 3, 0), 60: (5, 3, 0), 61: (5, 3, 0), 62: (5, 3, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 0): [58, 59, 60, 61, 62, 63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 3, 0)
truest
[58, 59, 60, 61, 62, 63]
6
edges_of_v_in_P
[[(5, 3, 0), (5, 3, 1)], [(5, 3, 0), (5, 4, 0)]]
p is:
[1, 4]
i is:
0
list of agents on v
[58]
v is
(5, 3, 0)
i is:
1
list of agents on v
[59, 60, 61, 62]
v is
(5, 3, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
24
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 0), 5: (0, 4, 0), 6: (0, 4, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 0): [4, 5, 6, 7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 4, 0)
truest
[4, 5, 6, 7]
4
edges_of_v_in_P
[[(0, 4, 0), (0, 4, 1)], [(0, 4, 0), (0, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[4]
v is
(0, 4, 0)
i is:
1
list of agents on v
[5, 6]
v is
(0, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
25
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (4, 0, 0), (2, 0, 1), (4, 2, 0), (2, 2, 1), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 0), 16: (1, 4, 0), 17: (1, 4, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 0): [15, 16, 17, 18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 4, 0)
truest
[15, 16, 17, 18]
4
edges_of_v_in_P
[[(1, 4, 0), (1, 4, 1)], [(1, 4, 0), (1, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[15]
v is
(1, 4, 0)
i is:
1
list of agents on v
[16, 17]
v is
(1, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
26
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 0), 27: (2, 4, 0), 28: (2, 4, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 0): [26, 27, 28, 29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 4, 0)
truest
[26, 27, 28, 29]
4
edges_of_v_in_P
[[(2, 4, 0), (2, 4, 1)], [(2, 4, 0), (2, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[26]
v is
(2, 4, 0)
i is:
1
list of agents on v
[27, 28]
v is
(2, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
27
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 0), 38: (3, 4, 0), 39: (3, 4, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 0): [37, 38, 39, 40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 4, 0)
truest
[37, 38, 39, 40]
4
edges_of_v_in_P
[[(3, 4, 0), (3, 4, 1)], [(3, 4, 0), (3, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[37]
v is
(3, 4, 0)
i is:
1
list of agents on v
[38, 39]
v is
(3, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
28
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 2, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 0), 49: (4, 4, 0), 50: (4, 4, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 0): [48, 49, 50, 51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 4, 0)
truest
[48, 49, 50, 51]
4
edges_of_v_in_P
[[(4, 4, 0), (4, 4, 1)], [(4, 4, 0), (4, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[48]
v is
(4, 4, 0)
i is:
1
list of agents on v
[49, 50]
v is
(4, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
29
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (5, 0, 1), (3, 2, 1), (5, 2, 1), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 0), 60: (5, 4, 0), 61: (5, 4, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 0): [59, 60, 61, 62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 4, 0)
truest
[59, 60, 61, 62]
4
edges_of_v_in_P
[[(5, 4, 0), (5, 4, 1)], [(5, 4, 0), (5, 5, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[59]
v is
(5, 4, 0)
i is:
1
list of agents on v
[60, 61]
v is
(5, 4, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
30
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 0), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 0), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 0): [5, 6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(0, 5, 0)
truest
[5, 6]
2
edges_of_v_in_P
[[(0, 5, 0), (0, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[5]
v is
(0, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
31
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 0), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 0), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 0): [16, 17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(1, 5, 0)
truest
[16, 17]
2
edges_of_v_in_P
[[(1, 5, 0), (1, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[16]
v is
(1, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
32
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 0), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 0), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 1): [16], (1, 5, 0): [17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 0): [27, 28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(2, 5, 0)
truest
[27, 28]
2
edges_of_v_in_P
[[(2, 5, 0), (2, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[27]
v is
(2, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
33
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 1), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 0), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (2, 5, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 0), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 1): [16], (1, 5, 0): [17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 1): [27], (2, 5, 0): [28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 0): [38, 39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(3, 5, 0)
truest
[38, 39]
2
edges_of_v_in_P
[[(3, 5, 0), (3, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[38]
v is
(3, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'black', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
34
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 1), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 1), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 0), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (2, 5, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (3, 5, 1), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 0), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 1): [16], (1, 5, 0): [17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 1): [27], (2, 5, 0): [28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 1): [38], (3, 5, 0): [39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 0): [49, 50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(4, 5, 0)
truest
[49, 50]
2
edges_of_v_in_P
[[(4, 5, 0), (4, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[49]
v is
(4, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'black', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'black', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
35
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 1), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 1), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 1), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 0), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (2, 5, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (3, 5, 1), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (4, 5, 1), (1, 3, 1), (3, 1, 0), (1, 4, 0), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 0), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 2, 1): [2], (0, 3, 1): [3], (0, 4, 1): [4], (0, 5, 1): [5], (0, 5, 0): [6], (0, 4, 0): [7], (0, 3, 0): [8], (0, 2, 0): [9], (0, 1, 0): [10], (1, 0, 1): [11], (1, 1, 1): [12], (1, 2, 1): [13], (1, 3, 1): [14], (1, 4, 1): [15], (1, 5, 1): [16], (1, 5, 0): [17], (1, 4, 0): [18], (1, 3, 0): [19], (1, 2, 0): [20], (1, 1, 0): [21], (2, 0, 1): [22], (2, 1, 1): [23], (2, 2, 1): [24], (2, 3, 1): [25], (2, 4, 1): [26], (2, 5, 1): [27], (2, 5, 0): [28], (2, 4, 0): [29], (2, 3, 0): [30], (2, 2, 0): [31], (2, 1, 0): [32], (3, 0, 1): [33], (3, 1, 1): [34], (3, 2, 1): [35], (3, 3, 1): [36], (3, 4, 1): [37], (3, 5, 1): [38], (3, 5, 0): [39], (3, 4, 0): [40], (3, 3, 0): [41], (3, 2, 0): [42], (3, 1, 0): [43], (4, 0, 1): [44], (4, 1, 1): [45], (4, 2, 1): [46], (4, 3, 1): [47], (4, 4, 1): [48], (4, 5, 1): [49], (4, 5, 0): [50], (4, 4, 0): [51], (4, 3, 0): [52], (4, 2, 0): [53], (4, 1, 0): [54], (5, 0, 1): [55], (5, 1, 1): [56], (5, 2, 1): [57], (5, 3, 1): [58], (5, 4, 1): [59], (5, 5, 0): [60, 61], (5, 4, 0): [62], (5, 3, 0): [63], (5, 2, 0): [64], (5, 1, 0): [65], (5, 0, 0): [66], (4, 0, 0): [67], (3, 0, 0): [68], (2, 0, 0): [69], (1, 0, 0): [70], (0, 0, 0): [71]}
v is:
(5, 5, 0)
truest
[60, 61]
2
edges_of_v_in_P
[[(5, 5, 0), (5, 5, 1)]]
p is:
[1]
i is:
0
list of agents on v
[60]
v is
(5, 5, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 1), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'black', (0, 2, 1): 'black', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'black', (0, 3, 1): 'black', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'black', (0, 4, 1): 'black', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'black', (0, 5, 1): 'black', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'black', (1, 2, 1): 'black', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'black', (1, 3, 1): 'black', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'black', (1, 4, 1): 'black', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'black', (1, 5, 1): 'black', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'black', (2, 2, 1): 'black', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'black', (2, 3, 1): 'black', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'black', (2, 4, 1): 'black', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'black', (2, 5, 1): 'black', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'black', (3, 2, 1): 'black', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'black', (3, 3, 1): 'black', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'black', (3, 4, 1): 'black', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'black', (3, 5, 1): 'black', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'black', (4, 2, 1): 'black', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'black', (4, 3, 1): 'black', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'black', (4, 4, 1): 'black', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'black', (4, 5, 1): 'black', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'black', (5, 2, 1): 'black', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'black', (5, 3, 1): 'black', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'black', (5, 4, 1): 'black', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'black', (5, 5, 1): 'black', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
36
values
[(0, 0, 1), (0, 1, 1), (0, 2, 1), (0, 3, 1), (0, 4, 1), (0, 5, 1), (0, 5, 0), (0, 4, 0), (0, 3, 0), (0, 2, 0), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 2, 1), (1, 3, 1), (1, 4, 1), (1, 5, 1), (1, 5, 0), (1, 4, 0), (1, 3, 0), (1, 2, 0), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (2, 4, 1), (2, 5, 1), (2, 5, 0), (2, 4, 0), (2, 3, 0), (2, 2, 0), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1), (3, 4, 1), (3, 5, 1), (3, 5, 0), (3, 4, 0), (3, 3, 0), (3, 2, 0), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 2, 1), (4, 3, 1), (4, 4, 1), (4, 5, 1), (4, 5, 0), (4, 4, 0), (4, 3, 0), (4, 2, 0), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 2, 1), (5, 3, 1), (5, 4, 1), (5, 5, 1), (5, 5, 0), (5, 4, 0), (5, 3, 0), (5, 2, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 5, 1), (0, 1, 0), (3, 5, 0), (2, 1, 0), (4, 0, 1), (0, 3, 0), (4, 4, 1), (4, 2, 1), (4, 5, 0), (2, 5, 1), (5, 0, 1), (3, 2, 1), (5, 2, 1), (5, 5, 0), (3, 4, 1), (1, 3, 0), (0, 0, 1), (2, 3, 0), (5, 1, 0), (0, 2, 1), (1, 0, 1), (1, 1, 0), (5, 3, 0), (0, 4, 1), (3, 0, 0), (0, 5, 0), (5, 4, 1), (1, 5, 0), (2, 0, 1), (4, 0, 0), (4, 2, 0), (2, 2, 1), (2, 5, 0), (5, 0, 0), (4, 4, 0), (5, 2, 0), (3, 1, 1), (1, 4, 1), (3, 2, 0), (1, 2, 1), (3, 3, 1), (3, 4, 0), (0, 2, 0), (4, 3, 1), (0, 0, 0), (4, 1, 1), (2, 4, 1), (0, 4, 0), (1, 0, 0), (5, 1, 1), (5, 4, 0), (5, 3, 1), (2, 0, 0), (3, 5, 1), (2, 2, 0), (0, 1, 1), (2, 1, 1), (0, 3, 1), (1, 2, 0), (4, 5, 1), (1, 3, 1), (3, 1, 0), (1, 4, 0), (5, 5, 1), (3, 3, 0), (4, 1, 0), (2, 4, 0), (4, 3, 0), (2, 3, 1), (3, 0, 1), (0, 5, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 1), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
agents at the end of INITIAL SET
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 2, 1), 3: (0, 3, 1), 4: (0, 4, 1), 5: (0, 5, 1), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 1), 12: (1, 1, 1), 13: (1, 2, 1), 14: (1, 3, 1), 15: (1, 4, 1), 16: (1, 5, 1), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 1), 23: (2, 1, 1), 24: (2, 2, 1), 25: (2, 3, 1), 26: (2, 4, 1), 27: (2, 5, 1), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 1), 34: (3, 1, 1), 35: (3, 2, 1), 36: (3, 3, 1), 37: (3, 4, 1), 38: (3, 5, 1), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 1), 45: (4, 1, 1), 46: (4, 2, 1), 47: (4, 3, 1), 48: (4, 4, 1), 49: (4, 5, 1), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 1), 56: (5, 1, 1), 57: (5, 2, 1), 58: (5, 3, 1), 59: (5, 4, 1), 60: (5, 5, 1), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
target_agents are {1: 0, 0: 71}
this x y z in target_agents is (0, 0, 1)
this u v w in agents are (0, 0, 1)
this u v w in agents are (0, 1, 1)
this u v w in agents are (0, 2, 1)
this u v w in agents are (0, 3, 1)
this u v w in agents are (0, 4, 1)
this u v w in agents are (0, 5, 1)
this u v w in agents are (0, 5, 0)
this u v w in agents are (0, 4, 0)
this u v w in agents are (0, 3, 0)
this u v w in agents are (0, 2, 0)
this u v w in agents are (0, 1, 0)
this u v w in agents are (1, 0, 1)
this u v w in agents are (1, 1, 1)
this u v w in agents are (1, 2, 1)
this u v w in agents are (1, 3, 1)
this u v w in agents are (1, 4, 1)
this u v w in agents are (1, 5, 1)
this u v w in agents are (1, 5, 0)
this u v w in agents are (1, 4, 0)
this u v w in agents are (1, 3, 0)
this u v w in agents are (1, 2, 0)
this u v w in agents are (1, 1, 0)
this u v w in agents are (2, 0, 1)
this u v w in agents are (2, 1, 1)
this u v w in agents are (2, 2, 1)
this u v w in agents are (2, 3, 1)
this u v w in agents are (2, 4, 1)
this u v w in agents are (2, 5, 1)
this u v w in agents are (2, 5, 0)
this u v w in agents are (2, 4, 0)
this u v w in agents are (2, 3, 0)
this u v w in agents are (2, 2, 0)
this u v w in agents are (2, 1, 0)
this u v w in agents are (3, 0, 1)
this u v w in agents are (3, 1, 1)
this u v w in agents are (3, 2, 1)
this u v w in agents are (3, 3, 1)
this u v w in agents are (3, 4, 1)
this u v w in agents are (3, 5, 1)
this u v w in agents are (3, 5, 0)
this u v w in agents are (3, 4, 0)
this u v w in agents are (3, 3, 0)
this u v w in agents are (3, 2, 0)
this u v w in agents are (3, 1, 0)
this u v w in agents are (4, 0, 1)
this u v w in agents are (4, 1, 1)
this u v w in agents are (4, 2, 1)
this u v w in agents are (4, 3, 1)
this u v w in agents are (4, 4, 1)
this u v w in agents are (4, 5, 1)
this u v w in agents are (4, 5, 0)
this u v w in agents are (4, 4, 0)
this u v w in agents are (4, 3, 0)
this u v w in agents are (4, 2, 0)
this u v w in agents are (4, 1, 0)
this u v w in agents are (5, 0, 1)
this u v w in agents are (5, 1, 1)
this u v w in agents are (5, 2, 1)
this u v w in agents are (5, 3, 1)
this u v w in agents are (5, 4, 1)
this u v w in agents are (5, 5, 1)
this u v w in agents are (5, 5, 0)
this u v w in agents are (5, 4, 0)
this u v w in agents are (5, 3, 0)
this u v w in agents are (5, 2, 0)
this u v w in agents are (5, 1, 0)
this u v w in agents are (5, 0, 0)
this u v w in agents are (4, 0, 0)
this u v w in agents are (3, 0, 0)
this u v w in agents are (2, 0, 0)
this u v w in agents are (1, 0, 0)
this u v w in agents are (0, 0, 0)
this list_of_i is [0, 1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 33, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60]
this x y z in target_agents is (0, 0, 0)
this u v w in agents are (0, 0, 1)
this u v w in agents are (0, 1, 1)
this u v w in agents are (0, 2, 1)
this u v w in agents are (0, 3, 1)
this u v w in agents are (0, 4, 1)
this u v w in agents are (0, 5, 1)
this u v w in agents are (0, 5, 0)
this u v w in agents are (0, 4, 0)
this u v w in agents are (0, 3, 0)
this u v w in agents are (0, 2, 0)
this u v w in agents are (0, 1, 0)
this u v w in agents are (1, 0, 1)
this u v w in agents are (1, 1, 1)
this u v w in agents are (1, 2, 1)
this u v w in agents are (1, 3, 1)
this u v w in agents are (1, 4, 1)
this u v w in agents are (1, 5, 1)
this u v w in agents are (1, 5, 0)
this u v w in agents are (1, 4, 0)
this u v w in agents are (1, 3, 0)
this u v w in agents are (1, 2, 0)
this u v w in agents are (1, 1, 0)
this u v w in agents are (2, 0, 1)
this u v w in agents are (2, 1, 1)
this u v w in agents are (2, 2, 1)
this u v w in agents are (2, 3, 1)
this u v w in agents are (2, 4, 1)
this u v w in agents are (2, 5, 1)
this u v w in agents are (2, 5, 0)
this u v w in agents are (2, 4, 0)
this u v w in agents are (2, 3, 0)
this u v w in agents are (2, 2, 0)
this u v w in agents are (2, 1, 0)
this u v w in agents are (3, 0, 1)
this u v w in agents are (3, 1, 1)
this u v w in agents are (3, 2, 1)
this u v w in agents are (3, 3, 1)
this u v w in agents are (3, 4, 1)
this u v w in agents are (3, 5, 1)
this u v w in agents are (3, 5, 0)
this u v w in agents are (3, 4, 0)
this u v w in agents are (3, 3, 0)
this u v w in agents are (3, 2, 0)
this u v w in agents are (3, 1, 0)
this u v w in agents are (4, 0, 1)
this u v w in agents are (4, 1, 1)
this u v w in agents are (4, 2, 1)
this u v w in agents are (4, 3, 1)
this u v w in agents are (4, 4, 1)
this u v w in agents are (4, 5, 1)
this u v w in agents are (4, 5, 0)
this u v w in agents are (4, 4, 0)
this u v w in agents are (4, 3, 0)
this u v w in agents are (4, 2, 0)
this u v w in agents are (4, 1, 0)
this u v w in agents are (5, 0, 1)
this u v w in agents are (5, 1, 1)
this u v w in agents are (5, 2, 1)
this u v w in agents are (5, 3, 1)
this u v w in agents are (5, 4, 1)
this u v w in agents are (5, 5, 1)
this u v w in agents are (5, 5, 0)
this u v w in agents are (5, 4, 0)
this u v w in agents are (5, 3, 0)
this u v w in agents are (5, 2, 0)
this u v w in agents are (5, 1, 0)
this u v w in agents are (5, 0, 0)
this u v w in agents are (4, 0, 0)
this u v w in agents are (3, 0, 0)
this u v w in agents are (2, 0, 0)
this u v w in agents are (1, 0, 0)
this u v w in agents are (0, 0, 0)
this list_of_i is [6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71]
t_groups will be {1: [0, 1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 33, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60], 0: [6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71]}
the path from spare to agent is [(0, 0, 0)]
the path from spare to agent is [(0, 0, 0), (0, 0, 1)]
are we getting at the start of the brick?
did we pass t == b+1?
i in range is
6
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 2, 2), 3: (0, 3, 2), 4: (0, 4, 2), 5: (0, 5, 2), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 2), 12: (1, 1, 2), 13: (1, 2, 2), 14: (1, 3, 2), 15: (1, 4, 2), 16: (1, 5, 2), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 2), 23: (2, 1, 2), 24: (2, 2, 2), 25: (2, 3, 2), 26: (2, 4, 2), 27: (2, 5, 2), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 2), 34: (3, 1, 2), 35: (3, 2, 2), 36: (3, 3, 2), 37: (3, 4, 2), 38: (3, 5, 2), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 2), 45: (4, 1, 2), 46: (4, 2, 2), 47: (4, 3, 2), 48: (4, 4, 2), 49: (4, 5, 2), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 2), 56: (5, 1, 2), 57: (5, 2, 2), 58: (5, 3, 2), 59: (5, 4, 2), 60: (5, 5, 2), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 0, 1)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 2, 3), 3: (0, 3, 3), 4: (0, 4, 3), 5: (0, 5, 3), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 3), 12: (1, 1, 3), 13: (1, 2, 3), 14: (1, 3, 3), 15: (1, 4, 3), 16: (1, 5, 3), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 3), 23: (2, 1, 3), 24: (2, 2, 3), 25: (2, 3, 3), 26: (2, 4, 3), 27: (2, 5, 3), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 3), 34: (3, 1, 3), 35: (3, 2, 3), 36: (3, 3, 3), 37: (3, 4, 3), 38: (3, 5, 3), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 3), 45: (4, 1, 3), 46: (4, 2, 3), 47: (4, 3, 3), 48: (4, 4, 3), 49: (4, 5, 3), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 3), 56: (5, 1, 3), 57: (5, 2, 3), 58: (5, 3, 3), 59: (5, 4, 3), 60: (5, 5, 3), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 0, 2)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 4), 1: (0, 1, 4), 2: (0, 2, 4), 3: (0, 3, 4), 4: (0, 4, 4), 5: (0, 5, 4), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 4), 12: (1, 1, 4), 13: (1, 2, 4), 14: (1, 3, 4), 15: (1, 4, 4), 16: (1, 5, 4), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 4), 23: (2, 1, 4), 24: (2, 2, 4), 25: (2, 3, 4), 26: (2, 4, 4), 27: (2, 5, 4), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 4), 34: (3, 1, 4), 35: (3, 2, 4), 36: (3, 3, 4), 37: (3, 4, 4), 38: (3, 5, 4), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 4), 45: (4, 1, 4), 46: (4, 2, 4), 47: (4, 3, 4), 48: (4, 4, 4), 49: (4, 5, 4), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 4), 56: (5, 1, 4), 57: (5, 2, 4), 58: (5, 3, 4), 59: (5, 4, 4), 60: (5, 5, 4), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 0, 3)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 5), 1: (0, 1, 5), 2: (0, 2, 5), 3: (0, 3, 5), 4: (0, 4, 5), 5: (0, 5, 5), 6: (0, 5, 0), 7: (0, 4, 0), 8: (0, 3, 0), 9: (0, 2, 0), 10: (0, 1, 0), 11: (1, 0, 5), 12: (1, 1, 5), 13: (1, 2, 5), 14: (1, 3, 5), 15: (1, 4, 5), 16: (1, 5, 5), 17: (1, 5, 0), 18: (1, 4, 0), 19: (1, 3, 0), 20: (1, 2, 0), 21: (1, 1, 0), 22: (2, 0, 5), 23: (2, 1, 5), 24: (2, 2, 5), 25: (2, 3, 5), 26: (2, 4, 5), 27: (2, 5, 5), 28: (2, 5, 0), 29: (2, 4, 0), 30: (2, 3, 0), 31: (2, 2, 0), 32: (2, 1, 0), 33: (3, 0, 5), 34: (3, 1, 5), 35: (3, 2, 5), 36: (3, 3, 5), 37: (3, 4, 5), 38: (3, 5, 5), 39: (3, 5, 0), 40: (3, 4, 0), 41: (3, 3, 0), 42: (3, 2, 0), 43: (3, 1, 0), 44: (4, 0, 5), 45: (4, 1, 5), 46: (4, 2, 5), 47: (4, 3, 5), 48: (4, 4, 5), 49: (4, 5, 5), 50: (4, 5, 0), 51: (4, 4, 0), 52: (4, 3, 0), 53: (4, 2, 0), 54: (4, 1, 0), 55: (5, 0, 5), 56: (5, 1, 5), 57: (5, 2, 5), 58: (5, 3, 5), 59: (5, 4, 5), 60: (5, 5, 5), 61: (5, 5, 0), 62: (5, 4, 0), 63: (5, 3, 0), 64: (5, 2, 0), 65: (5, 1, 0), 66: (5, 0, 0), 67: (4, 0, 0), 68: (3, 0, 0), 69: (2, 0, 0), 70: (1, 0, 0), 71: (0, 0, 0)}
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 0, 4)}
72
no grey nodes remain
after init is 396
tinit is 396
tmoves is 544
move counted is 544
move counter at starting position is 0
dimensions are the following: [6, 6, 6]
Graph with 216 nodes and 648 edges
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (0, 3, 4), (0, 3, 5), (0, 4, 0), (0, 4, 1), (0, 4, 2), (0, 4, 3), (0, 4, 4), (0, 4, 5), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 3), (0, 5, 4), (0, 5, 5), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 0), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 4, 5), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 3), (1, 5, 4), (1, 5, 5), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 0), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (2, 4, 5), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 3), (2, 5, 4), (2, 5, 5), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 0, 4), (3, 0, 5), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 1, 5), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 2, 5), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 0), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (3, 4, 5), (3, 5, 0), (3, 5, 1), (3, 5, 2), (3, 5, 3), (3, 5, 4), (3, 5, 5), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 2, 0), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 2, 5), (4, 3, 0), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 3, 5), (4, 4, 0), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4), (4, 4, 5), (4, 5, 0), (4, 5, 1), (4, 5, 2), (4, 5, 3), (4, 5, 4), (4, 5, 5), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 0), (5, 3, 1), (5, 3, 2), (5, 3, 3), (5, 3, 4), (5, 3, 5), (5, 4, 0), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 3), (5, 5, 4), (5, 5, 5)]
list of C nodes
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1), (2, 0, 0), (2, 0, 1), (2, 1, 0), (2, 1, 1), (3, 0, 0), (3, 0, 1), (3, 1, 0), (3, 1, 1), (4, 0, 0), (4, 0, 1), (4, 1, 0), (4, 1, 1), (5, 0, 0), (5, 0, 1), (5, 1, 0), (5, 1, 1)]
{(0, 0, 0): 'grey', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'grey', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
(x,y, z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y, z) is:
(0, 0, 1)
[(0, 0, 0), (0, 0, 1)]
(x,y, z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y, z) is:
(0, 1, 1)
[(0, 0, 0), (0, 1, 0), (0, 1, 1)]
(x,y, z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y, z) is:
(1, 0, 1)
[(0, 0, 0), (1, 0, 0), (1, 0, 1)]
(x,y, z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
(x,y, z) is:
(1, 1, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]
(x,y, z) is:
(2, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0)]
(x,y, z) is:
(2, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 1)]
(x,y, z) is:
(2, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)]
(x,y, z) is:
(2, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 1, 1)]
(x,y, z) is:
(3, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]
(x,y, z) is:
(3, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 1)]
(x,y, z) is:
(3, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)]
(x,y, z) is:
(3, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 1, 1)]
(x,y, z) is:
(4, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)]
(x,y, z) is:
(4, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1)]
(x,y, z) is:
(4, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)]
(x,y, z) is:
(4, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 1, 1)]
(x,y, z) is:
(5, 0, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)]
(x,y, z) is:
(5, 0, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 0, 1)]
(x,y, z) is:
(5, 1, 0)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)]
(x,y, z) is:
(5, 1, 1)
[(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 1, 1)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (0, 1, 0), (0, 1, 1)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 0, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (2, 1, 0), (2, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (3, 1, 0), (3, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (4, 1, 0), (4, 1, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 0, 1)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0)], [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (5, 1, 0), (5, 1, 1)]]
theoretical_nr_moves is 308
agent_which is 20
agent_when is 1000000
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
24
edges_of_v_in_P
[[(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[1, 2, 20]
i is:
0
list of agents on v
[0]
v is
(0, 0, 0)
i is:
1
list of agents on v
[1, 2]
v is
(0, 0, 0)
i is:
2
list of agents on v
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
v is
(0, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (1, 0, 0), 8: (1, 0, 0), 9: (1, 0, 0), 10: (1, 0, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (1, 0, 0), 8: (1, 0, 0), 9: (1, 0, 0), 10: (1, 0, 0), 11: (1, 0, 0), 12: (1, 0, 0), 13: (1, 0, 0), 14: (1, 0, 0), 15: (1, 0, 0), 16: (1, 0, 0), 17: (1, 0, 0), 18: (1, 0, 0), 19: (1, 0, 0), 20: (1, 0, 0), 21: (1, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 0): [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], (0, 0, 0): [23]}
v is:
(1, 0, 0)
truest
[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
20
edges_of_v_in_P
[[(1, 0, 0), (1, 0, 1)], [(1, 0, 0), (1, 1, 0)], [(1, 0, 0), (2, 0, 0)]]
p is:
[1, 2, 16]
i is:
0
list of agents on v
[3]
v is
(1, 0, 0)
i is:
1
list of agents on v
[4, 5]
v is
(1, 0, 0)
i is:
2
list of agents on v
[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
v is
(1, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 0), 7: (2, 0, 0), 8: (2, 0, 0), 9: (2, 0, 0), 10: (2, 0, 0), 11: (2, 0, 0), 12: (2, 0, 0), 13: (2, 0, 0), 14: (2, 0, 0), 15: (2, 0, 0), 16: (2, 0, 0), 17: (2, 0, 0), 18: (2, 0, 0), 19: (2, 0, 0), 20: (2, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 0), 7: (2, 0, 0), 8: (2, 0, 0), 9: (2, 0, 0), 10: (2, 0, 0), 11: (2, 0, 0), 12: (2, 0, 0), 13: (2, 0, 0), 14: (2, 0, 0), 15: (2, 0, 0), 16: (2, 0, 0), 17: (2, 0, 0), 18: (2, 0, 0), 19: (2, 0, 0), 20: (2, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 0): [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(2, 0, 0)
truest
[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
16
edges_of_v_in_P
[[(2, 0, 0), (2, 0, 1)], [(2, 0, 0), (2, 1, 0)], [(2, 0, 0), (3, 0, 0)]]
p is:
[1, 2, 12]
i is:
0
list of agents on v
[6]
v is
(2, 0, 0)
i is:
1
list of agents on v
[7, 8]
v is
(2, 0, 0)
i is:
2
list of agents on v
[9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
v is
(2, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 0), 10: (3, 0, 0), 11: (3, 0, 0), 12: (3, 0, 0), 13: (3, 0, 0), 14: (3, 0, 0), 15: (3, 0, 0), 16: (3, 0, 0), 17: (3, 0, 0), 18: (3, 0, 0), 19: (3, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (2, 0, 1), (1, 0, 0), (2, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 0), 10: (3, 0, 0), 11: (3, 0, 0), 12: (3, 0, 0), 13: (3, 0, 0), 14: (3, 0, 0), 15: (3, 0, 0), 16: (3, 0, 0), 17: (3, 0, 0), 18: (3, 0, 0), 19: (3, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 0): [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(3, 0, 0)
truest
[9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
12
edges_of_v_in_P
[[(3, 0, 0), (3, 0, 1)], [(3, 0, 0), (3, 1, 0)], [(3, 0, 0), (4, 0, 0)]]
p is:
[1, 2, 8]
i is:
0
list of agents on v
[9]
v is
(3, 0, 0)
i is:
1
list of agents on v
[10, 11]
v is
(3, 0, 0)
i is:
2
list of agents on v
[12, 13, 14, 15, 16, 17, 18, 19]
v is
(3, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 0), 13: (4, 0, 0), 14: (4, 0, 0), 15: (4, 0, 0), 16: (4, 0, 0), 17: (4, 0, 0), 18: (4, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (3, 0, 0), (0, 0, 0), (3, 1, 0), (4, 0, 0), (2, 0, 1), (1, 0, 0), (2, 0, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 0), 13: (4, 0, 0), 14: (4, 0, 0), 15: (4, 0, 0), 16: (4, 0, 0), 17: (4, 0, 0), 18: (4, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 0): [12, 13, 14, 15, 16, 17, 18, 19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(4, 0, 0)
truest
[12, 13, 14, 15, 16, 17, 18, 19]
8
edges_of_v_in_P
[[(4, 0, 0), (4, 0, 1)], [(4, 0, 0), (4, 1, 0)], [(4, 0, 0), (5, 0, 0)]]
p is:
[1, 2, 4]
i is:
0
list of agents on v
[12]
v is
(4, 0, 0)
i is:
1
list of agents on v
[13, 14]
v is
(4, 0, 0)
i is:
2
list of agents on v
[15, 16, 17, 18]
v is
(4, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 0), 16: (5, 0, 0), 17: (5, 0, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
5
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (4, 0, 1), (3, 0, 0), (3, 1, 0), (0, 0, 0), (4, 0, 0), (2, 0, 1), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 0), 16: (5, 0, 0), 17: (5, 0, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 0): [15, 16, 17, 18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(5, 0, 0)
truest
[15, 16, 17, 18]
4
edges_of_v_in_P
[[(5, 0, 0), (5, 0, 1)], [(5, 0, 0), (5, 1, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[15]
v is
(5, 0, 0)
i is:
1
list of agents on v
[16, 17]
v is
(5, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
6
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (2, 1, 0), (4, 0, 1), (3, 0, 0), (3, 1, 0), (0, 0, 0), (5, 0, 1), (4, 0, 0), (2, 0, 1), (1, 0, 0), (4, 1, 0), (5, 0, 0), (2, 0, 0), (5, 1, 0), (3, 0, 1), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(0, 1, 0)
truest
[1, 2]
2
edges_of_v_in_P
[[(0, 1, 0), (0, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[1]
v is
(0, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
7
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(1, 1, 0)
truest
[4, 5]
2
edges_of_v_in_P
[[(1, 1, 0), (1, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[4]
v is
(1, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
8
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 0), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 0), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 1): [4], (1, 1, 0): [5], (2, 0, 1): [6], (2, 1, 0): [7, 8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(2, 1, 0)
truest
[7, 8]
2
edges_of_v_in_P
[[(2, 1, 0), (2, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[7]
v is
(2, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
9
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 1, 0), (3, 0, 1), (3, 1, 0), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (2, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 0), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 1): [4], (1, 1, 0): [5], (2, 0, 1): [6], (2, 1, 1): [7], (2, 1, 0): [8], (3, 0, 1): [9], (3, 1, 0): [10, 11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(3, 1, 0)
truest
[10, 11]
2
edges_of_v_in_P
[[(3, 1, 0), (3, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[10]
v is
(3, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
10
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 1, 0), (4, 0, 1), (4, 1, 0), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (3, 1, 1), (0, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (2, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 0), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 1): [4], (1, 1, 0): [5], (2, 0, 1): [6], (2, 1, 1): [7], (2, 1, 0): [8], (3, 0, 1): [9], (3, 1, 1): [10], (3, 1, 0): [11], (4, 0, 1): [12], (4, 1, 0): [13, 14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(4, 1, 0)
truest
[13, 14]
2
edges_of_v_in_P
[[(4, 1, 0), (4, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[13]
v is
(4, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
11
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 1, 0), (5, 0, 1), (5, 1, 0), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (3, 1, 1), (0, 0, 0), (4, 1, 1), (1, 0, 0), (2, 0, 0), (0, 1, 1), (2, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 0), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 1): [4], (1, 1, 0): [5], (2, 0, 1): [6], (2, 1, 1): [7], (2, 1, 0): [8], (3, 0, 1): [9], (3, 1, 1): [10], (3, 1, 0): [11], (4, 0, 1): [12], (4, 1, 1): [13], (4, 1, 0): [14], (5, 0, 1): [15], (5, 1, 0): [16, 17], (5, 0, 0): [18], (4, 0, 0): [19], (3, 0, 0): [20], (2, 0, 0): [21], (1, 0, 0): [22], (0, 0, 0): [23]}
v is:
(5, 1, 0)
truest
[16, 17]
2
edges_of_v_in_P
[[(5, 1, 0), (5, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[16]
v is
(5, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 1), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'black', (2, 0, 1): 'black', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'black', (2, 1, 1): 'black', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'black', (3, 0, 1): 'black', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'black', (3, 1, 1): 'black', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'black', (4, 0, 1): 'black', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'black', (4, 1, 1): 'black', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'black', (5, 0, 1): 'black', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'black', (5, 1, 1): 'black', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
12
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (2, 0, 1), (2, 1, 1), (2, 1, 0), (3, 0, 1), (3, 1, 1), (3, 1, 0), (4, 0, 1), (4, 1, 1), (4, 1, 0), (5, 0, 1), (5, 1, 1), (5, 1, 0), (5, 0, 0), (4, 0, 0), (3, 0, 0), (2, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(0, 1, 0), (2, 1, 0), (4, 0, 1), (5, 0, 1), (0, 0, 1), (1, 0, 1), (1, 1, 0), (3, 0, 0), (4, 0, 0), (2, 0, 1), (5, 0, 0), (3, 1, 1), (0, 0, 0), (4, 1, 1), (1, 0, 0), (5, 1, 1), (2, 0, 0), (0, 1, 1), (2, 1, 1), (3, 1, 0), (4, 1, 0), (5, 1, 0), (3, 0, 1), (1, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 1), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
agents at the end of INITIAL SET
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (2, 0, 1), 7: (2, 1, 1), 8: (2, 1, 0), 9: (3, 0, 1), 10: (3, 1, 1), 11: (3, 1, 0), 12: (4, 0, 1), 13: (4, 1, 1), 14: (4, 1, 0), 15: (5, 0, 1), 16: (5, 1, 1), 17: (5, 1, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
target_agents are {2: 0, 3: 1, 1: 2, 0: 23}
this x y z in target_agents is (0, 0, 1)
this u v w in agents are (0, 0, 1)
this u v w in agents are (0, 1, 1)
this u v w in agents are (0, 1, 0)
this u v w in agents are (1, 0, 1)
this u v w in agents are (1, 1, 1)
this u v w in agents are (1, 1, 0)
this u v w in agents are (2, 0, 1)
this u v w in agents are (2, 1, 1)
this u v w in agents are (2, 1, 0)
this u v w in agents are (3, 0, 1)
this u v w in agents are (3, 1, 1)
this u v w in agents are (3, 1, 0)
this u v w in agents are (4, 0, 1)
this u v w in agents are (4, 1, 1)
this u v w in agents are (4, 1, 0)
this u v w in agents are (5, 0, 1)
this u v w in agents are (5, 1, 1)
this u v w in agents are (5, 1, 0)
this u v w in agents are (5, 0, 0)
this u v w in agents are (4, 0, 0)
this u v w in agents are (3, 0, 0)
this u v w in agents are (2, 0, 0)
this u v w in agents are (1, 0, 0)
this u v w in agents are (0, 0, 0)
this list_of_i is [0, 3, 6, 9, 12, 15]
this x y z in target_agents is (0, 1, 1)
this u v w in agents are (0, 0, 1)
this u v w in agents are (0, 1, 1)
this u v w in agents are (0, 1, 0)
this u v w in agents are (1, 0, 1)
this u v w in agents are (1, 1, 1)
this u v w in agents are (1, 1, 0)
this u v w in agents are (2, 0, 1)
this u v w in agents are (2, 1, 1)
this u v w in agents are (2, 1, 0)
this u v w in agents are (3, 0, 1)
this u v w in agents are (3, 1, 1)
this u v w in agents are (3, 1, 0)
this u v w in agents are (4, 0, 1)
this u v w in agents are (4, 1, 1)
this u v w in agents are (4, 1, 0)
this u v w in agents are (5, 0, 1)
this u v w in agents are (5, 1, 1)
this u v w in agents are (5, 1, 0)
this u v w in agents are (5, 0, 0)
this u v w in agents are (4, 0, 0)
this u v w in agents are (3, 0, 0)
this u v w in agents are (2, 0, 0)
this u v w in agents are (1, 0, 0)
this u v w in agents are (0, 0, 0)
this list_of_i is [1, 4, 7, 10, 13, 16]
this x y z in target_agents is (0, 1, 0)
this u v w in agents are (0, 0, 1)
this u v w in agents are (0, 1, 1)
this u v w in agents are (0, 1, 0)
this u v w in agents are (1, 0, 1)
this u v w in agents are (1, 1, 1)
this u v w in agents are (1, 1, 0)
this u v w in agents are (2, 0, 1)
this u v w in agents are (2, 1, 1)
this u v w in agents are (2, 1, 0)
this u v w in agents are (3, 0, 1)
this u v w in agents are (3, 1, 1)
this u v w in agents are (3, 1, 0)
this u v w in agents are (4, 0, 1)
this u v w in agents are (4, 1, 1)
this u v w in agents are (4, 1, 0)
this u v w in agents are (5, 0, 1)
this u v w in agents are (5, 1, 1)
this u v w in agents are (5, 1, 0)
this u v w in agents are (5, 0, 0)
this u v w in agents are (4, 0, 0)
this u v w in agents are (3, 0, 0)
this u v w in agents are (2, 0, 0)
this u v w in agents are (1, 0, 0)
this u v w in agents are (0, 0, 0)
this list_of_i is [2, 5, 8, 11, 14, 17]
this x y z in target_agents is (0, 0, 0)
this u v w in agents are (0, 0, 1)
this u v w in agents are (0, 1, 1)
this u v w in agents are (0, 1, 0)
this u v w in agents are (1, 0, 1)
this u v w in agents are (1, 1, 1)
this u v w in agents are (1, 1, 0)
this u v w in agents are (2, 0, 1)
this u v w in agents are (2, 1, 1)
this u v w in agents are (2, 1, 0)
this u v w in agents are (3, 0, 1)
this u v w in agents are (3, 1, 1)
this u v w in agents are (3, 1, 0)
this u v w in agents are (4, 0, 1)
this u v w in agents are (4, 1, 1)
this u v w in agents are (4, 1, 0)
this u v w in agents are (5, 0, 1)
this u v w in agents are (5, 1, 1)
this u v w in agents are (5, 1, 0)
this u v w in agents are (5, 0, 0)
this u v w in agents are (4, 0, 0)
this u v w in agents are (3, 0, 0)
this u v w in agents are (2, 0, 0)
this u v w in agents are (1, 0, 0)
this u v w in agents are (0, 0, 0)
this list_of_i is [18, 19, 20, 21, 22, 23]
t_groups will be {2: [0, 3, 6, 9, 12, 15], 3: [1, 4, 7, 10, 13, 16], 1: [2, 5, 8, 11, 14, 17], 0: [18, 19, 20, 21, 22, 23]}
the path from spare to agent is [(0, 0, 0)]
the path from spare to agent is [(0, 0, 0), (0, 1, 0)]
the path from spare to agent is [(0, 0, 0), (0, 0, 1)]
the path from spare to agent is [(0, 0, 0), (0, 0, 1), (0, 1, 1)]
spare agent 3 moved to (0, 0, 1)
are we getting at the start of the brick?
range of the o is 2
o currently is 0
are we getting at the start of the brick?
did we pass t == b+1?
i in range is
6
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 0, 1), 4: (1, 2, 1), 5: (1, 2, 0), 6: (2, 0, 1), 7: (2, 2, 1), 8: (2, 2, 0), 9: (3, 0, 1), 10: (3, 2, 1), 11: (3, 2, 0), 12: (4, 0, 1), 13: (4, 2, 1), 14: (4, 2, 0), 15: (5, 0, 1), 16: (5, 2, 1), 17: (5, 2, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 1, 0), 2: (0, 0, 0), 3: (0, 1, 1)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (1, 0, 1), 4: (1, 3, 1), 5: (1, 3, 0), 6: (2, 0, 1), 7: (2, 3, 1), 8: (2, 3, 0), 9: (3, 0, 1), 10: (3, 3, 1), 11: (3, 3, 0), 12: (4, 0, 1), 13: (4, 3, 1), 14: (4, 3, 0), 15: (5, 0, 1), 16: (5, 3, 1), 17: (5, 3, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 2, 0), 2: (0, 0, 0), 3: (0, 2, 1)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 1), 1: (0, 4, 1), 2: (0, 4, 0), 3: (1, 0, 1), 4: (1, 4, 1), 5: (1, 4, 0), 6: (2, 0, 1), 7: (2, 4, 1), 8: (2, 4, 0), 9: (3, 0, 1), 10: (3, 4, 1), 11: (3, 4, 0), 12: (4, 0, 1), 13: (4, 4, 1), 14: (4, 4, 0), 15: (5, 0, 1), 16: (5, 4, 1), 17: (5, 4, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 3, 0), 2: (0, 0, 0), 3: (0, 3, 1)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 1), 1: (0, 5, 1), 2: (0, 5, 0), 3: (1, 0, 1), 4: (1, 5, 1), 5: (1, 5, 0), 6: (2, 0, 1), 7: (2, 5, 1), 8: (2, 5, 0), 9: (3, 0, 1), 10: (3, 5, 1), 11: (3, 5, 0), 12: (4, 0, 1), 13: (4, 5, 1), 14: (4, 5, 0), 15: (5, 0, 1), 16: (5, 5, 1), 17: (5, 5, 0), 18: (5, 0, 0), 19: (4, 0, 0), 20: (3, 0, 0), 21: (2, 0, 0), 22: (1, 0, 0), 23: (0, 0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 4, 0), 2: (0, 0, 0), 3: (0, 4, 1)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 5, 0), 2: (0, 0, 1), 3: (0, 5, 1)}
range of the o is 2
o currently is 1
are we getting at the start of the brick?
did we pass t == b+1?
i in range is
6
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 2), 1: (0, 4, 2), 2: (0, 4, 5), 3: (1, 0, 2), 4: (1, 4, 2), 5: (1, 4, 5), 6: (2, 0, 2), 7: (2, 4, 2), 8: (2, 4, 5), 9: (3, 0, 2), 10: (3, 4, 2), 11: (3, 4, 5), 12: (4, 0, 2), 13: (4, 4, 2), 14: (4, 4, 5), 15: (5, 0, 2), 16: (5, 4, 2), 17: (5, 4, 5), 18: (5, 0, 5), 19: (4, 0, 5), 20: (3, 0, 5), 21: (2, 0, 5), 22: (1, 0, 5), 23: (0, 0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 5, 5), 2: (0, 0, 1), 3: (0, 5, 2)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 0, 2), 4: (1, 3, 2), 5: (1, 3, 5), 6: (2, 0, 2), 7: (2, 3, 2), 8: (2, 3, 5), 9: (3, 0, 2), 10: (3, 3, 2), 11: (3, 3, 5), 12: (4, 0, 2), 13: (4, 3, 2), 14: (4, 3, 5), 15: (5, 0, 2), 16: (5, 3, 2), 17: (5, 3, 5), 18: (5, 0, 5), 19: (4, 0, 5), 20: (3, 0, 5), 21: (2, 0, 5), 22: (1, 0, 5), 23: (0, 0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 4, 5), 2: (0, 0, 1), 3: (0, 4, 2)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (1, 0, 2), 4: (1, 2, 2), 5: (1, 2, 5), 6: (2, 0, 2), 7: (2, 2, 2), 8: (2, 2, 5), 9: (3, 0, 2), 10: (3, 2, 2), 11: (3, 2, 5), 12: (4, 0, 2), 13: (4, 2, 2), 14: (4, 2, 5), 15: (5, 0, 2), 16: (5, 2, 2), 17: (5, 2, 5), 18: (5, 0, 5), 19: (4, 0, 5), 20: (3, 0, 5), 21: (2, 0, 5), 22: (1, 0, 5), 23: (0, 0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 3, 5), 2: (0, 0, 1), 3: (0, 3, 2)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 5), 6: (2, 0, 2), 7: (2, 1, 2), 8: (2, 1, 5), 9: (3, 0, 2), 10: (3, 1, 2), 11: (3, 1, 5), 12: (4, 0, 2), 13: (4, 1, 2), 14: (4, 1, 5), 15: (5, 0, 2), 16: (5, 1, 2), 17: (5, 1, 5), 18: (5, 0, 5), 19: (4, 0, 5), 20: (3, 0, 5), 21: (2, 0, 5), 22: (1, 0, 5), 23: (0, 0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 2, 5), 2: (0, 0, 1), 3: (0, 2, 2)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 5), 1: (0, 1, 5), 2: (0, 0, 2), 3: (0, 1, 2)}
range of the o is 2
o currently is 2
are we getting at the start of the brick?
did we pass t == b+1?
i in range is
6
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 0, 3), 4: (1, 2, 3), 5: (1, 2, 4), 6: (2, 0, 3), 7: (2, 2, 3), 8: (2, 2, 4), 9: (3, 0, 3), 10: (3, 2, 3), 11: (3, 2, 4), 12: (4, 0, 3), 13: (4, 2, 3), 14: (4, 2, 4), 15: (5, 0, 3), 16: (5, 2, 3), 17: (5, 2, 4), 18: (5, 0, 4), 19: (4, 0, 4), 20: (3, 0, 4), 21: (2, 0, 4), 22: (1, 0, 4), 23: (0, 0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 5), 1: (0, 1, 4), 2: (0, 0, 2), 3: (0, 1, 3)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (1, 0, 3), 4: (1, 3, 3), 5: (1, 3, 4), 6: (2, 0, 3), 7: (2, 3, 3), 8: (2, 3, 4), 9: (3, 0, 3), 10: (3, 3, 3), 11: (3, 3, 4), 12: (4, 0, 3), 13: (4, 3, 3), 14: (4, 3, 4), 15: (5, 0, 3), 16: (5, 3, 3), 17: (5, 3, 4), 18: (5, 0, 4), 19: (4, 0, 4), 20: (3, 0, 4), 21: (2, 0, 4), 22: (1, 0, 4), 23: (0, 0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 5), 1: (0, 2, 4), 2: (0, 0, 2), 3: (0, 2, 3)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 3), 1: (0, 4, 3), 2: (0, 4, 4), 3: (1, 0, 3), 4: (1, 4, 3), 5: (1, 4, 4), 6: (2, 0, 3), 7: (2, 4, 3), 8: (2, 4, 4), 9: (3, 0, 3), 10: (3, 4, 3), 11: (3, 4, 4), 12: (4, 0, 3), 13: (4, 4, 3), 14: (4, 4, 4), 15: (5, 0, 3), 16: (5, 4, 3), 17: (5, 4, 4), 18: (5, 0, 4), 19: (4, 0, 4), 20: (3, 0, 4), 21: (2, 0, 4), 22: (1, 0, 4), 23: (0, 0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 5), 1: (0, 3, 4), 2: (0, 0, 2), 3: (0, 3, 3)}
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
welp
moved
{0: (0, 0, 3), 1: (0, 5, 3), 2: (0, 5, 4), 3: (1, 0, 3), 4: (1, 5, 3), 5: (1, 5, 4), 6: (2, 0, 3), 7: (2, 5, 3), 8: (2, 5, 4), 9: (3, 0, 3), 10: (3, 5, 3), 11: (3, 5, 4), 12: (4, 0, 3), 13: (4, 5, 3), 14: (4, 5, 4), 15: (5, 0, 3), 16: (5, 5, 3), 17: (5, 5, 4), 18: (5, 0, 4), 19: (4, 0, 4), 20: (3, 0, 4), 21: (2, 0, 4), 22: (1, 0, 4), 23: (0, 0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 5), 1: (0, 4, 4), 2: (0, 0, 2), 3: (0, 4, 3)}
24
no grey nodes remain
after init is 85
tinit is 85
tmoves is 308
move counted is 308
move counter at starting position is 0
dimensions are the following: [6, 6, 6]
Graph with 216 nodes and 648 edges
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (0, 3, 4), (0, 3, 5), (0, 4, 0), (0, 4, 1), (0, 4, 2), (0, 4, 3), (0, 4, 4), (0, 4, 5), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 3), (0, 5, 4), (0, 5, 5), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 0), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 4, 5), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 3), (1, 5, 4), (1, 5, 5), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 0), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (2, 4, 5), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 3), (2, 5, 4), (2, 5, 5), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 0, 4), (3, 0, 5), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 1, 5), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 2, 5), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 0), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (3, 4, 5), (3, 5, 0), (3, 5, 1), (3, 5, 2), (3, 5, 3), (3, 5, 4), (3, 5, 5), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 2, 0), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 2, 5), (4, 3, 0), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 3, 5), (4, 4, 0), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4), (4, 4, 5), (4, 5, 0), (4, 5, 1), (4, 5, 2), (4, 5, 3), (4, 5, 4), (4, 5, 5), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 0), (5, 3, 1), (5, 3, 2), (5, 3, 3), (5, 3, 4), (5, 3, 5), (5, 4, 0), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 3), (5, 5, 4), (5, 5, 5)]
list of C nodes
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]
{(0, 0, 0): 'grey', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'grey', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
(x,y, z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y, z) is:
(0, 0, 1)
[(0, 0, 0), (0, 0, 1)]
(x,y, z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y, z) is:
(0, 1, 1)
[(0, 0, 0), (0, 1, 0), (0, 1, 1)]
(x,y, z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y, z) is:
(1, 0, 1)
[(0, 0, 0), (1, 0, 0), (1, 0, 1)]
(x,y, z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
(x,y, z) is:
(1, 1, 1)
[(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (0, 1, 0), (0, 1, 1)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 0, 1)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]]
theoretical_nr_moves is 432
agent_which is 3
agent_when is 1000000
flipped_agents
{(0, 0, 0): [0, 1, 2, 3, 4, 5, 6, 7]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3, 4, 5, 6, 7]
8
edges_of_v_in_P
[[(0, 0, 0), (0, 0, 1)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[1, 2, 4]
i is:
0
list of agents on v
[0]
v is
(0, 0, 0)
i is:
1
list of agents on v
[1, 2]
v is
(0, 0, 0)
i is:
2
list of agents on v
[3, 4, 5, 6]
v is
(0, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 0, 1), (0, 1, 0)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 0), 4: (1, 0, 0), 5: (1, 0, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 0): [3, 4, 5, 6], (0, 0, 0): [7]}
v is:
(1, 0, 0)
truest
[3, 4, 5, 6]
4
edges_of_v_in_P
[[(1, 0, 0), (1, 0, 1)], [(1, 0, 0), (1, 1, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[3]
v is
(1, 0, 0)
i is:
1
list of agents on v
[4, 5]
v is
(1, 0, 0)
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 0, 1), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (0, 0, 1)}
{0: (0, 0, 1), 1: (0, 1, 0), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 0): [1, 2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (1, 0, 0): [6], (0, 0, 0): [7]}
v is:
(0, 1, 0)
truest
[1, 2]
2
edges_of_v_in_P
[[(0, 1, 0), (0, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[1]
v is
(0, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
3
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 0), (1, 1, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (0, 0, 1), (0, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 0), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
flipped_agents
{(0, 0, 1): [0], (0, 1, 1): [1], (0, 1, 0): [2], (1, 0, 1): [3], (1, 1, 0): [4, 5], (1, 0, 0): [6], (0, 0, 0): [7]}
v is:
(1, 1, 0)
truest
[4, 5]
2
edges_of_v_in_P
[[(1, 1, 0), (1, 1, 1)]]
p is:
[1]
i is:
0
list of agents on v
[4]
v is
(1, 1, 0)
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'black', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'black', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'black', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'black', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
4
values
[(0, 0, 1), (0, 1, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1), (1, 1, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 1), (1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 0, 0), (0, 0, 1), (1, 1, 1), (0, 1, 1)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
agents at the end of INITIAL SET
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
the path from spare to agent is [(0, 0, 0), (0, 0, 1)]
the path from spare to agent is [(0, 0, 0), (0, 0, 1), (0, 1, 1)]
spare agent 1 moved to (0, 0, 1)
the path from spare to agent is [(0, 0, 0), (0, 1, 0)]
the path from spare to agent is [(0, 0, 0), (0, 0, 1), (1, 0, 1)]
spare agent 3 moved to (0, 0, 1)
the path from spare to agent is [(0, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 1)]
spare agent 4 moved to (1, 0, 0)
spare agent 4 moved to (1, 1, 0)
the path from spare to agent is [(0, 0, 0), (0, 1, 0), (1, 1, 0)]
spare agent 5 moved to (0, 1, 0)
the path from spare to agent is [(0, 0, 0), (1, 0, 0)]
the path from spare to agent is [(0, 0, 0)]
agentstart is {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
spareagentstart is {0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 0, 0), 3: (0, 0, 1), 4: (1, 1, 0), 5: (0, 1, 0), 6: (0, 0, 0), 7: (0, 0, 0)}
target_agents are {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}
ITERCUBE s == 6-m commencing
value of t is 3
main else is happening
calling CUBE recursively for t-1
agebts befir cakkubg CUBE recursively {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
value of t is 2
cube is starting
welp
welp
welp
welp
agents are {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (2, 0, 1), 4: (2, 1, 1), 5: (2, 1, 0), 6: (2, 0, 0), 7: (0, 0, 0)}
move_counter is 21
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (2, 0, 1), 4: (2, 1, 1), 5: (2, 1, 0), 6: (2, 0, 0), 7: (0, 0, 0)}
previous_agents are {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 0, 0), 3: (1, 0, 1), 4: (1, 1, 1), 5: (1, 1, 0), 6: (1, 0, 0), 7: (0, 0, 0)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (2, 0, 1), 4: (2, 1, 1), 5: (2, 1, 0), 6: (2, 0, 0), 7: (0, 0, 0)}
welp
welp
welp
welp
agents are {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (3, 0, 1), 4: (3, 1, 1), 5: (3, 1, 0), 6: (3, 0, 0), 7: (0, 0, 0)}
move_counter is 29
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (3, 0, 1), 4: (3, 1, 1), 5: (3, 1, 0), 6: (3, 0, 0), 7: (0, 0, 0)}
previous_agents are {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (2, 0, 1), 4: (2, 1, 1), 5: (2, 1, 0), 6: (2, 0, 0), 7: (0, 0, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 0, 0), 3: (2, 0, 1), 4: (2, 1, 1), 5: (2, 1, 0), 6: (2, 0, 0), 7: (0, 0, 0)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (3, 0, 1), 4: (3, 1, 1), 5: (3, 1, 0), 6: (3, 0, 0), 7: (0, 0, 0)}
welp
welp
welp
welp
agents are {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (4, 0, 1), 4: (4, 1, 1), 5: (4, 1, 0), 6: (4, 0, 0), 7: (0, 0, 0)}
move_counter is 37
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (4, 0, 1), 4: (4, 1, 1), 5: (4, 1, 0), 6: (4, 0, 0), 7: (0, 0, 0)}
previous_agents are {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (3, 0, 1), 4: (3, 1, 1), 5: (3, 1, 0), 6: (3, 0, 0), 7: (0, 0, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 0, 0), 3: (3, 0, 1), 4: (3, 1, 1), 5: (3, 1, 0), 6: (3, 0, 0), 7: (0, 0, 0)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (4, 0, 1), 4: (4, 1, 1), 5: (4, 1, 0), 6: (4, 0, 0), 7: (0, 0, 0)}
welp
welp
welp
welp
agents are {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (5, 0, 1), 4: (5, 1, 1), 5: (5, 1, 0), 6: (5, 0, 0), 7: (0, 0, 0)}
move_counter is 45
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (5, 0, 1), 4: (5, 1, 1), 5: (5, 1, 0), 6: (5, 0, 0), 7: (0, 0, 0)}
previous_agents are {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (4, 0, 1), 4: (4, 1, 1), 5: (4, 1, 0), 6: (4, 0, 0), 7: (0, 0, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 0, 0), 3: (4, 0, 1), 4: (4, 1, 1), 5: (4, 1, 0), 6: (4, 0, 0), 7: (0, 0, 0)}
{0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (5, 0, 1), 4: (5, 1, 1), 5: (5, 1, 0), 6: (5, 0, 0), 7: (0, 0, 0)}
value of y is -1
welp
welp
welp
welp
agents are {0: (0, 5, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (5, 5, 1), 4: (5, 1, 1), 5: (5, 1, 0), 6: (5, 5, 0), 7: (0, 5, 0)}
move_counter is 53
welp
welp
welp
welp
agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (5, 5, 1), 4: (5, 2, 1), 5: (5, 2, 0), 6: (5, 5, 0), 7: (0, 5, 0)}
move_counter is 57
agents are at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (5, 5, 1), 4: (5, 2, 1), 5: (5, 2, 0), 6: (5, 5, 0), 7: (0, 5, 0)}
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (5, 0, 1), 4: (5, 1, 1), 5: (5, 1, 0), 6: (5, 0, 0), 7: (0, 0, 0)}
if happened (moving along second dimension)
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (5, 5, 1), 4: (5, 2, 1), 5: (5, 2, 0), 6: (5, 5, 0), 7: (0, 5, 0)}
we finshed
welp
welp
welp
welp
agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (4, 5, 1), 4: (4, 2, 1), 5: (4, 2, 0), 6: (4, 5, 0), 7: (0, 5, 0)}
move_counter is 68
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (4, 5, 1), 4: (4, 2, 1), 5: (4, 2, 0), 6: (4, 5, 0), 7: (0, 5, 0)}
previous_agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (5, 5, 1), 4: (5, 2, 1), 5: (5, 2, 0), 6: (5, 5, 0), 7: (0, 5, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (5, 5, 1), 4: (5, 2, 1), 5: (5, 2, 0), 6: (5, 5, 0), 7: (0, 0, 0)}
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (4, 5, 1), 4: (4, 2, 1), 5: (4, 2, 0), 6: (4, 5, 0), 7: (0, 5, 0)}
welp
welp
welp
welp
agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (3, 5, 1), 4: (3, 2, 1), 5: (3, 2, 0), 6: (3, 5, 0), 7: (0, 5, 0)}
move_counter is 76
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (3, 5, 1), 4: (3, 2, 1), 5: (3, 2, 0), 6: (3, 5, 0), 7: (0, 5, 0)}
previous_agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (4, 5, 1), 4: (4, 2, 1), 5: (4, 2, 0), 6: (4, 5, 0), 7: (0, 5, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (4, 5, 1), 4: (4, 2, 1), 5: (4, 2, 0), 6: (4, 5, 0), 7: (0, 0, 0)}
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (3, 5, 1), 4: (3, 2, 1), 5: (3, 2, 0), 6: (3, 5, 0), 7: (0, 5, 0)}
welp
welp
welp
welp
agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (2, 5, 1), 4: (2, 2, 1), 5: (2, 2, 0), 6: (2, 5, 0), 7: (0, 5, 0)}
move_counter is 84
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (2, 5, 1), 4: (2, 2, 1), 5: (2, 2, 0), 6: (2, 5, 0), 7: (0, 5, 0)}
previous_agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (3, 5, 1), 4: (3, 2, 1), 5: (3, 2, 0), 6: (3, 5, 0), 7: (0, 5, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (3, 5, 1), 4: (3, 2, 1), 5: (3, 2, 0), 6: (3, 5, 0), 7: (0, 0, 0)}
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (2, 5, 1), 4: (2, 2, 1), 5: (2, 2, 0), 6: (2, 5, 0), 7: (0, 5, 0)}
welp
welp
welp
welp
agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 5, 1), 4: (1, 2, 1), 5: (1, 2, 0), 6: (1, 5, 0), 7: (0, 5, 0)}
move_counter is 92
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 5, 1), 4: (1, 2, 1), 5: (1, 2, 0), 6: (1, 5, 0), 7: (0, 5, 0)}
previous_agents are {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (2, 5, 1), 4: (2, 2, 1), 5: (2, 2, 0), 6: (2, 5, 0), 7: (0, 5, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 1), 1: (0, 1, 1), 2: (0, 1, 0), 3: (2, 5, 1), 4: (2, 2, 1), 5: (2, 2, 0), 6: (2, 5, 0), 7: (0, 0, 0)}
{0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 5, 1), 4: (1, 2, 1), 5: (1, 2, 0), 6: (1, 5, 0), 7: (0, 5, 0)}
value of y is 1
welp
welp
welp
welp
agents are {0: (0, 4, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 4, 1), 4: (1, 2, 1), 5: (1, 2, 0), 6: (1, 4, 0), 7: (0, 4, 0)}
move_counter is 100
welp
welp
welp
welp
agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (1, 4, 1), 4: (1, 3, 1), 5: (1, 3, 0), 6: (1, 4, 0), 7: (0, 4, 0)}
move_counter is 104
agents are at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (1, 4, 1), 4: (1, 3, 1), 5: (1, 3, 0), 6: (1, 4, 0), 7: (0, 4, 0)}
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 5, 1), 4: (1, 2, 1), 5: (1, 2, 0), 6: (1, 5, 0), 7: (0, 5, 0)}
if happened (moving along second dimension)
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (1, 4, 1), 4: (1, 3, 1), 5: (1, 3, 0), 6: (1, 4, 0), 7: (0, 4, 0)}
we finshed
welp
welp
welp
welp
agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (2, 4, 1), 4: (2, 3, 1), 5: (2, 3, 0), 6: (2, 4, 0), 7: (0, 4, 0)}
move_counter is 116
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (2, 4, 1), 4: (2, 3, 1), 5: (2, 3, 0), 6: (2, 4, 0), 7: (0, 4, 0)}
previous_agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (1, 4, 1), 4: (1, 3, 1), 5: (1, 3, 0), 6: (1, 4, 0), 7: (0, 4, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (1, 4, 1), 4: (1, 3, 1), 5: (1, 3, 0), 6: (1, 4, 0), 7: (0, 5, 0)}
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (2, 4, 1), 4: (2, 3, 1), 5: (2, 3, 0), 6: (2, 4, 0), 7: (0, 4, 0)}
welp
welp
welp
welp
agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (3, 4, 1), 4: (3, 3, 1), 5: (3, 3, 0), 6: (3, 4, 0), 7: (0, 4, 0)}
move_counter is 124
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (3, 4, 1), 4: (3, 3, 1), 5: (3, 3, 0), 6: (3, 4, 0), 7: (0, 4, 0)}
previous_agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (2, 4, 1), 4: (2, 3, 1), 5: (2, 3, 0), 6: (2, 4, 0), 7: (0, 4, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (2, 4, 1), 4: (2, 3, 1), 5: (2, 3, 0), 6: (2, 4, 0), 7: (0, 5, 0)}
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (3, 4, 1), 4: (3, 3, 1), 5: (3, 3, 0), 6: (3, 4, 0), 7: (0, 4, 0)}
welp
welp
welp
welp
agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (4, 4, 1), 4: (4, 3, 1), 5: (4, 3, 0), 6: (4, 4, 0), 7: (0, 4, 0)}
move_counter is 132
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (4, 4, 1), 4: (4, 3, 1), 5: (4, 3, 0), 6: (4, 4, 0), 7: (0, 4, 0)}
previous_agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (3, 4, 1), 4: (3, 3, 1), 5: (3, 3, 0), 6: (3, 4, 0), 7: (0, 4, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (3, 4, 1), 4: (3, 3, 1), 5: (3, 3, 0), 6: (3, 4, 0), 7: (0, 5, 0)}
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (4, 4, 1), 4: (4, 3, 1), 5: (4, 3, 0), 6: (4, 4, 0), 7: (0, 4, 0)}
welp
welp
welp
welp
agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (5, 4, 1), 4: (5, 3, 1), 5: (5, 3, 0), 6: (5, 4, 0), 7: (0, 4, 0)}
move_counter is 140
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (5, 4, 1), 4: (5, 3, 1), 5: (5, 3, 0), 6: (5, 4, 0), 7: (0, 4, 0)}
previous_agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (4, 4, 1), 4: (4, 3, 1), 5: (4, 3, 0), 6: (4, 4, 0), 7: (0, 4, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 1), 1: (0, 2, 1), 2: (0, 2, 0), 3: (4, 4, 1), 4: (4, 3, 1), 5: (4, 3, 0), 6: (4, 4, 0), 7: (0, 5, 0)}
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (5, 4, 1), 4: (5, 3, 1), 5: (5, 3, 0), 6: (5, 4, 0), 7: (0, 4, 0)}
value of y is -1
we finshed
is h  0 less than this??? 5 plusz the whole dims is [6, 6, 6]
welp
welp
welp
welp
agents are {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 5), 3: (5, 4, 1), 4: (5, 3, 1), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
move_counter is 148
{0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 5), 3: (5, 4, 1), 4: (5, 3, 1), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
welp
welp
welp
welp
agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (5, 4, 2), 4: (5, 3, 2), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
move_counter is 152
agents are at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (5, 4, 2), 4: (5, 3, 2), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (5, 4, 1), 4: (5, 3, 1), 5: (5, 3, 0), 6: (5, 4, 0), 7: (0, 4, 0)}
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (5, 4, 2), 4: (5, 3, 2), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
calling CUBE recursively for t-1
agebts befir cakkubg CUBE recursively {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (5, 4, 2), 4: (5, 3, 2), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
value of t is 2
cube is starting
welp
welp
welp
welp
agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (4, 4, 2), 4: (4, 3, 2), 5: (4, 3, 5), 6: (4, 4, 5), 7: (0, 4, 5)}
move_counter is 164
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (4, 4, 2), 4: (4, 3, 2), 5: (4, 3, 5), 6: (4, 4, 5), 7: (0, 4, 5)}
previous_agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (5, 4, 2), 4: (5, 3, 2), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (5, 4, 2), 4: (5, 3, 2), 5: (5, 3, 5), 6: (5, 4, 5), 7: (0, 4, 0)}
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (4, 4, 2), 4: (4, 3, 2), 5: (4, 3, 5), 6: (4, 4, 5), 7: (0, 4, 5)}
welp
welp
welp
welp
agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (3, 4, 2), 4: (3, 3, 2), 5: (3, 3, 5), 6: (3, 4, 5), 7: (0, 4, 5)}
move_counter is 172
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (3, 4, 2), 4: (3, 3, 2), 5: (3, 3, 5), 6: (3, 4, 5), 7: (0, 4, 5)}
previous_agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (4, 4, 2), 4: (4, 3, 2), 5: (4, 3, 5), 6: (4, 4, 5), 7: (0, 4, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (4, 4, 2), 4: (4, 3, 2), 5: (4, 3, 5), 6: (4, 4, 5), 7: (0, 4, 0)}
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (3, 4, 2), 4: (3, 3, 2), 5: (3, 3, 5), 6: (3, 4, 5), 7: (0, 4, 5)}
welp
welp
welp
welp
agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (2, 4, 2), 4: (2, 3, 2), 5: (2, 3, 5), 6: (2, 4, 5), 7: (0, 4, 5)}
move_counter is 180
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (2, 4, 2), 4: (2, 3, 2), 5: (2, 3, 5), 6: (2, 4, 5), 7: (0, 4, 5)}
previous_agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (3, 4, 2), 4: (3, 3, 2), 5: (3, 3, 5), 6: (3, 4, 5), 7: (0, 4, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (3, 4, 2), 4: (3, 3, 2), 5: (3, 3, 5), 6: (3, 4, 5), 7: (0, 4, 0)}
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (2, 4, 2), 4: (2, 3, 2), 5: (2, 3, 5), 6: (2, 4, 5), 7: (0, 4, 5)}
welp
welp
welp
welp
agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 4, 2), 4: (1, 3, 2), 5: (1, 3, 5), 6: (1, 4, 5), 7: (0, 4, 5)}
move_counter is 188
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 4, 2), 4: (1, 3, 2), 5: (1, 3, 5), 6: (1, 4, 5), 7: (0, 4, 5)}
previous_agents are {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (2, 4, 2), 4: (2, 3, 2), 5: (2, 3, 5), 6: (2, 4, 5), 7: (0, 4, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 1), 1: (0, 3, 1), 2: (0, 3, 0), 3: (2, 4, 2), 4: (2, 3, 2), 5: (2, 3, 5), 6: (2, 4, 5), 7: (0, 4, 0)}
{0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 4, 2), 4: (1, 3, 2), 5: (1, 3, 5), 6: (1, 4, 5), 7: (0, 4, 5)}
value of y is 1
welp
welp
welp
welp
agents are {0: (0, 5, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 5, 2), 4: (1, 3, 2), 5: (1, 3, 5), 6: (1, 5, 5), 7: (0, 5, 5)}
move_counter is 196
welp
welp
welp
welp
agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (1, 5, 2), 4: (1, 2, 2), 5: (1, 2, 5), 6: (1, 5, 5), 7: (0, 5, 5)}
move_counter is 200
agents are at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (1, 5, 2), 4: (1, 2, 2), 5: (1, 2, 5), 6: (1, 5, 5), 7: (0, 5, 5)}
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 4, 2), 4: (1, 3, 2), 5: (1, 3, 5), 6: (1, 4, 5), 7: (0, 4, 5)}
if happened (moving along second dimension)
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (1, 5, 2), 4: (1, 2, 2), 5: (1, 2, 5), 6: (1, 5, 5), 7: (0, 5, 5)}
we finshed
welp
welp
welp
welp
agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (2, 5, 2), 4: (2, 2, 2), 5: (2, 2, 5), 6: (2, 5, 5), 7: (0, 5, 5)}
move_counter is 212
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (2, 5, 2), 4: (2, 2, 2), 5: (2, 2, 5), 6: (2, 5, 5), 7: (0, 5, 5)}
previous_agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (1, 5, 2), 4: (1, 2, 2), 5: (1, 2, 5), 6: (1, 5, 5), 7: (0, 5, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (1, 5, 2), 4: (1, 2, 2), 5: (1, 2, 5), 6: (1, 5, 5), 7: (0, 4, 5)}
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (2, 5, 2), 4: (2, 2, 2), 5: (2, 2, 5), 6: (2, 5, 5), 7: (0, 5, 5)}
welp
welp
welp
welp
agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (3, 5, 2), 4: (3, 2, 2), 5: (3, 2, 5), 6: (3, 5, 5), 7: (0, 5, 5)}
move_counter is 220
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (3, 5, 2), 4: (3, 2, 2), 5: (3, 2, 5), 6: (3, 5, 5), 7: (0, 5, 5)}
previous_agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (2, 5, 2), 4: (2, 2, 2), 5: (2, 2, 5), 6: (2, 5, 5), 7: (0, 5, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (2, 5, 2), 4: (2, 2, 2), 5: (2, 2, 5), 6: (2, 5, 5), 7: (0, 4, 5)}
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (3, 5, 2), 4: (3, 2, 2), 5: (3, 2, 5), 6: (3, 5, 5), 7: (0, 5, 5)}
welp
welp
welp
welp
agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (4, 5, 2), 4: (4, 2, 2), 5: (4, 2, 5), 6: (4, 5, 5), 7: (0, 5, 5)}
move_counter is 228
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (4, 5, 2), 4: (4, 2, 2), 5: (4, 2, 5), 6: (4, 5, 5), 7: (0, 5, 5)}
previous_agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (3, 5, 2), 4: (3, 2, 2), 5: (3, 2, 5), 6: (3, 5, 5), 7: (0, 5, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (3, 5, 2), 4: (3, 2, 2), 5: (3, 2, 5), 6: (3, 5, 5), 7: (0, 4, 5)}
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (4, 5, 2), 4: (4, 2, 2), 5: (4, 2, 5), 6: (4, 5, 5), 7: (0, 5, 5)}
welp
welp
welp
welp
agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (5, 5, 2), 4: (5, 2, 2), 5: (5, 2, 5), 6: (5, 5, 5), 7: (0, 5, 5)}
move_counter is 236
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (5, 5, 2), 4: (5, 2, 2), 5: (5, 2, 5), 6: (5, 5, 5), 7: (0, 5, 5)}
previous_agents are {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (4, 5, 2), 4: (4, 2, 2), 5: (4, 2, 5), 6: (4, 5, 5), 7: (0, 5, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 4, 2), 1: (0, 3, 2), 2: (0, 3, 5), 3: (4, 5, 2), 4: (4, 2, 2), 5: (4, 2, 5), 6: (4, 5, 5), 7: (0, 4, 5)}
{0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (5, 5, 2), 4: (5, 2, 2), 5: (5, 2, 5), 6: (5, 5, 5), 7: (0, 5, 5)}
value of y is -1
welp
welp
welp
welp
agents are {0: (0, 0, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (5, 0, 2), 4: (5, 2, 2), 5: (5, 2, 5), 6: (5, 0, 5), 7: (0, 0, 5)}
move_counter is 244
welp
welp
welp
welp
agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (5, 0, 2), 4: (5, 1, 2), 5: (5, 1, 5), 6: (5, 0, 5), 7: (0, 0, 5)}
move_counter is 248
agents are at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (5, 0, 2), 4: (5, 1, 2), 5: (5, 1, 5), 6: (5, 0, 5), 7: (0, 0, 5)}
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (5, 5, 2), 4: (5, 2, 2), 5: (5, 2, 5), 6: (5, 5, 5), 7: (0, 5, 5)}
if happened (moving along second dimension)
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (5, 0, 2), 4: (5, 1, 2), 5: (5, 1, 5), 6: (5, 0, 5), 7: (0, 0, 5)}
we finshed
welp
welp
welp
welp
agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (4, 0, 2), 4: (4, 1, 2), 5: (4, 1, 5), 6: (4, 0, 5), 7: (0, 0, 5)}
move_counter is 260
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (4, 0, 2), 4: (4, 1, 2), 5: (4, 1, 5), 6: (4, 0, 5), 7: (0, 0, 5)}
previous_agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (5, 0, 2), 4: (5, 1, 2), 5: (5, 1, 5), 6: (5, 0, 5), 7: (0, 0, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (5, 0, 2), 4: (5, 1, 2), 5: (5, 1, 5), 6: (5, 0, 5), 7: (0, 5, 5)}
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (4, 0, 2), 4: (4, 1, 2), 5: (4, 1, 5), 6: (4, 0, 5), 7: (0, 0, 5)}
welp
welp
welp
welp
agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (3, 0, 2), 4: (3, 1, 2), 5: (3, 1, 5), 6: (3, 0, 5), 7: (0, 0, 5)}
move_counter is 268
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (3, 0, 2), 4: (3, 1, 2), 5: (3, 1, 5), 6: (3, 0, 5), 7: (0, 0, 5)}
previous_agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (4, 0, 2), 4: (4, 1, 2), 5: (4, 1, 5), 6: (4, 0, 5), 7: (0, 0, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (4, 0, 2), 4: (4, 1, 2), 5: (4, 1, 5), 6: (4, 0, 5), 7: (0, 5, 5)}
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (3, 0, 2), 4: (3, 1, 2), 5: (3, 1, 5), 6: (3, 0, 5), 7: (0, 0, 5)}
welp
welp
welp
welp
agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (2, 0, 2), 4: (2, 1, 2), 5: (2, 1, 5), 6: (2, 0, 5), 7: (0, 0, 5)}
move_counter is 276
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (2, 0, 2), 4: (2, 1, 2), 5: (2, 1, 5), 6: (2, 0, 5), 7: (0, 0, 5)}
previous_agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (3, 0, 2), 4: (3, 1, 2), 5: (3, 1, 5), 6: (3, 0, 5), 7: (0, 0, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (3, 0, 2), 4: (3, 1, 2), 5: (3, 1, 5), 6: (3, 0, 5), 7: (0, 5, 5)}
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (2, 0, 2), 4: (2, 1, 2), 5: (2, 1, 5), 6: (2, 0, 5), 7: (0, 0, 5)}
welp
welp
welp
welp
agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 5), 6: (1, 0, 5), 7: (0, 0, 5)}
move_counter is 284
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 5), 6: (1, 0, 5), 7: (0, 0, 5)}
previous_agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (2, 0, 2), 4: (2, 1, 2), 5: (2, 1, 5), 6: (2, 0, 5), 7: (0, 0, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 2), 1: (0, 2, 2), 2: (0, 2, 5), 3: (2, 0, 2), 4: (2, 1, 2), 5: (2, 1, 5), 6: (2, 0, 5), 7: (0, 5, 5)}
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 5), 6: (1, 0, 5), 7: (0, 0, 5)}
value of y is 1
we finshed
is h  1 less than this??? 5 plusz the whole dims is [6, 6, 6]
welp
welp
welp
welp
agents are {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 4), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
move_counter is 292
{0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 4), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
welp
welp
welp
welp
agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (1, 0, 3), 4: (1, 1, 3), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
move_counter is 296
agents are at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (1, 0, 3), 4: (1, 1, 3), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (1, 0, 2), 4: (1, 1, 2), 5: (1, 1, 5), 6: (1, 0, 5), 7: (0, 0, 5)}
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (1, 0, 3), 4: (1, 1, 3), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
calling CUBE recursively for t-1
agebts befir cakkubg CUBE recursively {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (1, 0, 3), 4: (1, 1, 3), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
value of t is 2
cube is starting
welp
welp
welp
welp
agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (2, 0, 3), 4: (2, 1, 3), 5: (2, 1, 4), 6: (2, 0, 4), 7: (0, 0, 4)}
move_counter is 308
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (2, 0, 3), 4: (2, 1, 3), 5: (2, 1, 4), 6: (2, 0, 4), 7: (0, 0, 4)}
previous_agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (1, 0, 3), 4: (1, 1, 3), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (1, 0, 3), 4: (1, 1, 3), 5: (1, 1, 4), 6: (1, 0, 4), 7: (0, 0, 5)}
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (2, 0, 3), 4: (2, 1, 3), 5: (2, 1, 4), 6: (2, 0, 4), 7: (0, 0, 4)}
welp
welp
welp
welp
agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (3, 0, 3), 4: (3, 1, 3), 5: (3, 1, 4), 6: (3, 0, 4), 7: (0, 0, 4)}
move_counter is 316
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (3, 0, 3), 4: (3, 1, 3), 5: (3, 1, 4), 6: (3, 0, 4), 7: (0, 0, 4)}
previous_agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (2, 0, 3), 4: (2, 1, 3), 5: (2, 1, 4), 6: (2, 0, 4), 7: (0, 0, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (2, 0, 3), 4: (2, 1, 3), 5: (2, 1, 4), 6: (2, 0, 4), 7: (0, 0, 5)}
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (3, 0, 3), 4: (3, 1, 3), 5: (3, 1, 4), 6: (3, 0, 4), 7: (0, 0, 4)}
welp
welp
welp
welp
agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (4, 0, 3), 4: (4, 1, 3), 5: (4, 1, 4), 6: (4, 0, 4), 7: (0, 0, 4)}
move_counter is 324
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (4, 0, 3), 4: (4, 1, 3), 5: (4, 1, 4), 6: (4, 0, 4), 7: (0, 0, 4)}
previous_agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (3, 0, 3), 4: (3, 1, 3), 5: (3, 1, 4), 6: (3, 0, 4), 7: (0, 0, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (3, 0, 3), 4: (3, 1, 3), 5: (3, 1, 4), 6: (3, 0, 4), 7: (0, 0, 5)}
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (4, 0, 3), 4: (4, 1, 3), 5: (4, 1, 4), 6: (4, 0, 4), 7: (0, 0, 4)}
welp
welp
welp
welp
agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (5, 0, 3), 4: (5, 1, 3), 5: (5, 1, 4), 6: (5, 0, 4), 7: (0, 0, 4)}
move_counter is 332
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (5, 0, 3), 4: (5, 1, 3), 5: (5, 1, 4), 6: (5, 0, 4), 7: (0, 0, 4)}
previous_agents are {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (4, 0, 3), 4: (4, 1, 3), 5: (4, 1, 4), 6: (4, 0, 4), 7: (0, 0, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 2), 1: (0, 1, 2), 2: (0, 1, 5), 3: (4, 0, 3), 4: (4, 1, 3), 5: (4, 1, 4), 6: (4, 0, 4), 7: (0, 0, 5)}
{0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (5, 0, 3), 4: (5, 1, 3), 5: (5, 1, 4), 6: (5, 0, 4), 7: (0, 0, 4)}
value of y is -1
welp
welp
welp
welp
agents are {0: (0, 5, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (5, 5, 3), 4: (5, 1, 3), 5: (5, 1, 4), 6: (5, 5, 4), 7: (0, 5, 4)}
move_counter is 340
welp
welp
welp
welp
agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (5, 5, 3), 4: (5, 2, 3), 5: (5, 2, 4), 6: (5, 5, 4), 7: (0, 5, 4)}
move_counter is 344
agents are at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (5, 5, 3), 4: (5, 2, 3), 5: (5, 2, 4), 6: (5, 5, 4), 7: (0, 5, 4)}
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (5, 0, 3), 4: (5, 1, 3), 5: (5, 1, 4), 6: (5, 0, 4), 7: (0, 0, 4)}
if happened (moving along second dimension)
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (5, 5, 3), 4: (5, 2, 3), 5: (5, 2, 4), 6: (5, 5, 4), 7: (0, 5, 4)}
we finshed
welp
welp
welp
welp
agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (4, 5, 3), 4: (4, 2, 3), 5: (4, 2, 4), 6: (4, 5, 4), 7: (0, 5, 4)}
move_counter is 356
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (4, 5, 3), 4: (4, 2, 3), 5: (4, 2, 4), 6: (4, 5, 4), 7: (0, 5, 4)}
previous_agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (5, 5, 3), 4: (5, 2, 3), 5: (5, 2, 4), 6: (5, 5, 4), 7: (0, 5, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (5, 5, 3), 4: (5, 2, 3), 5: (5, 2, 4), 6: (5, 5, 4), 7: (0, 0, 4)}
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (4, 5, 3), 4: (4, 2, 3), 5: (4, 2, 4), 6: (4, 5, 4), 7: (0, 5, 4)}
welp
welp
welp
welp
agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (3, 5, 3), 4: (3, 2, 3), 5: (3, 2, 4), 6: (3, 5, 4), 7: (0, 5, 4)}
move_counter is 364
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (3, 5, 3), 4: (3, 2, 3), 5: (3, 2, 4), 6: (3, 5, 4), 7: (0, 5, 4)}
previous_agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (4, 5, 3), 4: (4, 2, 3), 5: (4, 2, 4), 6: (4, 5, 4), 7: (0, 5, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (4, 5, 3), 4: (4, 2, 3), 5: (4, 2, 4), 6: (4, 5, 4), 7: (0, 0, 4)}
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (3, 5, 3), 4: (3, 2, 3), 5: (3, 2, 4), 6: (3, 5, 4), 7: (0, 5, 4)}
welp
welp
welp
welp
agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (2, 5, 3), 4: (2, 2, 3), 5: (2, 2, 4), 6: (2, 5, 4), 7: (0, 5, 4)}
move_counter is 372
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (2, 5, 3), 4: (2, 2, 3), 5: (2, 2, 4), 6: (2, 5, 4), 7: (0, 5, 4)}
previous_agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (3, 5, 3), 4: (3, 2, 3), 5: (3, 2, 4), 6: (3, 5, 4), 7: (0, 5, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (3, 5, 3), 4: (3, 2, 3), 5: (3, 2, 4), 6: (3, 5, 4), 7: (0, 0, 4)}
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (2, 5, 3), 4: (2, 2, 3), 5: (2, 2, 4), 6: (2, 5, 4), 7: (0, 5, 4)}
welp
welp
welp
welp
agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 5, 3), 4: (1, 2, 3), 5: (1, 2, 4), 6: (1, 5, 4), 7: (0, 5, 4)}
move_counter is 380
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 5, 3), 4: (1, 2, 3), 5: (1, 2, 4), 6: (1, 5, 4), 7: (0, 5, 4)}
previous_agents are {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (2, 5, 3), 4: (2, 2, 3), 5: (2, 2, 4), 6: (2, 5, 4), 7: (0, 5, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 3), 1: (0, 1, 3), 2: (0, 1, 4), 3: (2, 5, 3), 4: (2, 2, 3), 5: (2, 2, 4), 6: (2, 5, 4), 7: (0, 0, 4)}
{0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 5, 3), 4: (1, 2, 3), 5: (1, 2, 4), 6: (1, 5, 4), 7: (0, 5, 4)}
value of y is 1
welp
welp
welp
welp
agents are {0: (0, 4, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 4, 3), 4: (1, 2, 3), 5: (1, 2, 4), 6: (1, 4, 4), 7: (0, 4, 4)}
move_counter is 388
welp
welp
welp
welp
agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (1, 4, 3), 4: (1, 3, 3), 5: (1, 3, 4), 6: (1, 4, 4), 7: (0, 4, 4)}
move_counter is 392
agents are at {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (1, 4, 3), 4: (1, 3, 3), 5: (1, 3, 4), 6: (1, 4, 4), 7: (0, 4, 4)}
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 5, 3), 4: (1, 2, 3), 5: (1, 2, 4), 6: (1, 5, 4), 7: (0, 5, 4)}
if happened (moving along second dimension)
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (1, 4, 3), 4: (1, 3, 3), 5: (1, 3, 4), 6: (1, 4, 4), 7: (0, 4, 4)}
we finshed
welp
welp
welp
welp
agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (2, 4, 3), 4: (2, 3, 3), 5: (2, 3, 4), 6: (2, 4, 4), 7: (0, 4, 4)}
move_counter is 404
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (2, 4, 3), 4: (2, 3, 3), 5: (2, 3, 4), 6: (2, 4, 4), 7: (0, 4, 4)}
previous_agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (1, 4, 3), 4: (1, 3, 3), 5: (1, 3, 4), 6: (1, 4, 4), 7: (0, 4, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (1, 4, 3), 4: (1, 3, 3), 5: (1, 3, 4), 6: (1, 4, 4), 7: (0, 5, 4)}
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (2, 4, 3), 4: (2, 3, 3), 5: (2, 3, 4), 6: (2, 4, 4), 7: (0, 4, 4)}
welp
welp
welp
welp
agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (3, 4, 3), 4: (3, 3, 3), 5: (3, 3, 4), 6: (3, 4, 4), 7: (0, 4, 4)}
move_counter is 412
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (3, 4, 3), 4: (3, 3, 3), 5: (3, 3, 4), 6: (3, 4, 4), 7: (0, 4, 4)}
previous_agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (2, 4, 3), 4: (2, 3, 3), 5: (2, 3, 4), 6: (2, 4, 4), 7: (0, 4, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (2, 4, 3), 4: (2, 3, 3), 5: (2, 3, 4), 6: (2, 4, 4), 7: (0, 5, 4)}
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (3, 4, 3), 4: (3, 3, 3), 5: (3, 3, 4), 6: (3, 4, 4), 7: (0, 4, 4)}
welp
welp
welp
welp
agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (4, 4, 3), 4: (4, 3, 3), 5: (4, 3, 4), 6: (4, 4, 4), 7: (0, 4, 4)}
move_counter is 420
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (4, 4, 3), 4: (4, 3, 3), 5: (4, 3, 4), 6: (4, 4, 4), 7: (0, 4, 4)}
previous_agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (3, 4, 3), 4: (3, 3, 3), 5: (3, 3, 4), 6: (3, 4, 4), 7: (0, 4, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (3, 4, 3), 4: (3, 3, 3), 5: (3, 3, 4), 6: (3, 4, 4), 7: (0, 5, 4)}
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (4, 4, 3), 4: (4, 3, 3), 5: (4, 3, 4), 6: (4, 4, 4), 7: (0, 4, 4)}
welp
welp
welp
welp
agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (5, 4, 3), 4: (5, 3, 3), 5: (5, 3, 4), 6: (5, 4, 4), 7: (0, 4, 4)}
move_counter is 428
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (5, 4, 3), 4: (5, 3, 3), 5: (5, 3, 4), 6: (5, 4, 4), 7: (0, 4, 4)}
previous_agents are {0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (4, 4, 3), 4: (4, 3, 3), 5: (4, 3, 4), 6: (4, 4, 4), 7: (0, 4, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 5, 3), 1: (0, 2, 3), 2: (0, 2, 4), 3: (4, 4, 3), 4: (4, 3, 3), 5: (4, 3, 4), 6: (4, 4, 4), 7: (0, 5, 4)}
{0: (0, 4, 3), 1: (0, 3, 3), 2: (0, 3, 4), 3: (5, 4, 3), 4: (5, 3, 3), 5: (5, 3, 4), 6: (5, 4, 4), 7: (0, 4, 4)}
value of y is -1
we finshed
8
no grey nodes remain
after init is 17
tinit is 17
tmoves is 432
move counted is 432
move counter at starting position is 0
dimensions are the following: [6, 6, 6]
Graph with 216 nodes and 648 edges
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 0, 4), (0, 0, 5), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 1, 4), (0, 1, 5), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 2, 4), (0, 2, 5), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (0, 3, 4), (0, 3, 5), (0, 4, 0), (0, 4, 1), (0, 4, 2), (0, 4, 3), (0, 4, 4), (0, 4, 5), (0, 5, 0), (0, 5, 1), (0, 5, 2), (0, 5, 3), (0, 5, 4), (0, 5, 5), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 0, 4), (1, 0, 5), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 0), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (1, 4, 5), (1, 5, 0), (1, 5, 1), (1, 5, 2), (1, 5, 3), (1, 5, 4), (1, 5, 5), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 0, 4), (2, 0, 5), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 1, 5), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 0), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (2, 4, 5), (2, 5, 0), (2, 5, 1), (2, 5, 2), (2, 5, 3), (2, 5, 4), (2, 5, 5), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 0, 4), (3, 0, 5), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 1, 5), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 2, 5), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 0), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (3, 4, 5), (3, 5, 0), (3, 5, 1), (3, 5, 2), (3, 5, 3), (3, 5, 4), (3, 5, 5), (4, 0, 0), (4, 0, 1), (4, 0, 2), (4, 0, 3), (4, 0, 4), (4, 0, 5), (4, 1, 0), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 1, 5), (4, 2, 0), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 2, 5), (4, 3, 0), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 3, 5), (4, 4, 0), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4), (4, 4, 5), (4, 5, 0), (4, 5, 1), (4, 5, 2), (4, 5, 3), (4, 5, 4), (4, 5, 5), (5, 0, 0), (5, 0, 1), (5, 0, 2), (5, 0, 3), (5, 0, 4), (5, 0, 5), (5, 1, 0), (5, 1, 1), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 0), (5, 2, 1), (5, 2, 2), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 0), (5, 3, 1), (5, 3, 2), (5, 3, 3), (5, 3, 4), (5, 3, 5), (5, 4, 0), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 0), (5, 5, 1), (5, 5, 2), (5, 5, 3), (5, 5, 4), (5, 5, 5)]
list of C nodes
[(0, 0, 0), (0, 1, 0), (1, 0, 0), (1, 1, 0)]
{(0, 0, 0): 'grey', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'grey', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'grey', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
(x,y, z) is:
(0, 0, 0)
[(0, 0, 0)]
(x,y, z) is:
(0, 1, 0)
[(0, 0, 0), (0, 1, 0)]
(x,y, z) is:
(1, 0, 0)
[(0, 0, 0), (1, 0, 0)]
(x,y, z) is:
(1, 1, 0)
[(0, 0, 0), (1, 0, 0), (1, 1, 0)]
P is :
[[(0, 0, 0)], [(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)], [(0, 0, 0), (1, 0, 0), (1, 1, 0)]]
theoretical_nr_moves is 428
agent_which is 2
agent_when is 1000000
flipped_agents
{(0, 0, 0): [0, 1, 2, 3]}
v is:
(0, 0, 0)
truest
[0, 1, 2, 3]
4
edges_of_v_in_P
[[(0, 0, 0), (0, 1, 0)], [(0, 0, 0), (1, 0, 0)]]
p is:
[1, 2]
i is:
0
list of agents on v
[0]
v is
(0, 0, 0)
i is:
1
list of agents on v
[1, 2]
v is
(0, 0, 0)
{0: (0, 1, 0), 1: (1, 0, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'grey', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
1
values
[(0, 1, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (0, 1, 0)}
{0: (0, 1, 0), 1: (1, 0, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
flipped_agents
{(0, 1, 0): [0], (1, 0, 0): [1, 2], (0, 0, 0): [3]}
v is:
(1, 0, 0)
truest
[1, 2]
2
edges_of_v_in_P
[[(1, 0, 0), (1, 1, 0)]]
p is:
[1]
i is:
0
list of agents on v
[1]
v is
(1, 0, 0)
{0: (0, 1, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
{(0, 0, 0): 'black', (0, 0, 1): 'grey', (0, 0, 2): 'grey', (0, 0, 3): 'grey', (0, 0, 4): 'grey', (0, 0, 5): 'grey', (0, 1, 0): 'black', (0, 1, 1): 'grey', (0, 1, 2): 'grey', (0, 1, 3): 'grey', (0, 1, 4): 'grey', (0, 1, 5): 'grey', (0, 2, 0): 'grey', (0, 2, 1): 'grey', (0, 2, 2): 'grey', (0, 2, 3): 'grey', (0, 2, 4): 'grey', (0, 2, 5): 'grey', (0, 3, 0): 'grey', (0, 3, 1): 'grey', (0, 3, 2): 'grey', (0, 3, 3): 'grey', (0, 3, 4): 'grey', (0, 3, 5): 'grey', (0, 4, 0): 'grey', (0, 4, 1): 'grey', (0, 4, 2): 'grey', (0, 4, 3): 'grey', (0, 4, 4): 'grey', (0, 4, 5): 'grey', (0, 5, 0): 'grey', (0, 5, 1): 'grey', (0, 5, 2): 'grey', (0, 5, 3): 'grey', (0, 5, 4): 'grey', (0, 5, 5): 'grey', (1, 0, 0): 'black', (1, 0, 1): 'grey', (1, 0, 2): 'grey', (1, 0, 3): 'grey', (1, 0, 4): 'grey', (1, 0, 5): 'grey', (1, 1, 0): 'black', (1, 1, 1): 'grey', (1, 1, 2): 'grey', (1, 1, 3): 'grey', (1, 1, 4): 'grey', (1, 1, 5): 'grey', (1, 2, 0): 'grey', (1, 2, 1): 'grey', (1, 2, 2): 'grey', (1, 2, 3): 'grey', (1, 2, 4): 'grey', (1, 2, 5): 'grey', (1, 3, 0): 'grey', (1, 3, 1): 'grey', (1, 3, 2): 'grey', (1, 3, 3): 'grey', (1, 3, 4): 'grey', (1, 3, 5): 'grey', (1, 4, 0): 'grey', (1, 4, 1): 'grey', (1, 4, 2): 'grey', (1, 4, 3): 'grey', (1, 4, 4): 'grey', (1, 4, 5): 'grey', (1, 5, 0): 'grey', (1, 5, 1): 'grey', (1, 5, 2): 'grey', (1, 5, 3): 'grey', (1, 5, 4): 'grey', (1, 5, 5): 'grey', (2, 0, 0): 'grey', (2, 0, 1): 'grey', (2, 0, 2): 'grey', (2, 0, 3): 'grey', (2, 0, 4): 'grey', (2, 0, 5): 'grey', (2, 1, 0): 'grey', (2, 1, 1): 'grey', (2, 1, 2): 'grey', (2, 1, 3): 'grey', (2, 1, 4): 'grey', (2, 1, 5): 'grey', (2, 2, 0): 'grey', (2, 2, 1): 'grey', (2, 2, 2): 'grey', (2, 2, 3): 'grey', (2, 2, 4): 'grey', (2, 2, 5): 'grey', (2, 3, 0): 'grey', (2, 3, 1): 'grey', (2, 3, 2): 'grey', (2, 3, 3): 'grey', (2, 3, 4): 'grey', (2, 3, 5): 'grey', (2, 4, 0): 'grey', (2, 4, 1): 'grey', (2, 4, 2): 'grey', (2, 4, 3): 'grey', (2, 4, 4): 'grey', (2, 4, 5): 'grey', (2, 5, 0): 'grey', (2, 5, 1): 'grey', (2, 5, 2): 'grey', (2, 5, 3): 'grey', (2, 5, 4): 'grey', (2, 5, 5): 'grey', (3, 0, 0): 'grey', (3, 0, 1): 'grey', (3, 0, 2): 'grey', (3, 0, 3): 'grey', (3, 0, 4): 'grey', (3, 0, 5): 'grey', (3, 1, 0): 'grey', (3, 1, 1): 'grey', (3, 1, 2): 'grey', (3, 1, 3): 'grey', (3, 1, 4): 'grey', (3, 1, 5): 'grey', (3, 2, 0): 'grey', (3, 2, 1): 'grey', (3, 2, 2): 'grey', (3, 2, 3): 'grey', (3, 2, 4): 'grey', (3, 2, 5): 'grey', (3, 3, 0): 'grey', (3, 3, 1): 'grey', (3, 3, 2): 'grey', (3, 3, 3): 'grey', (3, 3, 4): 'grey', (3, 3, 5): 'grey', (3, 4, 0): 'grey', (3, 4, 1): 'grey', (3, 4, 2): 'grey', (3, 4, 3): 'grey', (3, 4, 4): 'grey', (3, 4, 5): 'grey', (3, 5, 0): 'grey', (3, 5, 1): 'grey', (3, 5, 2): 'grey', (3, 5, 3): 'grey', (3, 5, 4): 'grey', (3, 5, 5): 'grey', (4, 0, 0): 'grey', (4, 0, 1): 'grey', (4, 0, 2): 'grey', (4, 0, 3): 'grey', (4, 0, 4): 'grey', (4, 0, 5): 'grey', (4, 1, 0): 'grey', (4, 1, 1): 'grey', (4, 1, 2): 'grey', (4, 1, 3): 'grey', (4, 1, 4): 'grey', (4, 1, 5): 'grey', (4, 2, 0): 'grey', (4, 2, 1): 'grey', (4, 2, 2): 'grey', (4, 2, 3): 'grey', (4, 2, 4): 'grey', (4, 2, 5): 'grey', (4, 3, 0): 'grey', (4, 3, 1): 'grey', (4, 3, 2): 'grey', (4, 3, 3): 'grey', (4, 3, 4): 'grey', (4, 3, 5): 'grey', (4, 4, 0): 'grey', (4, 4, 1): 'grey', (4, 4, 2): 'grey', (4, 4, 3): 'grey', (4, 4, 4): 'grey', (4, 4, 5): 'grey', (4, 5, 0): 'grey', (4, 5, 1): 'grey', (4, 5, 2): 'grey', (4, 5, 3): 'grey', (4, 5, 4): 'grey', (4, 5, 5): 'grey', (5, 0, 0): 'grey', (5, 0, 1): 'grey', (5, 0, 2): 'grey', (5, 0, 3): 'grey', (5, 0, 4): 'grey', (5, 0, 5): 'grey', (5, 1, 0): 'grey', (5, 1, 1): 'grey', (5, 1, 2): 'grey', (5, 1, 3): 'grey', (5, 1, 4): 'grey', (5, 1, 5): 'grey', (5, 2, 0): 'grey', (5, 2, 1): 'grey', (5, 2, 2): 'grey', (5, 2, 3): 'grey', (5, 2, 4): 'grey', (5, 2, 5): 'grey', (5, 3, 0): 'grey', (5, 3, 1): 'grey', (5, 3, 2): 'grey', (5, 3, 3): 'grey', (5, 3, 4): 'grey', (5, 3, 5): 'grey', (5, 4, 0): 'grey', (5, 4, 1): 'grey', (5, 4, 2): 'grey', (5, 4, 3): 'grey', (5, 4, 4): 'grey', (5, 4, 5): 'grey', (5, 5, 0): 'grey', (5, 5, 1): 'grey', (5, 5, 2): 'grey', (5, 5, 3): 'grey', (5, 5, 4): 'grey', (5, 5, 5): 'grey'}
iteration is over
nr of iterations so far
2
values
[(0, 1, 0), (1, 1, 0), (1, 0, 0), (0, 0, 0)]
set(values)
{(1, 0, 0), (0, 0, 0), (1, 1, 0), (0, 1, 0)}
{0: (0, 1, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
agents at the end of INITIAL SET
{0: (0, 1, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
the path from spare to agent is [(0, 0, 0), (0, 1, 0)]
the path from spare to agent is [(0, 0, 0), (0, 1, 0), (1, 1, 0)]
spare agent 1 moved to (0, 1, 0)
the path from spare to agent is [(0, 0, 0), (1, 0, 0)]
the path from spare to agent is [(0, 0, 0)]
agentstart is {0: (0, 1, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
spareagentstart is {0: (0, 0, 0), 1: (0, 1, 0), 2: (0, 0, 0), 3: (0, 0, 0)}
target_agents are {0: 0, 1: 1, 2: 2, 3: 3}
ITERCUBE else is commencing
ITERCUBE s == 6-m commencing
value of t is 2
cube is starting
welp
welp
agents are {0: (0, 1, 0), 1: (2, 1, 0), 2: (2, 0, 0), 3: (0, 0, 0)}
move_counter is 7
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 0), 1: (2, 1, 0), 2: (2, 0, 0), 3: (0, 0, 0)}
previous_agents are {0: (0, 1, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (1, 1, 0), 2: (1, 0, 0), 3: (0, 0, 0)}
{0: (0, 1, 0), 1: (2, 1, 0), 2: (2, 0, 0), 3: (0, 0, 0)}
welp
welp
agents are {0: (0, 1, 0), 1: (3, 1, 0), 2: (3, 0, 0), 3: (0, 0, 0)}
move_counter is 11
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 0), 1: (3, 1, 0), 2: (3, 0, 0), 3: (0, 0, 0)}
previous_agents are {0: (0, 1, 0), 1: (2, 1, 0), 2: (2, 0, 0), 3: (0, 0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (2, 1, 0), 2: (2, 0, 0), 3: (0, 0, 0)}
{0: (0, 1, 0), 1: (3, 1, 0), 2: (3, 0, 0), 3: (0, 0, 0)}
welp
welp
agents are {0: (0, 1, 0), 1: (4, 1, 0), 2: (4, 0, 0), 3: (0, 0, 0)}
move_counter is 15
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 0), 1: (4, 1, 0), 2: (4, 0, 0), 3: (0, 0, 0)}
previous_agents are {0: (0, 1, 0), 1: (3, 1, 0), 2: (3, 0, 0), 3: (0, 0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (3, 1, 0), 2: (3, 0, 0), 3: (0, 0, 0)}
{0: (0, 1, 0), 1: (4, 1, 0), 2: (4, 0, 0), 3: (0, 0, 0)}
welp
welp
agents are {0: (0, 1, 0), 1: (5, 1, 0), 2: (5, 0, 0), 3: (0, 0, 0)}
move_counter is 19
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 0), 1: (5, 1, 0), 2: (5, 0, 0), 3: (0, 0, 0)}
previous_agents are {0: (0, 1, 0), 1: (4, 1, 0), 2: (4, 0, 0), 3: (0, 0, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 0, 0), 1: (4, 1, 0), 2: (4, 0, 0), 3: (0, 0, 0)}
{0: (0, 1, 0), 1: (5, 1, 0), 2: (5, 0, 0), 3: (0, 0, 0)}
value of y is -1
welp
welp
agents are {0: (0, 1, 0), 1: (5, 1, 0), 2: (5, 5, 0), 3: (0, 5, 0)}
move_counter is 23
welp
welp
agents are {0: (0, 2, 0), 1: (5, 2, 0), 2: (5, 5, 0), 3: (0, 5, 0)}
move_counter is 25
agents are at {0: (0, 2, 0), 1: (5, 2, 0), 2: (5, 5, 0), 3: (0, 5, 0)}
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 0), 1: (5, 1, 0), 2: (5, 0, 0), 3: (0, 0, 0)}
if happened (moving along second dimension)
{0: (0, 2, 0), 1: (5, 2, 0), 2: (5, 5, 0), 3: (0, 5, 0)}
we finshed
welp
welp
agents are {0: (0, 2, 0), 1: (4, 2, 0), 2: (4, 5, 0), 3: (0, 5, 0)}
move_counter is 30
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 0), 1: (4, 2, 0), 2: (4, 5, 0), 3: (0, 5, 0)}
previous_agents are {0: (0, 2, 0), 1: (5, 2, 0), 2: (5, 5, 0), 3: (0, 5, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 0), 1: (5, 2, 0), 2: (5, 5, 0), 3: (0, 0, 0)}
{0: (0, 2, 0), 1: (4, 2, 0), 2: (4, 5, 0), 3: (0, 5, 0)}
welp
welp
agents are {0: (0, 2, 0), 1: (3, 2, 0), 2: (3, 5, 0), 3: (0, 5, 0)}
move_counter is 34
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 0), 1: (3, 2, 0), 2: (3, 5, 0), 3: (0, 5, 0)}
previous_agents are {0: (0, 2, 0), 1: (4, 2, 0), 2: (4, 5, 0), 3: (0, 5, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 0), 1: (4, 2, 0), 2: (4, 5, 0), 3: (0, 0, 0)}
{0: (0, 2, 0), 1: (3, 2, 0), 2: (3, 5, 0), 3: (0, 5, 0)}
welp
welp
agents are {0: (0, 2, 0), 1: (2, 2, 0), 2: (2, 5, 0), 3: (0, 5, 0)}
move_counter is 38
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 0), 1: (2, 2, 0), 2: (2, 5, 0), 3: (0, 5, 0)}
previous_agents are {0: (0, 2, 0), 1: (3, 2, 0), 2: (3, 5, 0), 3: (0, 5, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 0), 1: (3, 2, 0), 2: (3, 5, 0), 3: (0, 0, 0)}
{0: (0, 2, 0), 1: (2, 2, 0), 2: (2, 5, 0), 3: (0, 5, 0)}
welp
welp
agents are {0: (0, 2, 0), 1: (1, 2, 0), 2: (1, 5, 0), 3: (0, 5, 0)}
move_counter is 42
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 0), 1: (1, 2, 0), 2: (1, 5, 0), 3: (0, 5, 0)}
previous_agents are {0: (0, 2, 0), 1: (2, 2, 0), 2: (2, 5, 0), 3: (0, 5, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 0), 1: (2, 2, 0), 2: (2, 5, 0), 3: (0, 0, 0)}
{0: (0, 2, 0), 1: (1, 2, 0), 2: (1, 5, 0), 3: (0, 5, 0)}
value of y is 1
welp
welp
agents are {0: (0, 2, 0), 1: (1, 2, 0), 2: (1, 4, 0), 3: (0, 4, 0)}
move_counter is 46
welp
welp
agents are {0: (0, 3, 0), 1: (1, 3, 0), 2: (1, 4, 0), 3: (0, 4, 0)}
move_counter is 48
agents are at {0: (0, 3, 0), 1: (1, 3, 0), 2: (1, 4, 0), 3: (0, 4, 0)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 0), 1: (1, 2, 0), 2: (1, 5, 0), 3: (0, 5, 0)}
if happened (moving along second dimension)
{0: (0, 3, 0), 1: (1, 3, 0), 2: (1, 4, 0), 3: (0, 4, 0)}
we finshed
welp
welp
agents are {0: (0, 3, 0), 1: (2, 3, 0), 2: (2, 4, 0), 3: (0, 4, 0)}
move_counter is 54
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 0), 1: (2, 3, 0), 2: (2, 4, 0), 3: (0, 4, 0)}
previous_agents are {0: (0, 3, 0), 1: (1, 3, 0), 2: (1, 4, 0), 3: (0, 4, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 0), 1: (1, 3, 0), 2: (1, 4, 0), 3: (0, 5, 0)}
{0: (0, 3, 0), 1: (2, 3, 0), 2: (2, 4, 0), 3: (0, 4, 0)}
welp
welp
agents are {0: (0, 3, 0), 1: (3, 3, 0), 2: (3, 4, 0), 3: (0, 4, 0)}
move_counter is 58
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 0), 1: (3, 3, 0), 2: (3, 4, 0), 3: (0, 4, 0)}
previous_agents are {0: (0, 3, 0), 1: (2, 3, 0), 2: (2, 4, 0), 3: (0, 4, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 0), 1: (2, 3, 0), 2: (2, 4, 0), 3: (0, 5, 0)}
{0: (0, 3, 0), 1: (3, 3, 0), 2: (3, 4, 0), 3: (0, 4, 0)}
welp
welp
agents are {0: (0, 3, 0), 1: (4, 3, 0), 2: (4, 4, 0), 3: (0, 4, 0)}
move_counter is 62
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 0), 1: (4, 3, 0), 2: (4, 4, 0), 3: (0, 4, 0)}
previous_agents are {0: (0, 3, 0), 1: (3, 3, 0), 2: (3, 4, 0), 3: (0, 4, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 0), 1: (3, 3, 0), 2: (3, 4, 0), 3: (0, 5, 0)}
{0: (0, 3, 0), 1: (4, 3, 0), 2: (4, 4, 0), 3: (0, 4, 0)}
welp
welp
agents are {0: (0, 3, 0), 1: (5, 3, 0), 2: (5, 4, 0), 3: (0, 4, 0)}
move_counter is 66
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 0), 1: (5, 3, 0), 2: (5, 4, 0), 3: (0, 4, 0)}
previous_agents are {0: (0, 3, 0), 1: (4, 3, 0), 2: (4, 4, 0), 3: (0, 4, 0)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 0), 1: (4, 3, 0), 2: (4, 4, 0), 3: (0, 5, 0)}
{0: (0, 3, 0), 1: (5, 3, 0), 2: (5, 4, 0), 3: (0, 4, 0)}
value of y is -1
we finshed
moving 1 in the 3th dimension
welp
welp
welp
welp
{0: (0, 3, 1), 1: (5, 3, 1), 2: (5, 4, 1), 3: (0, 4, 1)}
agents are at {0: (0, 3, 1), 1: (5, 3, 1), 2: (5, 4, 1), 3: (0, 4, 1)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 0), 1: (5, 3, 0), 2: (5, 4, 0), 3: (0, 4, 0)}
ITERCUBE s == 6-m commencing
value of t is 2
cube is starting
welp
welp
agents are {0: (0, 3, 1), 1: (4, 3, 1), 2: (4, 4, 1), 3: (0, 4, 1)}
move_counter is 78
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 1), 1: (4, 3, 1), 2: (4, 4, 1), 3: (0, 4, 1)}
previous_agents are {0: (0, 3, 1), 1: (5, 3, 1), 2: (5, 4, 1), 3: (0, 4, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 0), 1: (5, 3, 1), 2: (5, 4, 1), 3: (0, 4, 0)}
{0: (0, 3, 1), 1: (4, 3, 1), 2: (4, 4, 1), 3: (0, 4, 1)}
welp
welp
agents are {0: (0, 3, 1), 1: (3, 3, 1), 2: (3, 4, 1), 3: (0, 4, 1)}
move_counter is 82
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 1), 1: (3, 3, 1), 2: (3, 4, 1), 3: (0, 4, 1)}
previous_agents are {0: (0, 3, 1), 1: (4, 3, 1), 2: (4, 4, 1), 3: (0, 4, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 0), 1: (4, 3, 1), 2: (4, 4, 1), 3: (0, 4, 0)}
{0: (0, 3, 1), 1: (3, 3, 1), 2: (3, 4, 1), 3: (0, 4, 1)}
welp
welp
agents are {0: (0, 3, 1), 1: (2, 3, 1), 2: (2, 4, 1), 3: (0, 4, 1)}
move_counter is 86
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 1), 1: (2, 3, 1), 2: (2, 4, 1), 3: (0, 4, 1)}
previous_agents are {0: (0, 3, 1), 1: (3, 3, 1), 2: (3, 4, 1), 3: (0, 4, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 0), 1: (3, 3, 1), 2: (3, 4, 1), 3: (0, 4, 0)}
{0: (0, 3, 1), 1: (2, 3, 1), 2: (2, 4, 1), 3: (0, 4, 1)}
welp
welp
agents are {0: (0, 3, 1), 1: (1, 3, 1), 2: (1, 4, 1), 3: (0, 4, 1)}
move_counter is 90
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 1), 1: (1, 3, 1), 2: (1, 4, 1), 3: (0, 4, 1)}
previous_agents are {0: (0, 3, 1), 1: (2, 3, 1), 2: (2, 4, 1), 3: (0, 4, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 0), 1: (2, 3, 1), 2: (2, 4, 1), 3: (0, 4, 0)}
{0: (0, 3, 1), 1: (1, 3, 1), 2: (1, 4, 1), 3: (0, 4, 1)}
value of y is 1
welp
welp
agents are {0: (0, 3, 1), 1: (1, 3, 1), 2: (1, 5, 1), 3: (0, 5, 1)}
move_counter is 94
welp
welp
agents are {0: (0, 2, 1), 1: (1, 2, 1), 2: (1, 5, 1), 3: (0, 5, 1)}
move_counter is 96
agents are at {0: (0, 2, 1), 1: (1, 2, 1), 2: (1, 5, 1), 3: (0, 5, 1)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 1), 1: (1, 3, 1), 2: (1, 4, 1), 3: (0, 4, 1)}
if happened (moving along second dimension)
{0: (0, 2, 1), 1: (1, 2, 1), 2: (1, 5, 1), 3: (0, 5, 1)}
we finshed
welp
welp
agents are {0: (0, 2, 1), 1: (2, 2, 1), 2: (2, 5, 1), 3: (0, 5, 1)}
move_counter is 102
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 1), 1: (2, 2, 1), 2: (2, 5, 1), 3: (0, 5, 1)}
previous_agents are {0: (0, 2, 1), 1: (1, 2, 1), 2: (1, 5, 1), 3: (0, 5, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 1), 1: (1, 2, 1), 2: (1, 5, 1), 3: (0, 4, 1)}
{0: (0, 2, 1), 1: (2, 2, 1), 2: (2, 5, 1), 3: (0, 5, 1)}
welp
welp
agents are {0: (0, 2, 1), 1: (3, 2, 1), 2: (3, 5, 1), 3: (0, 5, 1)}
move_counter is 106
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 1), 1: (3, 2, 1), 2: (3, 5, 1), 3: (0, 5, 1)}
previous_agents are {0: (0, 2, 1), 1: (2, 2, 1), 2: (2, 5, 1), 3: (0, 5, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 1), 1: (2, 2, 1), 2: (2, 5, 1), 3: (0, 4, 1)}
{0: (0, 2, 1), 1: (3, 2, 1), 2: (3, 5, 1), 3: (0, 5, 1)}
welp
welp
agents are {0: (0, 2, 1), 1: (4, 2, 1), 2: (4, 5, 1), 3: (0, 5, 1)}
move_counter is 110
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 1), 1: (4, 2, 1), 2: (4, 5, 1), 3: (0, 5, 1)}
previous_agents are {0: (0, 2, 1), 1: (3, 2, 1), 2: (3, 5, 1), 3: (0, 5, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 1), 1: (3, 2, 1), 2: (3, 5, 1), 3: (0, 4, 1)}
{0: (0, 2, 1), 1: (4, 2, 1), 2: (4, 5, 1), 3: (0, 5, 1)}
welp
welp
agents are {0: (0, 2, 1), 1: (5, 2, 1), 2: (5, 5, 1), 3: (0, 5, 1)}
move_counter is 114
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 1), 1: (5, 2, 1), 2: (5, 5, 1), 3: (0, 5, 1)}
previous_agents are {0: (0, 2, 1), 1: (4, 2, 1), 2: (4, 5, 1), 3: (0, 5, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 1), 1: (4, 2, 1), 2: (4, 5, 1), 3: (0, 4, 1)}
{0: (0, 2, 1), 1: (5, 2, 1), 2: (5, 5, 1), 3: (0, 5, 1)}
value of y is -1
welp
welp
agents are {0: (0, 2, 1), 1: (5, 2, 1), 2: (5, 0, 1), 3: (0, 0, 1)}
move_counter is 118
welp
welp
agents are {0: (0, 1, 1), 1: (5, 1, 1), 2: (5, 0, 1), 3: (0, 0, 1)}
move_counter is 120
agents are at {0: (0, 1, 1), 1: (5, 1, 1), 2: (5, 0, 1), 3: (0, 0, 1)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 1), 1: (5, 2, 1), 2: (5, 5, 1), 3: (0, 5, 1)}
if happened (moving along second dimension)
{0: (0, 1, 1), 1: (5, 1, 1), 2: (5, 0, 1), 3: (0, 0, 1)}
we finshed
welp
welp
agents are {0: (0, 1, 1), 1: (4, 1, 1), 2: (4, 0, 1), 3: (0, 0, 1)}
move_counter is 126
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 1), 1: (4, 1, 1), 2: (4, 0, 1), 3: (0, 0, 1)}
previous_agents are {0: (0, 1, 1), 1: (5, 1, 1), 2: (5, 0, 1), 3: (0, 0, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 1), 1: (5, 1, 1), 2: (5, 0, 1), 3: (0, 5, 1)}
{0: (0, 1, 1), 1: (4, 1, 1), 2: (4, 0, 1), 3: (0, 0, 1)}
welp
welp
agents are {0: (0, 1, 1), 1: (3, 1, 1), 2: (3, 0, 1), 3: (0, 0, 1)}
move_counter is 130
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 1), 1: (3, 1, 1), 2: (3, 0, 1), 3: (0, 0, 1)}
previous_agents are {0: (0, 1, 1), 1: (4, 1, 1), 2: (4, 0, 1), 3: (0, 0, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 1), 1: (4, 1, 1), 2: (4, 0, 1), 3: (0, 5, 1)}
{0: (0, 1, 1), 1: (3, 1, 1), 2: (3, 0, 1), 3: (0, 0, 1)}
welp
welp
agents are {0: (0, 1, 1), 1: (2, 1, 1), 2: (2, 0, 1), 3: (0, 0, 1)}
move_counter is 134
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 1), 1: (2, 1, 1), 2: (2, 0, 1), 3: (0, 0, 1)}
previous_agents are {0: (0, 1, 1), 1: (3, 1, 1), 2: (3, 0, 1), 3: (0, 0, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 1), 1: (3, 1, 1), 2: (3, 0, 1), 3: (0, 5, 1)}
{0: (0, 1, 1), 1: (2, 1, 1), 2: (2, 0, 1), 3: (0, 0, 1)}
welp
welp
agents are {0: (0, 1, 1), 1: (1, 1, 1), 2: (1, 0, 1), 3: (0, 0, 1)}
move_counter is 138
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 1), 1: (1, 1, 1), 2: (1, 0, 1), 3: (0, 0, 1)}
previous_agents are {0: (0, 1, 1), 1: (2, 1, 1), 2: (2, 0, 1), 3: (0, 0, 1)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 1), 1: (2, 1, 1), 2: (2, 0, 1), 3: (0, 5, 1)}
{0: (0, 1, 1), 1: (1, 1, 1), 2: (1, 0, 1), 3: (0, 0, 1)}
value of y is 1
we finshed
moving 1 in the 3th dimension
welp
welp
welp
welp
{0: (0, 1, 2), 1: (1, 1, 2), 2: (1, 0, 2), 3: (0, 0, 2)}
agents are at {0: (0, 1, 2), 1: (1, 1, 2), 2: (1, 0, 2), 3: (0, 0, 2)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 1), 1: (1, 1, 1), 2: (1, 0, 1), 3: (0, 0, 1)}
ITERCUBE s == 6-m commencing
value of t is 2
cube is starting
welp
welp
agents are {0: (0, 1, 2), 1: (2, 1, 2), 2: (2, 0, 2), 3: (0, 0, 2)}
move_counter is 150
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 2), 1: (2, 1, 2), 2: (2, 0, 2), 3: (0, 0, 2)}
previous_agents are {0: (0, 1, 2), 1: (1, 1, 2), 2: (1, 0, 2), 3: (0, 0, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 1), 1: (1, 1, 2), 2: (1, 0, 2), 3: (0, 0, 1)}
{0: (0, 1, 2), 1: (2, 1, 2), 2: (2, 0, 2), 3: (0, 0, 2)}
welp
welp
agents are {0: (0, 1, 2), 1: (3, 1, 2), 2: (3, 0, 2), 3: (0, 0, 2)}
move_counter is 154
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 2), 1: (3, 1, 2), 2: (3, 0, 2), 3: (0, 0, 2)}
previous_agents are {0: (0, 1, 2), 1: (2, 1, 2), 2: (2, 0, 2), 3: (0, 0, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 1), 1: (2, 1, 2), 2: (2, 0, 2), 3: (0, 0, 1)}
{0: (0, 1, 2), 1: (3, 1, 2), 2: (3, 0, 2), 3: (0, 0, 2)}
welp
welp
agents are {0: (0, 1, 2), 1: (4, 1, 2), 2: (4, 0, 2), 3: (0, 0, 2)}
move_counter is 158
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 2), 1: (4, 1, 2), 2: (4, 0, 2), 3: (0, 0, 2)}
previous_agents are {0: (0, 1, 2), 1: (3, 1, 2), 2: (3, 0, 2), 3: (0, 0, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 1), 1: (3, 1, 2), 2: (3, 0, 2), 3: (0, 0, 1)}
{0: (0, 1, 2), 1: (4, 1, 2), 2: (4, 0, 2), 3: (0, 0, 2)}
welp
welp
agents are {0: (0, 1, 2), 1: (5, 1, 2), 2: (5, 0, 2), 3: (0, 0, 2)}
move_counter is 162
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 2), 1: (5, 1, 2), 2: (5, 0, 2), 3: (0, 0, 2)}
previous_agents are {0: (0, 1, 2), 1: (4, 1, 2), 2: (4, 0, 2), 3: (0, 0, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 1), 1: (4, 1, 2), 2: (4, 0, 2), 3: (0, 0, 1)}
{0: (0, 1, 2), 1: (5, 1, 2), 2: (5, 0, 2), 3: (0, 0, 2)}
value of y is -1
welp
welp
agents are {0: (0, 1, 2), 1: (5, 1, 2), 2: (5, 5, 2), 3: (0, 5, 2)}
move_counter is 166
welp
welp
agents are {0: (0, 2, 2), 1: (5, 2, 2), 2: (5, 5, 2), 3: (0, 5, 2)}
move_counter is 168
agents are at {0: (0, 2, 2), 1: (5, 2, 2), 2: (5, 5, 2), 3: (0, 5, 2)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 2), 1: (5, 1, 2), 2: (5, 0, 2), 3: (0, 0, 2)}
if happened (moving along second dimension)
{0: (0, 2, 2), 1: (5, 2, 2), 2: (5, 5, 2), 3: (0, 5, 2)}
we finshed
welp
welp
agents are {0: (0, 2, 2), 1: (4, 2, 2), 2: (4, 5, 2), 3: (0, 5, 2)}
move_counter is 174
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 2), 1: (4, 2, 2), 2: (4, 5, 2), 3: (0, 5, 2)}
previous_agents are {0: (0, 2, 2), 1: (5, 2, 2), 2: (5, 5, 2), 3: (0, 5, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 2), 1: (5, 2, 2), 2: (5, 5, 2), 3: (0, 0, 2)}
{0: (0, 2, 2), 1: (4, 2, 2), 2: (4, 5, 2), 3: (0, 5, 2)}
welp
welp
agents are {0: (0, 2, 2), 1: (3, 2, 2), 2: (3, 5, 2), 3: (0, 5, 2)}
move_counter is 178
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 2), 1: (3, 2, 2), 2: (3, 5, 2), 3: (0, 5, 2)}
previous_agents are {0: (0, 2, 2), 1: (4, 2, 2), 2: (4, 5, 2), 3: (0, 5, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 2), 1: (4, 2, 2), 2: (4, 5, 2), 3: (0, 0, 2)}
{0: (0, 2, 2), 1: (3, 2, 2), 2: (3, 5, 2), 3: (0, 5, 2)}
welp
welp
agents are {0: (0, 2, 2), 1: (2, 2, 2), 2: (2, 5, 2), 3: (0, 5, 2)}
move_counter is 182
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 2), 1: (2, 2, 2), 2: (2, 5, 2), 3: (0, 5, 2)}
previous_agents are {0: (0, 2, 2), 1: (3, 2, 2), 2: (3, 5, 2), 3: (0, 5, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 2), 1: (3, 2, 2), 2: (3, 5, 2), 3: (0, 0, 2)}
{0: (0, 2, 2), 1: (2, 2, 2), 2: (2, 5, 2), 3: (0, 5, 2)}
welp
welp
agents are {0: (0, 2, 2), 1: (1, 2, 2), 2: (1, 5, 2), 3: (0, 5, 2)}
move_counter is 186
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 2), 1: (1, 2, 2), 2: (1, 5, 2), 3: (0, 5, 2)}
previous_agents are {0: (0, 2, 2), 1: (2, 2, 2), 2: (2, 5, 2), 3: (0, 5, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 2), 1: (2, 2, 2), 2: (2, 5, 2), 3: (0, 0, 2)}
{0: (0, 2, 2), 1: (1, 2, 2), 2: (1, 5, 2), 3: (0, 5, 2)}
value of y is 1
welp
welp
agents are {0: (0, 2, 2), 1: (1, 2, 2), 2: (1, 4, 2), 3: (0, 4, 2)}
move_counter is 190
welp
welp
agents are {0: (0, 3, 2), 1: (1, 3, 2), 2: (1, 4, 2), 3: (0, 4, 2)}
move_counter is 192
agents are at {0: (0, 3, 2), 1: (1, 3, 2), 2: (1, 4, 2), 3: (0, 4, 2)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 2), 1: (1, 2, 2), 2: (1, 5, 2), 3: (0, 5, 2)}
if happened (moving along second dimension)
{0: (0, 3, 2), 1: (1, 3, 2), 2: (1, 4, 2), 3: (0, 4, 2)}
we finshed
welp
welp
agents are {0: (0, 3, 2), 1: (2, 3, 2), 2: (2, 4, 2), 3: (0, 4, 2)}
move_counter is 198
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 2), 1: (2, 3, 2), 2: (2, 4, 2), 3: (0, 4, 2)}
previous_agents are {0: (0, 3, 2), 1: (1, 3, 2), 2: (1, 4, 2), 3: (0, 4, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 2), 1: (1, 3, 2), 2: (1, 4, 2), 3: (0, 5, 2)}
{0: (0, 3, 2), 1: (2, 3, 2), 2: (2, 4, 2), 3: (0, 4, 2)}
welp
welp
agents are {0: (0, 3, 2), 1: (3, 3, 2), 2: (3, 4, 2), 3: (0, 4, 2)}
move_counter is 202
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 2), 1: (3, 3, 2), 2: (3, 4, 2), 3: (0, 4, 2)}
previous_agents are {0: (0, 3, 2), 1: (2, 3, 2), 2: (2, 4, 2), 3: (0, 4, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 2), 1: (2, 3, 2), 2: (2, 4, 2), 3: (0, 5, 2)}
{0: (0, 3, 2), 1: (3, 3, 2), 2: (3, 4, 2), 3: (0, 4, 2)}
welp
welp
agents are {0: (0, 3, 2), 1: (4, 3, 2), 2: (4, 4, 2), 3: (0, 4, 2)}
move_counter is 206
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 2), 1: (4, 3, 2), 2: (4, 4, 2), 3: (0, 4, 2)}
previous_agents are {0: (0, 3, 2), 1: (3, 3, 2), 2: (3, 4, 2), 3: (0, 4, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 2), 1: (3, 3, 2), 2: (3, 4, 2), 3: (0, 5, 2)}
{0: (0, 3, 2), 1: (4, 3, 2), 2: (4, 4, 2), 3: (0, 4, 2)}
welp
welp
agents are {0: (0, 3, 2), 1: (5, 3, 2), 2: (5, 4, 2), 3: (0, 4, 2)}
move_counter is 210
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 2), 1: (5, 3, 2), 2: (5, 4, 2), 3: (0, 4, 2)}
previous_agents are {0: (0, 3, 2), 1: (4, 3, 2), 2: (4, 4, 2), 3: (0, 4, 2)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 2), 1: (4, 3, 2), 2: (4, 4, 2), 3: (0, 5, 2)}
{0: (0, 3, 2), 1: (5, 3, 2), 2: (5, 4, 2), 3: (0, 4, 2)}
value of y is -1
we finshed
moving 1 in the 3th dimension
welp
welp
welp
welp
{0: (0, 3, 3), 1: (5, 3, 3), 2: (5, 4, 3), 3: (0, 4, 3)}
agents are at {0: (0, 3, 3), 1: (5, 3, 3), 2: (5, 4, 3), 3: (0, 4, 3)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 2), 1: (5, 3, 2), 2: (5, 4, 2), 3: (0, 4, 2)}
ITERCUBE s == 6-m commencing
value of t is 2
cube is starting
welp
welp
agents are {0: (0, 3, 3), 1: (4, 3, 3), 2: (4, 4, 3), 3: (0, 4, 3)}
move_counter is 222
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 3), 1: (4, 3, 3), 2: (4, 4, 3), 3: (0, 4, 3)}
previous_agents are {0: (0, 3, 3), 1: (5, 3, 3), 2: (5, 4, 3), 3: (0, 4, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 2), 1: (5, 3, 3), 2: (5, 4, 3), 3: (0, 4, 2)}
{0: (0, 3, 3), 1: (4, 3, 3), 2: (4, 4, 3), 3: (0, 4, 3)}
welp
welp
agents are {0: (0, 3, 3), 1: (3, 3, 3), 2: (3, 4, 3), 3: (0, 4, 3)}
move_counter is 226
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 3), 1: (3, 3, 3), 2: (3, 4, 3), 3: (0, 4, 3)}
previous_agents are {0: (0, 3, 3), 1: (4, 3, 3), 2: (4, 4, 3), 3: (0, 4, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 2), 1: (4, 3, 3), 2: (4, 4, 3), 3: (0, 4, 2)}
{0: (0, 3, 3), 1: (3, 3, 3), 2: (3, 4, 3), 3: (0, 4, 3)}
welp
welp
agents are {0: (0, 3, 3), 1: (2, 3, 3), 2: (2, 4, 3), 3: (0, 4, 3)}
move_counter is 230
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 3), 1: (2, 3, 3), 2: (2, 4, 3), 3: (0, 4, 3)}
previous_agents are {0: (0, 3, 3), 1: (3, 3, 3), 2: (3, 4, 3), 3: (0, 4, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 2), 1: (3, 3, 3), 2: (3, 4, 3), 3: (0, 4, 2)}
{0: (0, 3, 3), 1: (2, 3, 3), 2: (2, 4, 3), 3: (0, 4, 3)}
welp
welp
agents are {0: (0, 3, 3), 1: (1, 3, 3), 2: (1, 4, 3), 3: (0, 4, 3)}
move_counter is 234
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 3), 1: (1, 3, 3), 2: (1, 4, 3), 3: (0, 4, 3)}
previous_agents are {0: (0, 3, 3), 1: (2, 3, 3), 2: (2, 4, 3), 3: (0, 4, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 2), 1: (2, 3, 3), 2: (2, 4, 3), 3: (0, 4, 2)}
{0: (0, 3, 3), 1: (1, 3, 3), 2: (1, 4, 3), 3: (0, 4, 3)}
value of y is 1
welp
welp
agents are {0: (0, 3, 3), 1: (1, 3, 3), 2: (1, 5, 3), 3: (0, 5, 3)}
move_counter is 238
welp
welp
agents are {0: (0, 2, 3), 1: (1, 2, 3), 2: (1, 5, 3), 3: (0, 5, 3)}
move_counter is 240
agents are at {0: (0, 2, 3), 1: (1, 2, 3), 2: (1, 5, 3), 3: (0, 5, 3)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 3), 1: (1, 3, 3), 2: (1, 4, 3), 3: (0, 4, 3)}
if happened (moving along second dimension)
{0: (0, 2, 3), 1: (1, 2, 3), 2: (1, 5, 3), 3: (0, 5, 3)}
we finshed
welp
welp
agents are {0: (0, 2, 3), 1: (2, 2, 3), 2: (2, 5, 3), 3: (0, 5, 3)}
move_counter is 246
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 3), 1: (2, 2, 3), 2: (2, 5, 3), 3: (0, 5, 3)}
previous_agents are {0: (0, 2, 3), 1: (1, 2, 3), 2: (1, 5, 3), 3: (0, 5, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 3), 1: (1, 2, 3), 2: (1, 5, 3), 3: (0, 4, 3)}
{0: (0, 2, 3), 1: (2, 2, 3), 2: (2, 5, 3), 3: (0, 5, 3)}
welp
welp
agents are {0: (0, 2, 3), 1: (3, 2, 3), 2: (3, 5, 3), 3: (0, 5, 3)}
move_counter is 250
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 3), 1: (3, 2, 3), 2: (3, 5, 3), 3: (0, 5, 3)}
previous_agents are {0: (0, 2, 3), 1: (2, 2, 3), 2: (2, 5, 3), 3: (0, 5, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 3), 1: (2, 2, 3), 2: (2, 5, 3), 3: (0, 4, 3)}
{0: (0, 2, 3), 1: (3, 2, 3), 2: (3, 5, 3), 3: (0, 5, 3)}
welp
welp
agents are {0: (0, 2, 3), 1: (4, 2, 3), 2: (4, 5, 3), 3: (0, 5, 3)}
move_counter is 254
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 3), 1: (4, 2, 3), 2: (4, 5, 3), 3: (0, 5, 3)}
previous_agents are {0: (0, 2, 3), 1: (3, 2, 3), 2: (3, 5, 3), 3: (0, 5, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 3), 1: (3, 2, 3), 2: (3, 5, 3), 3: (0, 4, 3)}
{0: (0, 2, 3), 1: (4, 2, 3), 2: (4, 5, 3), 3: (0, 5, 3)}
welp
welp
agents are {0: (0, 2, 3), 1: (5, 2, 3), 2: (5, 5, 3), 3: (0, 5, 3)}
move_counter is 258
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 3), 1: (5, 2, 3), 2: (5, 5, 3), 3: (0, 5, 3)}
previous_agents are {0: (0, 2, 3), 1: (4, 2, 3), 2: (4, 5, 3), 3: (0, 5, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 3), 1: (4, 2, 3), 2: (4, 5, 3), 3: (0, 4, 3)}
{0: (0, 2, 3), 1: (5, 2, 3), 2: (5, 5, 3), 3: (0, 5, 3)}
value of y is -1
welp
welp
agents are {0: (0, 2, 3), 1: (5, 2, 3), 2: (5, 0, 3), 3: (0, 0, 3)}
move_counter is 262
welp
welp
agents are {0: (0, 1, 3), 1: (5, 1, 3), 2: (5, 0, 3), 3: (0, 0, 3)}
move_counter is 264
agents are at {0: (0, 1, 3), 1: (5, 1, 3), 2: (5, 0, 3), 3: (0, 0, 3)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 3), 1: (5, 2, 3), 2: (5, 5, 3), 3: (0, 5, 3)}
if happened (moving along second dimension)
{0: (0, 1, 3), 1: (5, 1, 3), 2: (5, 0, 3), 3: (0, 0, 3)}
we finshed
welp
welp
agents are {0: (0, 1, 3), 1: (4, 1, 3), 2: (4, 0, 3), 3: (0, 0, 3)}
move_counter is 270
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 3), 1: (4, 1, 3), 2: (4, 0, 3), 3: (0, 0, 3)}
previous_agents are {0: (0, 1, 3), 1: (5, 1, 3), 2: (5, 0, 3), 3: (0, 0, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 3), 1: (5, 1, 3), 2: (5, 0, 3), 3: (0, 5, 3)}
{0: (0, 1, 3), 1: (4, 1, 3), 2: (4, 0, 3), 3: (0, 0, 3)}
welp
welp
agents are {0: (0, 1, 3), 1: (3, 1, 3), 2: (3, 0, 3), 3: (0, 0, 3)}
move_counter is 274
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 3), 1: (3, 1, 3), 2: (3, 0, 3), 3: (0, 0, 3)}
previous_agents are {0: (0, 1, 3), 1: (4, 1, 3), 2: (4, 0, 3), 3: (0, 0, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 3), 1: (4, 1, 3), 2: (4, 0, 3), 3: (0, 5, 3)}
{0: (0, 1, 3), 1: (3, 1, 3), 2: (3, 0, 3), 3: (0, 0, 3)}
welp
welp
agents are {0: (0, 1, 3), 1: (2, 1, 3), 2: (2, 0, 3), 3: (0, 0, 3)}
move_counter is 278
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 3), 1: (2, 1, 3), 2: (2, 0, 3), 3: (0, 0, 3)}
previous_agents are {0: (0, 1, 3), 1: (3, 1, 3), 2: (3, 0, 3), 3: (0, 0, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 3), 1: (3, 1, 3), 2: (3, 0, 3), 3: (0, 5, 3)}
{0: (0, 1, 3), 1: (2, 1, 3), 2: (2, 0, 3), 3: (0, 0, 3)}
welp
welp
agents are {0: (0, 1, 3), 1: (1, 1, 3), 2: (1, 0, 3), 3: (0, 0, 3)}
move_counter is 282
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 3), 1: (1, 1, 3), 2: (1, 0, 3), 3: (0, 0, 3)}
previous_agents are {0: (0, 1, 3), 1: (2, 1, 3), 2: (2, 0, 3), 3: (0, 0, 3)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 3), 1: (2, 1, 3), 2: (2, 0, 3), 3: (0, 5, 3)}
{0: (0, 1, 3), 1: (1, 1, 3), 2: (1, 0, 3), 3: (0, 0, 3)}
value of y is 1
we finshed
moving 1 in the 3th dimension
welp
welp
welp
welp
{0: (0, 1, 4), 1: (1, 1, 4), 2: (1, 0, 4), 3: (0, 0, 4)}
agents are at {0: (0, 1, 4), 1: (1, 1, 4), 2: (1, 0, 4), 3: (0, 0, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 3), 1: (1, 1, 3), 2: (1, 0, 3), 3: (0, 0, 3)}
ITERCUBE s == 6-m commencing
value of t is 2
cube is starting
welp
welp
agents are {0: (0, 1, 4), 1: (2, 1, 4), 2: (2, 0, 4), 3: (0, 0, 4)}
move_counter is 294
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 4), 1: (2, 1, 4), 2: (2, 0, 4), 3: (0, 0, 4)}
previous_agents are {0: (0, 1, 4), 1: (1, 1, 4), 2: (1, 0, 4), 3: (0, 0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 3), 1: (1, 1, 4), 2: (1, 0, 4), 3: (0, 0, 3)}
{0: (0, 1, 4), 1: (2, 1, 4), 2: (2, 0, 4), 3: (0, 0, 4)}
welp
welp
agents are {0: (0, 1, 4), 1: (3, 1, 4), 2: (3, 0, 4), 3: (0, 0, 4)}
move_counter is 298
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 4), 1: (3, 1, 4), 2: (3, 0, 4), 3: (0, 0, 4)}
previous_agents are {0: (0, 1, 4), 1: (2, 1, 4), 2: (2, 0, 4), 3: (0, 0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 3), 1: (2, 1, 4), 2: (2, 0, 4), 3: (0, 0, 3)}
{0: (0, 1, 4), 1: (3, 1, 4), 2: (3, 0, 4), 3: (0, 0, 4)}
welp
welp
agents are {0: (0, 1, 4), 1: (4, 1, 4), 2: (4, 0, 4), 3: (0, 0, 4)}
move_counter is 302
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 4), 1: (4, 1, 4), 2: (4, 0, 4), 3: (0, 0, 4)}
previous_agents are {0: (0, 1, 4), 1: (3, 1, 4), 2: (3, 0, 4), 3: (0, 0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 3), 1: (3, 1, 4), 2: (3, 0, 4), 3: (0, 0, 3)}
{0: (0, 1, 4), 1: (4, 1, 4), 2: (4, 0, 4), 3: (0, 0, 4)}
welp
welp
agents are {0: (0, 1, 4), 1: (5, 1, 4), 2: (5, 0, 4), 3: (0, 0, 4)}
move_counter is 306
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 1, 4), 1: (5, 1, 4), 2: (5, 0, 4), 3: (0, 0, 4)}
previous_agents are {0: (0, 1, 4), 1: (4, 1, 4), 2: (4, 0, 4), 3: (0, 0, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 3), 1: (4, 1, 4), 2: (4, 0, 4), 3: (0, 0, 3)}
{0: (0, 1, 4), 1: (5, 1, 4), 2: (5, 0, 4), 3: (0, 0, 4)}
value of y is -1
welp
welp
agents are {0: (0, 1, 4), 1: (5, 1, 4), 2: (5, 5, 4), 3: (0, 5, 4)}
move_counter is 310
welp
welp
agents are {0: (0, 2, 4), 1: (5, 2, 4), 2: (5, 5, 4), 3: (0, 5, 4)}
move_counter is 312
agents are at {0: (0, 2, 4), 1: (5, 2, 4), 2: (5, 5, 4), 3: (0, 5, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 4), 1: (5, 1, 4), 2: (5, 0, 4), 3: (0, 0, 4)}
if happened (moving along second dimension)
{0: (0, 2, 4), 1: (5, 2, 4), 2: (5, 5, 4), 3: (0, 5, 4)}
we finshed
welp
welp
agents are {0: (0, 2, 4), 1: (4, 2, 4), 2: (4, 5, 4), 3: (0, 5, 4)}
move_counter is 318
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 4), 1: (4, 2, 4), 2: (4, 5, 4), 3: (0, 5, 4)}
previous_agents are {0: (0, 2, 4), 1: (5, 2, 4), 2: (5, 5, 4), 3: (0, 5, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 4), 1: (5, 2, 4), 2: (5, 5, 4), 3: (0, 0, 4)}
{0: (0, 2, 4), 1: (4, 2, 4), 2: (4, 5, 4), 3: (0, 5, 4)}
welp
welp
agents are {0: (0, 2, 4), 1: (3, 2, 4), 2: (3, 5, 4), 3: (0, 5, 4)}
move_counter is 322
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 4), 1: (3, 2, 4), 2: (3, 5, 4), 3: (0, 5, 4)}
previous_agents are {0: (0, 2, 4), 1: (4, 2, 4), 2: (4, 5, 4), 3: (0, 5, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 4), 1: (4, 2, 4), 2: (4, 5, 4), 3: (0, 0, 4)}
{0: (0, 2, 4), 1: (3, 2, 4), 2: (3, 5, 4), 3: (0, 5, 4)}
welp
welp
agents are {0: (0, 2, 4), 1: (2, 2, 4), 2: (2, 5, 4), 3: (0, 5, 4)}
move_counter is 326
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 4), 1: (2, 2, 4), 2: (2, 5, 4), 3: (0, 5, 4)}
previous_agents are {0: (0, 2, 4), 1: (3, 2, 4), 2: (3, 5, 4), 3: (0, 5, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 4), 1: (3, 2, 4), 2: (3, 5, 4), 3: (0, 0, 4)}
{0: (0, 2, 4), 1: (2, 2, 4), 2: (2, 5, 4), 3: (0, 5, 4)}
welp
welp
agents are {0: (0, 2, 4), 1: (1, 2, 4), 2: (1, 5, 4), 3: (0, 5, 4)}
move_counter is 330
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 2, 4), 1: (1, 2, 4), 2: (1, 5, 4), 3: (0, 5, 4)}
previous_agents are {0: (0, 2, 4), 1: (2, 2, 4), 2: (2, 5, 4), 3: (0, 5, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 1, 4), 1: (2, 2, 4), 2: (2, 5, 4), 3: (0, 0, 4)}
{0: (0, 2, 4), 1: (1, 2, 4), 2: (1, 5, 4), 3: (0, 5, 4)}
value of y is 1
welp
welp
agents are {0: (0, 2, 4), 1: (1, 2, 4), 2: (1, 4, 4), 3: (0, 4, 4)}
move_counter is 334
welp
welp
agents are {0: (0, 3, 4), 1: (1, 3, 4), 2: (1, 4, 4), 3: (0, 4, 4)}
move_counter is 336
agents are at {0: (0, 3, 4), 1: (1, 3, 4), 2: (1, 4, 4), 3: (0, 4, 4)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 4), 1: (1, 2, 4), 2: (1, 5, 4), 3: (0, 5, 4)}
if happened (moving along second dimension)
{0: (0, 3, 4), 1: (1, 3, 4), 2: (1, 4, 4), 3: (0, 4, 4)}
we finshed
welp
welp
agents are {0: (0, 3, 4), 1: (2, 3, 4), 2: (2, 4, 4), 3: (0, 4, 4)}
move_counter is 342
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 4), 1: (2, 3, 4), 2: (2, 4, 4), 3: (0, 4, 4)}
previous_agents are {0: (0, 3, 4), 1: (1, 3, 4), 2: (1, 4, 4), 3: (0, 4, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 4), 1: (1, 3, 4), 2: (1, 4, 4), 3: (0, 5, 4)}
{0: (0, 3, 4), 1: (2, 3, 4), 2: (2, 4, 4), 3: (0, 4, 4)}
welp
welp
agents are {0: (0, 3, 4), 1: (3, 3, 4), 2: (3, 4, 4), 3: (0, 4, 4)}
move_counter is 346
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 4), 1: (3, 3, 4), 2: (3, 4, 4), 3: (0, 4, 4)}
previous_agents are {0: (0, 3, 4), 1: (2, 3, 4), 2: (2, 4, 4), 3: (0, 4, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 4), 1: (2, 3, 4), 2: (2, 4, 4), 3: (0, 5, 4)}
{0: (0, 3, 4), 1: (3, 3, 4), 2: (3, 4, 4), 3: (0, 4, 4)}
welp
welp
agents are {0: (0, 3, 4), 1: (4, 3, 4), 2: (4, 4, 4), 3: (0, 4, 4)}
move_counter is 350
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 4), 1: (4, 3, 4), 2: (4, 4, 4), 3: (0, 4, 4)}
previous_agents are {0: (0, 3, 4), 1: (3, 3, 4), 2: (3, 4, 4), 3: (0, 4, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 4), 1: (3, 3, 4), 2: (3, 4, 4), 3: (0, 5, 4)}
{0: (0, 3, 4), 1: (4, 3, 4), 2: (4, 4, 4), 3: (0, 4, 4)}
welp
welp
agents are {0: (0, 3, 4), 1: (5, 3, 4), 2: (5, 4, 4), 3: (0, 4, 4)}
move_counter is 354
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 3, 4), 1: (5, 3, 4), 2: (5, 4, 4), 3: (0, 4, 4)}
previous_agents are {0: (0, 3, 4), 1: (4, 3, 4), 2: (4, 4, 4), 3: (0, 4, 4)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 4), 1: (4, 3, 4), 2: (4, 4, 4), 3: (0, 5, 4)}
{0: (0, 3, 4), 1: (5, 3, 4), 2: (5, 4, 4), 3: (0, 4, 4)}
value of y is -1
we finshed
moving 1 in the 3th dimension
welp
welp
welp
welp
{0: (0, 3, 5), 1: (5, 3, 5), 2: (5, 4, 5), 3: (0, 4, 5)}
agents are at {0: (0, 3, 5), 1: (5, 3, 5), 2: (5, 4, 5), 3: (0, 4, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 4), 1: (5, 3, 4), 2: (5, 4, 4), 3: (0, 4, 4)}
ITERCUBE s == 6-m commencing
value of t is 2
cube is starting
welp
welp
agents are {0: (0, 3, 5), 1: (4, 3, 5), 2: (4, 4, 5), 3: (0, 4, 5)}
move_counter is 366
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 5), 1: (4, 3, 5), 2: (4, 4, 5), 3: (0, 4, 5)}
previous_agents are {0: (0, 3, 5), 1: (5, 3, 5), 2: (5, 4, 5), 3: (0, 4, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 4), 1: (5, 3, 5), 2: (5, 4, 5), 3: (0, 4, 4)}
{0: (0, 3, 5), 1: (4, 3, 5), 2: (4, 4, 5), 3: (0, 4, 5)}
welp
welp
agents are {0: (0, 3, 5), 1: (3, 3, 5), 2: (3, 4, 5), 3: (0, 4, 5)}
move_counter is 370
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 5), 1: (3, 3, 5), 2: (3, 4, 5), 3: (0, 4, 5)}
previous_agents are {0: (0, 3, 5), 1: (4, 3, 5), 2: (4, 4, 5), 3: (0, 4, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 4), 1: (4, 3, 5), 2: (4, 4, 5), 3: (0, 4, 4)}
{0: (0, 3, 5), 1: (3, 3, 5), 2: (3, 4, 5), 3: (0, 4, 5)}
welp
welp
agents are {0: (0, 3, 5), 1: (2, 3, 5), 2: (2, 4, 5), 3: (0, 4, 5)}
move_counter is 374
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 5), 1: (2, 3, 5), 2: (2, 4, 5), 3: (0, 4, 5)}
previous_agents are {0: (0, 3, 5), 1: (3, 3, 5), 2: (3, 4, 5), 3: (0, 4, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 4), 1: (3, 3, 5), 2: (3, 4, 5), 3: (0, 4, 4)}
{0: (0, 3, 5), 1: (2, 3, 5), 2: (2, 4, 5), 3: (0, 4, 5)}
welp
welp
agents are {0: (0, 3, 5), 1: (1, 3, 5), 2: (1, 4, 5), 3: (0, 4, 5)}
move_counter is 378
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 3, 5), 1: (1, 3, 5), 2: (1, 4, 5), 3: (0, 4, 5)}
previous_agents are {0: (0, 3, 5), 1: (2, 3, 5), 2: (2, 4, 5), 3: (0, 4, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 4), 1: (2, 3, 5), 2: (2, 4, 5), 3: (0, 4, 4)}
{0: (0, 3, 5), 1: (1, 3, 5), 2: (1, 4, 5), 3: (0, 4, 5)}
value of y is 1
welp
welp
agents are {0: (0, 3, 5), 1: (1, 3, 5), 2: (1, 5, 5), 3: (0, 5, 5)}
move_counter is 382
welp
welp
agents are {0: (0, 2, 5), 1: (1, 2, 5), 2: (1, 5, 5), 3: (0, 5, 5)}
move_counter is 384
agents are at {0: (0, 2, 5), 1: (1, 2, 5), 2: (1, 5, 5), 3: (0, 5, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 5), 1: (1, 3, 5), 2: (1, 4, 5), 3: (0, 4, 5)}
if happened (moving along second dimension)
{0: (0, 2, 5), 1: (1, 2, 5), 2: (1, 5, 5), 3: (0, 5, 5)}
we finshed
welp
welp
agents are {0: (0, 2, 5), 1: (2, 2, 5), 2: (2, 5, 5), 3: (0, 5, 5)}
move_counter is 390
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 5), 1: (2, 2, 5), 2: (2, 5, 5), 3: (0, 5, 5)}
previous_agents are {0: (0, 2, 5), 1: (1, 2, 5), 2: (1, 5, 5), 3: (0, 5, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 5), 1: (1, 2, 5), 2: (1, 5, 5), 3: (0, 4, 5)}
{0: (0, 2, 5), 1: (2, 2, 5), 2: (2, 5, 5), 3: (0, 5, 5)}
welp
welp
agents are {0: (0, 2, 5), 1: (3, 2, 5), 2: (3, 5, 5), 3: (0, 5, 5)}
move_counter is 394
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 5), 1: (3, 2, 5), 2: (3, 5, 5), 3: (0, 5, 5)}
previous_agents are {0: (0, 2, 5), 1: (2, 2, 5), 2: (2, 5, 5), 3: (0, 5, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 5), 1: (2, 2, 5), 2: (2, 5, 5), 3: (0, 4, 5)}
{0: (0, 2, 5), 1: (3, 2, 5), 2: (3, 5, 5), 3: (0, 5, 5)}
welp
welp
agents are {0: (0, 2, 5), 1: (4, 2, 5), 2: (4, 5, 5), 3: (0, 5, 5)}
move_counter is 398
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 5), 1: (4, 2, 5), 2: (4, 5, 5), 3: (0, 5, 5)}
previous_agents are {0: (0, 2, 5), 1: (3, 2, 5), 2: (3, 5, 5), 3: (0, 5, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 5), 1: (3, 2, 5), 2: (3, 5, 5), 3: (0, 4, 5)}
{0: (0, 2, 5), 1: (4, 2, 5), 2: (4, 5, 5), 3: (0, 5, 5)}
welp
welp
agents are {0: (0, 2, 5), 1: (5, 2, 5), 2: (5, 5, 5), 3: (0, 5, 5)}
move_counter is 402
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by 1
agents are at {0: (0, 2, 5), 1: (5, 2, 5), 2: (5, 5, 5), 3: (0, 5, 5)}
previous_agents are {0: (0, 2, 5), 1: (4, 2, 5), 2: (4, 5, 5), 3: (0, 5, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 3, 5), 1: (4, 2, 5), 2: (4, 5, 5), 3: (0, 4, 5)}
{0: (0, 2, 5), 1: (5, 2, 5), 2: (5, 5, 5), 3: (0, 5, 5)}
value of y is -1
welp
welp
agents are {0: (0, 2, 5), 1: (5, 2, 5), 2: (5, 0, 5), 3: (0, 0, 5)}
move_counter is 406
welp
welp
agents are {0: (0, 1, 5), 1: (5, 1, 5), 2: (5, 0, 5), 3: (0, 0, 5)}
move_counter is 408
agents are at {0: (0, 1, 5), 1: (5, 1, 5), 2: (5, 0, 5), 3: (0, 0, 5)}
ribbit
ribbit
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 5), 1: (5, 2, 5), 2: (5, 5, 5), 3: (0, 5, 5)}
if happened (moving along second dimension)
{0: (0, 1, 5), 1: (5, 1, 5), 2: (5, 0, 5), 3: (0, 0, 5)}
we finshed
welp
welp
agents are {0: (0, 1, 5), 1: (4, 1, 5), 2: (4, 0, 5), 3: (0, 0, 5)}
move_counter is 414
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 5), 1: (4, 1, 5), 2: (4, 0, 5), 3: (0, 0, 5)}
previous_agents are {0: (0, 1, 5), 1: (5, 1, 5), 2: (5, 0, 5), 3: (0, 0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 5), 1: (5, 1, 5), 2: (5, 0, 5), 3: (0, 5, 5)}
{0: (0, 1, 5), 1: (4, 1, 5), 2: (4, 0, 5), 3: (0, 0, 5)}
welp
welp
agents are {0: (0, 1, 5), 1: (3, 1, 5), 2: (3, 0, 5), 3: (0, 0, 5)}
move_counter is 418
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 5), 1: (3, 1, 5), 2: (3, 0, 5), 3: (0, 0, 5)}
previous_agents are {0: (0, 1, 5), 1: (4, 1, 5), 2: (4, 0, 5), 3: (0, 0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 5), 1: (4, 1, 5), 2: (4, 0, 5), 3: (0, 5, 5)}
{0: (0, 1, 5), 1: (3, 1, 5), 2: (3, 0, 5), 3: (0, 0, 5)}
welp
welp
agents are {0: (0, 1, 5), 1: (2, 1, 5), 2: (2, 0, 5), 3: (0, 0, 5)}
move_counter is 422
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 5), 1: (2, 1, 5), 2: (2, 0, 5), 3: (0, 0, 5)}
previous_agents are {0: (0, 1, 5), 1: (3, 1, 5), 2: (3, 0, 5), 3: (0, 0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 5), 1: (3, 1, 5), 2: (3, 0, 5), 3: (0, 5, 5)}
{0: (0, 1, 5), 1: (2, 1, 5), 2: (2, 0, 5), 3: (0, 0, 5)}
welp
welp
agents are {0: (0, 1, 5), 1: (1, 1, 5), 2: (1, 0, 5), 3: (0, 0, 5)}
move_counter is 426
we just moved the agents on the vertices, where 1st coord is 1, its first coord is changed by -1
agents are at {0: (0, 1, 5), 1: (1, 1, 5), 2: (1, 0, 5), 3: (0, 0, 5)}
previous_agents are {0: (0, 1, 5), 1: (2, 1, 5), 2: (2, 0, 5), 3: (0, 0, 5)}
ribbit
ribbit
spare agents are in the position at {0: (0, 2, 5), 1: (2, 1, 5), 2: (2, 0, 5), 3: (0, 5, 5)}
{0: (0, 1, 5), 1: (1, 1, 5), 2: (1, 0, 5), 3: (0, 0, 5)}
value of y is 1
we finshed
4
no grey nodes remain
after init is 5
tinit is 5
tmoves is 428
move counted is 428
move counter at starting position is 0
asd
Graph with 10 nodes and 9 edges
2
2
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[(0, 8), (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 9)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
{0: 'grey', 1: 'grey', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'grey', 9: 'grey'}
appended alpha value for node 0 is: 2
appended alpha value for node 1 is: 2
appended alpha value for node 2 is: 2
appended alpha value for node 3 is: 2
appended alpha value for node 4 is: 2
appended alpha value for node 5 is: 2
appended alpha value for node 6 is: 2
appended alpha value for node 7 is: 2
appended alpha value for node 8 is: 1
appended alpha value for node 9 is: 1
a_try is {0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1}
neigh list is of 0 is [8, 1]
neigh list is of 8 is []
neigh list is of 1 is [2]
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
appended mu value for node 0 is: 18
neigh list is of 1 is [0, 2]
neigh list is of 0 is [8]
neigh list is of 8 is []
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
appended mu value for node 1 is: 18
neigh list is of 2 is [1, 3]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
appended mu value for node 2 is: 18
neigh list is of 3 is [2, 4]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
appended mu value for node 3 is: 18
neigh list is of 4 is [3, 5]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
appended mu value for node 4 is: 18
neigh list is of 5 is [4, 6]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
appended mu value for node 5 is: 18
neigh list is of 6 is [5, 7]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
neigh list is of 7 is [9]
neigh list is of 9 is []
appended mu value for node 6 is: 18
neigh list is of 7 is [6, 9]
neigh list is of 6 is [5]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
neigh list is of 9 is []
appended mu value for node 7 is: 18
neigh list is of 8 is [0]
neigh list is of 0 is [1]
neigh list is of 1 is [2]
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
appended mu value for node 8 is: 18
neigh list is of 9 is [7]
neigh list is of 7 is [6]
neigh list is of 6 is [5]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
appended mu value for node 9 is: 18
mu_try is {0: 18, 1: 18, 2: 18, 3: 18, 4: 18, 5: 18, 6: 18, 7: 18, 8: 18, 9: 18}
a_try is {0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1}
min_a is [8, 9]
minimum_mu value is: 18
minimum_mu is [8, 9]
decont v is 8
decont T is [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
moving 1 agents to 8
agents are {0: 8}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is -1
v_neighbours is [0]
state of a before the for loop is {0: 2}
current state of a is {0: 2}
the max key is 0
len of ordered_v_neighbors is 1and its contents are [0]
ordered_v_neighbours is [0]
decont v is 0
decont T is [0, 1, 2, 3, 4, 5, 6, 7, 9]
moving 1 agents to 0
agents are {0: 0}
color is {0: 'black', 1: 'grey', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'white', 9: 'grey'}
previous node is 8
v_neighbours is [1]
state of a before the for loop is {1: 2}
current state of a is {1: 2}
the max key is 1
len of ordered_v_neighbors is 1and its contents are [1]
ordered_v_neighbours is [1]
decont v is 1
decont T is [1, 2, 3, 4, 5, 6, 7, 9]
moving 1 agents to 1
agents are {0: 1}
color is {0: 'white', 1: 'black', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'white', 9: 'grey'}
previous node is 0
v_neighbours is [2]
state of a before the for loop is {2: 2}
current state of a is {2: 2}
the max key is 2
len of ordered_v_neighbors is 1and its contents are [2]
ordered_v_neighbours is [2]
decont v is 2
decont T is [2, 3, 4, 5, 6, 7, 9]
moving 1 agents to 2
agents are {0: 2}
color is {0: 'white', 1: 'white', 2: 'black', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'white', 9: 'grey'}
previous node is 1
v_neighbours is [3]
state of a before the for loop is {3: 2}
current state of a is {3: 2}
the max key is 3
len of ordered_v_neighbors is 1and its contents are [3]
ordered_v_neighbours is [3]
decont v is 3
decont T is [3, 4, 5, 6, 7, 9]
moving 1 agents to 3
agents are {0: 3}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'black', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'white', 9: 'grey'}
previous node is 2
v_neighbours is [4]
state of a before the for loop is {4: 2}
current state of a is {4: 2}
the max key is 4
len of ordered_v_neighbors is 1and its contents are [4]
ordered_v_neighbours is [4]
decont v is 4
decont T is [4, 5, 6, 7, 9]
moving 1 agents to 4
agents are {0: 4}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'black', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'white', 9: 'grey'}
previous node is 3
v_neighbours is [5]
state of a before the for loop is {5: 2}
current state of a is {5: 2}
the max key is 5
len of ordered_v_neighbors is 1and its contents are [5]
ordered_v_neighbours is [5]
decont v is 5
decont T is [5, 6, 7, 9]
moving 1 agents to 5
agents are {0: 5}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'black', 6: 'grey', 7: 'grey', 8: 'white', 9: 'grey'}
previous node is 4
v_neighbours is [6]
state of a before the for loop is {6: 2}
current state of a is {6: 2}
the max key is 6
len of ordered_v_neighbors is 1and its contents are [6]
ordered_v_neighbours is [6]
decont v is 6
decont T is [6, 7, 9]
moving 1 agents to 6
agents are {0: 6}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'black', 7: 'grey', 8: 'white', 9: 'grey'}
previous node is 5
v_neighbours is [7]
state of a before the for loop is {7: 2}
current state of a is {7: 2}
the max key is 7
len of ordered_v_neighbors is 1and its contents are [7]
ordered_v_neighbours is [7]
decont v is 7
decont T is [7, 9]
moving 1 agents to 7
agents are {0: 7}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'black', 8: 'white', 9: 'grey'}
previous node is 6
v_neighbours is [9]
state of a before the for loop is {9: 1}
current state of a is {9: 1}
the max key is 9
len of ordered_v_neighbors is 1and its contents are [9]
ordered_v_neighbours is [9]
decont v is 9
decont T is [9]
moving 1 agents to 9
agents are {0: 9}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'black'}
previous node is 7
we have reached a leaf
before moving back, the current value of neighbor is 9
the i and agent[i] we're moving is currently: 0 9
we were in a leaf, now we're moving back 1 agents from9 to 7
agents are {0: 7}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'black', 8: 'white', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 7
the i and agent[i] we're moving is currently: 0 7
we were in a leaf, now we're moving back 1 agents from7 to 6
agents are {0: 6}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'black', 7: 'white', 8: 'white', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 6
the i and agent[i] we're moving is currently: 0 6
we were in a leaf, now we're moving back 1 agents from6 to 5
agents are {0: 5}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'black', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 5
the i and agent[i] we're moving is currently: 0 5
we were in a leaf, now we're moving back 1 agents from5 to 4
agents are {0: 4}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'black', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 4
the i and agent[i] we're moving is currently: 0 4
we were in a leaf, now we're moving back 1 agents from4 to 3
agents are {0: 3}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 3
the i and agent[i] we're moving is currently: 0 3
we were in a leaf, now we're moving back 1 agents from3 to 2
agents are {0: 2}
color is {0: 'white', 1: 'white', 2: 'black', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 2
the i and agent[i] we're moving is currently: 0 2
we were in a leaf, now we're moving back 1 agents from2 to 1
agents are {0: 1}
color is {0: 'white', 1: 'black', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 1
the i and agent[i] we're moving is currently: 0 1
we were in a leaf, now we're moving back 1 agents from1 to 0
agents are {0: 0}
color is {0: 'black', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 0
the i and agent[i] we're moving is currently: 0 0
we were in a leaf, now we're moving back 1 agents from0 to 8
agents are {0: 8}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
1
no grey nodes remain
number of agents is 1
move counted is 18
move counter at starting position is 0
asd
Graph with 10 nodes and 9 edges
2
2
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[(0, 8), (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 9)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
{0: 'grey', 1: 'grey', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'grey', 9: 'grey'}
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 0 is: 2
v is....
1
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 1 is: 2
v is....
2
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 2 is: 2
v is....
3
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 3 is: 2
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 4 is: 2
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 5 is: 2
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 6 is: 2
v is....
7
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 7 is: 2
v is....
8
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
1
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended alpha value for node 8 is: 1
v is....
9
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
1
v is....
7
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8]
v degree is...
1
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended alpha value for node 9 is: 1
a_try is {0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1}
neigh list is of 0 is [8, 1]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neigh list is of 1 is [2]
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 0 is: 18
neigh list is of 1 is [0, 2]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 1 is: 18
neigh list is of 2 is [1, 3]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 2 is: 18
neigh list is of 3 is [2, 4]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 3 is: 18
neigh list is of 4 is [3, 5]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 4 is: 18
neigh list is of 5 is [4, 6]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 5 is: 18
neigh list is of 6 is [5, 7]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 6 is: 18
neigh list is of 7 is [6, 9]
neigh list is of 6 is [5]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
appended mu value for node 7 is: 18
neigh list is of 8 is [0]
neigh list is of 0 is [1]
neigh list is of 1 is [2]
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 8 is: 18
neigh list is of 9 is [7]
neigh list is of 7 is [6]
neigh list is of 6 is [5]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
7
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8]
v degree is...
1
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 9 is: 18
mu_try is {0: 18, 1: 18, 2: 18, 3: 18, 4: 18, 5: 18, 6: 18, 7: 18, 8: 18, 9: 18}
a_try is {0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1}
min_a is [8, 9]
minimum_mu value is: 18
minimum_mu is [8, 9]
decont v is 8
decont T is [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v is....
8
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
1
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 8}
value of i is 0 and backup_agents are {0: 8}
state of backup_agents became {0: 8}
moving 1 agents to 8
agents are {0: 8}
backup agents are {0: 8}
move counter is 0
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is -1
v_neighbours is [0]
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {0: 2}
current state of a is {0: 2}
the max key is 0
len of ordered_v_neighbors is 1and its contents are [0]
ordered_v_neighbours is [0]
decont v is 0
decont T is [0, 1, 2, 3, 4, 5, 6, 7, 9]
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 8}
value of i is 0 and backup_agents are {0: 8}
moving 1 agents to 0
agents are {0: 0}
backup agents are {0: 8}
move counter is 1
color is {0: 'black', 1: 'grey', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is 8
v_neighbours is [1]
v is....
1
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
2
v is....
0
T consists of nodes:
[0]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {1: 2}
current state of a is {1: 2}
the max key is 1
len of ordered_v_neighbors is 1and its contents are [1]
ordered_v_neighbours is [1]
decont v is 1
decont T is [1, 2, 3, 4, 5, 6, 7, 9]
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 8}
value of i is 0 and backup_agents are {0: 8}
moving 1 agents to 1
agents are {0: 1}
backup agents are {0: 0}
move counter is 3
color is {0: 'black', 1: 'black', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is 0
v_neighbours is [2]
v is....
2
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
2
v is....
1
T consists of nodes:
[1]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {2: 2}
current state of a is {2: 2}
the max key is 2
len of ordered_v_neighbors is 1and its contents are [2]
ordered_v_neighbours is [2]
decont v is 2
decont T is [2, 3, 4, 5, 6, 7, 9]
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 0}
value of i is 0 and backup_agents are {0: 0}
moving 1 agents to 2
agents are {0: 2}
backup agents are {0: 1}
move counter is 5
color is {0: 'white', 1: 'black', 2: 'black', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is 1
v_neighbours is [3]
v is....
3
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
2
v is....
2
T consists of nodes:
[2]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {3: 2}
current state of a is {3: 2}
the max key is 3
len of ordered_v_neighbors is 1and its contents are [3]
ordered_v_neighbours is [3]
decont v is 3
decont T is [3, 4, 5, 6, 7, 9]
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 1}
value of i is 0 and backup_agents are {0: 1}
moving 1 agents to 3
agents are {0: 3}
backup agents are {0: 2}
move counter is 7
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is 2
v_neighbours is [4]
v is....
4
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
2
v is....
3
T consists of nodes:
[3]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {4: 2}
current state of a is {4: 2}
the max key is 4
len of ordered_v_neighbors is 1and its contents are [4]
ordered_v_neighbours is [4]
decont v is 4
decont T is [4, 5, 6, 7, 9]
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 2}
value of i is 0 and backup_agents are {0: 2}
moving 1 agents to 4
agents are {0: 4}
backup agents are {0: 3}
move counter is 9
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is 3
v_neighbours is [5]
v is....
5
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
2
v is....
4
T consists of nodes:
[4]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {5: 2}
current state of a is {5: 2}
the max key is 5
len of ordered_v_neighbors is 1and its contents are [5]
ordered_v_neighbours is [5]
decont v is 5
decont T is [5, 6, 7, 9]
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 3}
value of i is 0 and backup_agents are {0: 3}
moving 1 agents to 5
agents are {0: 5}
backup agents are {0: 4}
move counter is 11
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'black', 6: 'grey', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is 4
v_neighbours is [6]
v is....
6
T consists of nodes:
[5, 6, 7, 9]
v degree is...
2
v is....
5
T consists of nodes:
[5]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {6: 2}
current state of a is {6: 2}
the max key is 6
len of ordered_v_neighbors is 1and its contents are [6]
ordered_v_neighbours is [6]
decont v is 6
decont T is [6, 7, 9]
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 4}
value of i is 0 and backup_agents are {0: 4}
moving 1 agents to 6
agents are {0: 6}
backup agents are {0: 5}
move counter is 13
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'grey', 8: 'black', 9: 'grey'}
previous node is 5
v_neighbours is [7]
v is....
7
T consists of nodes:
[6, 7, 9]
v degree is...
2
v is....
6
T consists of nodes:
[6]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {7: 2}
current state of a is {7: 2}
the max key is 7
len of ordered_v_neighbors is 1and its contents are [7]
ordered_v_neighbours is [7]
decont v is 7
decont T is [7, 9]
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
error point is 1000
state of backup_agents is {0: 5}
value of i is 0 and backup_agents are {0: 5}
moving 1 agents to 7
agents are {0: 7}
backup agents are {0: 6}
move counter is 15
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'black', 8: 'black', 9: 'grey'}
previous node is 6
v_neighbours is [9]
v is....
9
T consists of nodes:
[7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
state of a before the for loop is {9: 1}
current state of a is {9: 1}
the max key is 9
len of ordered_v_neighbors is 1and its contents are [9]
ordered_v_neighbours is [9]
decont v is 9
decont T is [9]
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
error point is 1000
state of backup_agents is {0: 6}
value of i is 0 and backup_agents are {0: 6}
moving 1 agents to 9
agents are {0: 9}
backup agents are {0: 7}
move counter is 17
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'black', 8: 'black', 9: 'black'}
previous node is 7
we have reached a leaf
before moving back, the current value of neighbor is 9
the i and agent[i] we're moving is currently: 0 9
we were in a leaf, now we're moving back 1 agents from9 to 7
agents are {0: 7}
backup agents are {0: 6}
move counter is 19
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'black', 8: 'black', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 7
the i and agent[i] we're moving is currently: 0 7
we were in a leaf, now we're moving back 1 agents from7 to 6
agents are {0: 6}
backup agents are {0: 5}
move counter is 21
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 6
the i and agent[i] we're moving is currently: 0 6
we were in a leaf, now we're moving back 1 agents from6 to 5
agents are {0: 5}
backup agents are {0: 4}
move counter is 23
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'black', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 5
the i and agent[i] we're moving is currently: 0 5
we were in a leaf, now we're moving back 1 agents from5 to 4
agents are {0: 4}
backup agents are {0: 3}
move counter is 25
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'black', 5: 'white', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 4
the i and agent[i] we're moving is currently: 0 4
we were in a leaf, now we're moving back 1 agents from4 to 3
agents are {0: 3}
backup agents are {0: 2}
move counter is 27
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 3
the i and agent[i] we're moving is currently: 0 3
we were in a leaf, now we're moving back 1 agents from3 to 2
agents are {0: 2}
backup agents are {0: 1}
move counter is 29
color is {0: 'white', 1: 'black', 2: 'black', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 2
the i and agent[i] we're moving is currently: 0 2
we were in a leaf, now we're moving back 1 agents from2 to 1
agents are {0: 1}
backup agents are {0: 0}
move counter is 31
color is {0: 'black', 1: 'black', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 1
the i and agent[i] we're moving is currently: 0 1
we were in a leaf, now we're moving back 1 agents from1 to 0
agents are {0: 0}
backup agents are {0: 8}
move counter is 33
color is {0: 'black', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
before moving back, the current value of neighbor is 0
the i and agent[i] we're moving is currently: 0 0
we were in a leaf, now we're moving back 1 agents from0 to 8
agents are {0: 8}
backup agents are {0: 8}
move counter is 34
color is {0: 'white', 1: 'white', 2: 'white', 3: 'white', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 7
1
no grey nodes remain
move counted is 34
asd
Graph with 10 nodes and 9 edges
2
2
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[(0, 8), (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 9)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
{0: 'grey', 1: 'grey', 2: 'grey', 3: 'grey', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'grey', 9: 'grey'}
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 0 is: 2
v is....
1
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 1 is: 2
v is....
2
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 2 is: 2
v is....
3
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 3 is: 2
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 4 is: 2
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 5 is: 2
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 6 is: 2
v is....
7
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
appended alpha value for node 7 is: 2
v is....
8
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
1
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended alpha value for node 8 is: 1
v is....
9
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
1
v is....
7
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8]
v degree is...
1
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended alpha value for node 9 is: 1
a_try is {0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1}
neigh list is of 0 is [8, 1]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neigh list is of 1 is [2]
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 0 is: 18
neigh list is of 1 is [0, 2]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 1 is: 18
neigh list is of 2 is [1, 3]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 2 is: 18
neigh list is of 3 is [2, 4]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 3 is: 18
neigh list is of 4 is [3, 5]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 4 is: 18
neigh list is of 5 is [4, 6]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 5 is: 18
neigh list is of 6 is [5, 7]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 6 is: 18
neigh list is of 7 is [6, 9]
neigh list is of 6 is [5]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
appended mu value for node 7 is: 18
neigh list is of 8 is [0]
neigh list is of 0 is [1]
neigh list is of 1 is [2]
neigh list is of 2 is [3]
neigh list is of 3 is [4]
neigh list is of 4 is [5]
neigh list is of 5 is [6]
neigh list is of 6 is [7]
neigh list is of 7 is [9]
neigh list is of 9 is []
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
0
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
1
T consists of nodes:
[1, 2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
2
T consists of nodes:
[2, 3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 8 is: 18
neigh list is of 9 is [7]
neigh list is of 7 is [6]
neigh list is of 6 is [5]
neigh list is of 5 is [4]
neigh list is of 4 is [3]
neigh list is of 3 is [2]
neigh list is of 2 is [1]
neigh list is of 1 is [0]
neigh list is of 0 is [8]
neigh list is of 8 is []
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
7
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8]
v degree is...
1
v is....
6
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 8]
v degree is...
1
v is....
5
T consists of nodes:
[0, 1, 2, 3, 4, 5, 8]
v degree is...
1
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 8]
v degree is...
1
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
appended mu value for node 9 is: 18
mu_try is {0: 18, 1: 18, 2: 18, 3: 18, 4: 18, 5: 18, 6: 18, 7: 18, 8: 18, 9: 18}
a_try is {0: 2, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1}
min_a is [8, 9]
minimum_mu value is: 18
minimum_mu is [8, 9]
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
this is T
Graph with 10 nodes and 9 edges
minofmaxdist after
quadratic roots of the quadratic equation
0.24131195463483973
-0.3180647910679746
chernoff is 9
min nr_of_agents is 6
starting node is 3and the nr_of_agents are 9
quadratic roots of the quadratic equation
0.24131195463483973
-0.3180647910679746
agents_if is {0: 0.9999991817641959}
agents_if is {0: 0.9999991817641959, 1: 0.9999991752406976}
agents_if is {0: 0.9999991817641959, 1: 0.9999991752406976, 2: 0.9999991112410924}
agents_if is {0: 0.9999991817641959, 1: 0.9999991752406976, 2: 0.9999991112410924, 3: 0.9999991978211248}
agents_if is {0: 0.9999991817641959, 1: 0.9999991752406976, 2: 0.9999991112410924, 3: 0.9999991978211248, 4: 0.9999991251357245}
agents_if is {0: 0.9999991817641959, 1: 0.9999991752406976, 2: 0.9999991112410924, 3: 0.9999991978211248, 4: 0.9999991251357245, 5: 0.9999991161854546}
agents_if is {0: 0.9999991817641959, 1: 0.9999991752406976, 2: 0.9999991112410924, 3: 0.9999991978211248, 4: 0.9999991251357245, 5: 0.9999991161854546, 6: 0.9999991150152044}
agents_if is {0: 0.9999991817641959, 1: 0.9999991752406976, 2: 0.9999991112410924, 3: 0.9999991978211248, 4: 0.9999991251357245, 5: 0.9999991161854546, 6: 0.9999991150152044, 7: 0.999999103687903}
agents_if is {0: 0.9999991817641959, 1: 0.9999991752406976, 2: 0.9999991112410924, 3: 0.9999991978211248, 4: 0.9999991251357245, 5: 0.9999991161854546, 6: 0.9999991150152044, 7: 0.999999103687903, 8: 0.9999991392897419}
agents_when at the start is {}
decont v is 3
decont T is [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
moving the chain to 3
agents are {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'grey', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'grey', 9: 'grey'}
previous node is -1
agents 1 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 10
v_neighbours is [2, 4]
v is....
2
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
3
T consists of nodes:
[3, 4, 5, 6, 7, 9]
v degree is...
1
v is....
4
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
v is....
4
T consists of nodes:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
v degree is...
2
v is....
3
T consists of nodes:
[0, 1, 2, 3, 8]
v degree is...
1
v is....
2
T consists of nodes:
[0, 1, 2, 8]
v degree is...
1
v is....
1
T consists of nodes:
[0, 1, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
5
T consists of nodes:
[5, 6, 7, 9]
v degree is...
1
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {2: 2, 4: 2}
current state of a is {2: 2, 4: 2}
the max key is 2
current state of a is {2: -1, 4: 2}
the max key is 4
len of ordered_v_neighbors is 2and its contents are [2, 4]
agents 2 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
ordered_v_neighbours is [2, 4]
agents 3 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 4
decont T is [4, 5, 6, 7, 9]
movecounterb4 0
i is 1 and agents is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 1
moving the chain to 4
agents are {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'grey', 6: 'grey', 7: 'grey', 8: 'grey', 9: 'grey'}
previous node is 3
agents 1 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 5
v_neighbours is [5]
v is....
5
T consists of nodes:
[4, 5, 6, 7, 9]
v degree is...
2
v is....
4
T consists of nodes:
[4]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
6
T consists of nodes:
[6, 7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {5: 2}
current state of a is {5: 2}
the max key is 5
len of ordered_v_neighbors is 1and its contents are [5]
agents 2 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
ordered_v_neighbours is [5]
agents 3 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 5
decont T is [5, 6, 7, 9]
movecounterb4 1
i is 1 and agents is {0: 5, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 3
moving the chain to 5
agents are {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'black', 6: 'grey', 7: 'grey', 8: 'grey', 9: 'grey'}
previous node is 4
agents 1 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 4
v_neighbours is [6]
v is....
6
T consists of nodes:
[5, 6, 7, 9]
v degree is...
2
v is....
5
T consists of nodes:
[5]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
7
T consists of nodes:
[7, 9]
v degree is...
1
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {6: 2}
current state of a is {6: 2}
the max key is 6
len of ordered_v_neighbors is 1and its contents are [6]
agents 2 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
ordered_v_neighbours is [6]
agents 3 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 6
decont T is [6, 7, 9]
movecounterb4 3
i is 1 and agents is {0: 6, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 6, 1: 5, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 6
moving the chain to 6
agents are {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'grey', 8: 'grey', 9: 'grey'}
previous node is 5
agents 1 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 3
v_neighbours is [7]
v is....
7
T consists of nodes:
[6, 7, 9]
v degree is...
2
v is....
6
T consists of nodes:
[6]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
9
T consists of nodes:
[9]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {7: 2}
current state of a is {7: 2}
the max key is 7
len of ordered_v_neighbors is 1and its contents are [7]
agents 2 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
ordered_v_neighbours is [7]
agents 3 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 7
decont T is [7, 9]
movecounterb4 6
i is 1 and agents is {0: 7, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 7, 1: 6, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 7, 1: 6, 2: 5, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 10
moving the chain to 7
agents are {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'black', 8: 'grey', 9: 'grey'}
previous node is 6
agents 1 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 2
v_neighbours is [9]
v is....
9
T consists of nodes:
[7, 9]
v degree is...
1
v is....
7
T consists of nodes:
[7]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
state of a before the for loop is {9: 1}
current state of a is {9: 1}
the max key is 9
len of ordered_v_neighbors is 1and its contents are [9]
agents 2 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
ordered_v_neighbours is [9]
agents 3 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 9
decont T is [9]
movecounterb4 10
i is 1 and agents is {0: 9, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 9, 1: 7, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 9, 1: 7, 2: 6, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 9, 1: 7, 2: 6, 3: 5, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 9, 1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 9, 1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 9, 1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 9, 1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 15
moving the chain to 9
agents are {0: 9, 1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'black', 8: 'grey', 9: 'black'}
previous node is 7
agents 1 is {0: 9, 1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 1
we have reached a leaf
agents 4 is {0: 9, 1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 9
we were in a leaf, now we're moving back up the chain from9 to 7
agents 5 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'black', 8: 'grey', 9: 'white'}
previous node is 7
agents 4 is {0: 7, 1: 6, 2: 5, 3: 4, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 7
we were in a leaf, now we're moving back up the chain from7 to 6
agents 5 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'black', 6: 'black', 7: 'white', 8: 'grey', 9: 'white'}
previous node is 7
agents 4 is {0: 6, 1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 6
we were in a leaf, now we're moving back up the chain from6 to 5
agents 5 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'black', 6: 'white', 7: 'white', 8: 'grey', 9: 'white'}
previous node is 7
agents 4 is {0: 5, 1: 4, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 5
we were in a leaf, now we're moving back up the chain from5 to 4
agents 5 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'black', 5: 'white', 6: 'white', 7: 'white', 8: 'grey', 9: 'white'}
previous node is 7
agents 4 is {0: 4, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 4
we were in a leaf, now we're moving back up the chain from4 to 3
agents 5 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'grey', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'grey', 9: 'white'}
previous node is 7
ordered_v_neighbours is [2, 4]
agents 3 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 2
decont T is [0, 1, 2, 8]
movecounterb4 30
i is 1 and agents is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 31
moving the chain to 2
agents are {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'grey', 2: 'black', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'grey', 9: 'white'}
previous node is 3
agents 1 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 4
v_neighbours is [1]
v is....
1
T consists of nodes:
[0, 1, 2, 8]
v degree is...
2
v is....
0
T consists of nodes:
[0, 8]
v degree is...
1
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
v is....
2
T consists of nodes:
[2]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {1: 2}
current state of a is {1: 2}
the max key is 1
len of ordered_v_neighbors is 1and its contents are [1]
agents 2 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
ordered_v_neighbours is [1]
agents 3 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 1
decont T is [0, 1, 8]
movecounterb4 31
i is 1 and agents is {0: 1, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 33
moving the chain to 1
agents are {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'grey', 1: 'black', 2: 'black', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'grey', 9: 'white'}
previous node is 2
agents 1 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 3
v_neighbours is [0]
v is....
0
T consists of nodes:
[0, 1, 8]
v degree is...
2
v is....
8
T consists of nodes:
[8]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
v is....
1
T consists of nodes:
[1]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 4
returning 2
state of a before the for loop is {0: 2}
current state of a is {0: 2}
the max key is 0
len of ordered_v_neighbors is 1and its contents are [0]
agents 2 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
ordered_v_neighbours is [0]
agents 3 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 0
decont T is [0, 8]
movecounterb4 33
i is 1 and agents is {0: 0, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 0, 1: 1, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 36
moving the chain to 0
agents are {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'black', 1: 'black', 2: 'black', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'grey', 9: 'white'}
previous node is 1
agents 1 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 2
v_neighbours is [8]
v is....
8
T consists of nodes:
[0, 8]
v degree is...
1
v is....
0
T consists of nodes:
[0]
v degree is...
0
neighbors are ordered by alpha, now evaluation by degree commencing
0
branch 1
returning one
neighbors are ordered by alpha, now evaluation by degree commencing
branch 2
returning 1
state of a before the for loop is {8: 1}
current state of a is {8: 1}
the max key is 8
len of ordered_v_neighbors is 1and its contents are [8]
agents 2 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
ordered_v_neighbours is [8]
agents 3 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
decont v is 8
decont T is [8]
movecounterb4 36
i is 1 and agents is {0: 8, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 2 and agents is {0: 8, 1: 0, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 3 and agents is {0: 8, 1: 0, 2: 1, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 4 and agents is {0: 8, 1: 0, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 5 and agents is {0: 8, 1: 0, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 6 and agents is {0: 8, 1: 0, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 7 and agents is {0: 8, 1: 0, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
i is 8 and agents is {0: 8, 1: 0, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3} and agents_0 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
movecounterafter 40
moving the chain to 8
agents are {0: 8, 1: 0, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'black', 1: 'black', 2: 'black', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'black', 9: 'white'}
previous node is 0
agents 1 is {0: 8, 1: 0, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
len(list(T.nodes)) is 1
we have reached a leaf
agents 4 is {0: 8, 1: 0, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 8
we were in a leaf, now we're moving back up the chain from8 to 0
agents 5 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'black', 1: 'black', 2: 'black', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 0
agents 4 is {0: 0, 1: 1, 2: 2, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 0
we were in a leaf, now we're moving back up the chain from0 to 1
agents 5 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'white', 1: 'black', 2: 'black', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 0
agents 4 is {0: 1, 1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 1
we were in a leaf, now we're moving back up the chain from1 to 2
agents 5 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'white', 1: 'white', 2: 'black', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 0
agents 4 is {0: 2, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
before moving back, the current value of neighbor is 2
we were in a leaf, now we're moving back up the chain from2 to 3
agents 5 is {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
agents are {0: 3, 1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3}
color is {0: 'white', 1: 'white', 2: 'white', 3: 'black', 4: 'white', 5: 'white', 6: 'white', 7: 'white', 8: 'white', 9: 'white'}
previous node is 0
1
no grey nodes remain
move counted is 50
tree chain done
